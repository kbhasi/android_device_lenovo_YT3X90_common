diff --git a/Android.mk b/Android.mk
index 818b951..06e53cc 100644
--- a/Android.mk
+++ b/Android.mk
@@ -26,6 +26,18 @@ LOCAL_PATH := $(call my-dir)
 # TODO: find a more appropriate way to do this.
 framework_res_source_path := APPS/framework-res_intermediates/src
 
+
+#CHAOZHUO START
+ifeq ($(BUILD_CHAOZHUO),true)
+$(warning "build chaozhuo")
+$(warning $(shell ($(LOCAL_PATH)/chaozhuo_switch.sh true)))
+else
+$(warning "build chaozhuo false")
+$(warning $(shell ($(LOCAL_PATH)/chaozhuo_switch.sh false)))
+endif
+#CHAOZHUO END
+
+
 # Build the master framework library.
 # The framework contains too many method references (>64K) for poor old DEX.
 # So we first build the framework as a monolithic static library then split it
@@ -427,6 +439,15 @@ LOCAL_SRC_FILES += \
 	packages/services/Proxy/com/android/net/IProxyCallback.aidl \
 	packages/services/Proxy/com/android/net/IProxyPortListener.aidl \
 
+
+#CHAOZHUO START
+ifeq ($(BUILD_CHAOZHUO),true)
+LOCAL_SRC_FILES += \
+    core/java/android/app/IStackListenerCallback.aidl \
+
+endif
+#CHAOZHUO END
+
 #begin zhangsx10 add smartpad manager service
 LOCAL_SRC_FILES += \
 	core/java/android/hardware/smartpad/ISmartpadManager.aidl
diff --git a/api/current.txt b/api/current.txt
index 579d4f5..b95e02c 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -3545,6 +3545,7 @@ package android.app {
     method public static boolean isRunningInTestHarness();
     method public static boolean isUserAMonkey();
     method public void killBackgroundProcesses(java.lang.String);
+    method public void moveHomeToBack() throws android.os.RemoteException;
     method public void moveTaskToFront(int, int);
     method public void moveTaskToFront(int, int, android.os.Bundle);
     method public deprecated void restartPackage(java.lang.String);
@@ -22793,6 +22794,7 @@ package android.os {
     field public static final java.lang.String BASE_OS;
     field public static final java.lang.String CODENAME;
     field public static final java.lang.String INCREMENTAL;
+    field public static final java.lang.String PHOENIX;
     field public static final int PREVIEW_SDK_INT;
     field public static final java.lang.String RELEASE;
     field public static final deprecated java.lang.String SDK;
diff --git a/api/system-current.txt b/api/system-current.txt
index b787263..d3363af 100644
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -3654,6 +3654,7 @@ package android.app {
     method public static boolean isRunningInTestHarness();
     method public static boolean isUserAMonkey();
     method public void killBackgroundProcesses(java.lang.String);
+    method public void moveHomeToBack() throws android.os.RemoteException;
     method public void moveTaskToFront(int, int);
     method public void moveTaskToFront(int, int, android.os.Bundle);
     method public deprecated void restartPackage(java.lang.String);
@@ -24737,6 +24738,7 @@ package android.os {
     field public static final java.lang.String BASE_OS;
     field public static final java.lang.String CODENAME;
     field public static final java.lang.String INCREMENTAL;
+    field public static final java.lang.String PHOENIX;
     field public static final int PREVIEW_SDK_INT;
     field public static final java.lang.String RELEASE;
     field public static final deprecated java.lang.String SDK;
diff --git a/chaozhuo_switch.sh b/chaozhuo_switch.sh
new file mode 100755
index 0000000..e83c27a
--- /dev/null
+++ b/chaozhuo_switch.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+local_path=`pwd`
+switch_filename=$local_path"/frameworks/base/core/java/com/chaozhuo/system/CZSwitchManager.java"
+echo $switch_filename
+if $1; then
+sed -i '/BUILD_MAIN_SWITCH_ON/s/false/true/' $switch_filename
+else
+sed -i '/BUILD_MAIN_SWITCH_ON/s/true/false/' $switch_filename
+fi
diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index f79f3e8..5d16255 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -58,6 +58,9 @@ import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.drawable.Drawable;
+//CHAOZHUO START
+import android.graphics.Rect;
+//CHAOZHUO END
 import android.media.AudioManager;
 import android.media.session.MediaController;
 import android.net.Uri;
@@ -113,6 +116,10 @@ import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+//CHAOZHUO START
+import android.app.ActivityManager.StackInfo;
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * An activity is a single, focused thing that the user can do.  Almost all
@@ -705,7 +712,9 @@ public class Activity extends ContextThemeWrapper
 
     // set by the thread after the constructor and before onCreate(Bundle savedInstanceState) is called.
     private Instrumentation mInstrumentation;
-    private IBinder mToken;
+    //CHAOZHUO START
+    IBinder mToken;
+    //CHAOZHUO END
     private int mIdent;
     /*package*/ String mEmbeddedID;
     private Application mApplication;
@@ -2694,7 +2703,14 @@ public class Activity extends ContextThemeWrapper
     public boolean hasWindowFocus() {
         Window w = getWindow();
         if (w != null) {
-            View d = w.getDecorView();
+            //CHAOZHUO START
+            View d;
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                d = w.getDecorRootView();
+            } else {
+                d = w.getDecorView();
+            }
+            //CHAOZHUO END
             if (d != null) {
                 return d.hasWindowFocus();
             }
@@ -2735,7 +2751,13 @@ public class Activity extends ContextThemeWrapper
             return true;
         }
         View decor = mDecor;
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (decor == null) decor = win.getDecorRootView();
+        } else {
         if (decor == null) decor = win.getDecorView();
+        }
+        //CHAOZHUO END
         return event.dispatch(this, decor != null
                 ? decor.getKeyDispatcherState() : null, this);
     }
@@ -5298,6 +5320,16 @@ public class Activity extends ContextThemeWrapper
     public void setTitle(CharSequence title) {
         mTitle = title;
         onTitleChanged(title, mTitleColor);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            try{
+            ActivityManagerNative.getDefault().
+            setAppTitle(mToken, mTitle.toString());
+        } catch(Exception e) {
+
+        }
+        }
+        //CHAOZHUO END
 
         if (mParent != null) {
             mParent.onChildTitleChanged(this, title);
@@ -5913,7 +5945,13 @@ public class Activity extends ContextThemeWrapper
      */
     @Nullable
     public ActionMode startActionMode(ActionMode.Callback callback) {
-        return mWindow.getDecorView().startActionMode(callback);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            return mWindow.getDecorRootView().startActionMode(callback);
+        } else {
+            return mWindow.getDecorView().startActionMode(callback);
+        }
+        //CHAOZHUO END
     }
 
     /**
@@ -6191,7 +6229,35 @@ public class Activity extends ContextThemeWrapper
     final void setParent(Activity parent) {
         mParent = parent;
     }
-
+//CHAOZHUO START
+    /**
+     * TODO: returns stackbox in which app was started.
+     * maybe there is an better way to get stackbox than iterating
+     * through all stackboxes. This cause also one issue with permission:
+     * all apps need to have MANAGE_ACTIVITY_STACKS. Currently this is
+     * turned off in AMS.
+     */
+    private int getStackId() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {    
+        try {
+            int taskId = getTaskId();
+            List<StackInfo> list = ActivityManagerNative.getDefault().getAllStackInfos();
+            for (StackInfo sb : list) {
+            if ((sb.stackId != -1) && (sb.taskIds != null)) {
+                for (int i = 0; i < sb.taskIds.length; i++) {
+                if (taskId == sb.taskIds[i]) {
+                    return sb.stackId;
+                }
+                }
+            }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        }
+        return -1;
+    }
+//CHAOZHUO END
     final void attach(Context context, ActivityThread aThread,
             Instrumentation instr, IBinder token, int ident,
             Application application, Intent intent, ActivityInfo info,
@@ -6203,6 +6269,14 @@ public class Activity extends ContextThemeWrapper
         mFragments.attachHost(null /*parent*/);
 
         mWindow = new PhoneWindow(this);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {    
+        int mode = 0;
+        if (aThread!= null && aThread.mBoundApplication != null && aThread.mBoundApplication.mwCompat != null) {
+            mode = aThread.mBoundApplication.mwCompat.mCompatMode;
+        }
+        }
+        //CHAOZHUO END
         mWindow.setCallback(this);
         mWindow.setOnWindowDismissedCallback(this);
         mWindow.getLayoutInflater().setPrivateFactory(this);
@@ -6267,6 +6341,11 @@ public class Activity extends ContextThemeWrapper
             Log.e("KPI-SAD-AC-1-1", SystemClock.elapsedRealtime()+" enter performCreate");
         }
         restoreHasCurrentPermissionRequest(icicle);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {	
+            mWindow.setStackId(getStackId());
+        }
+        //CAOZHUO END
         onCreate(icicle);
         mActivityTransitionState.readState(icicle);
         performCreateCommon();
@@ -6652,6 +6731,19 @@ public class Activity extends ContextThemeWrapper
                 PackageManager.EXTRA_REQUEST_PERMISSIONS_RESULTS) : new int[0];
         fragment.onRequestPermissionsResult(requestCode, permissions, grantResults);
     }
+    //CHAOZHUO START
+    /*
+     * PhoenixOs Feature
+     */
+
+    /** @hide */
+    public boolean updateWindowMode(boolean windowMode) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {    
+            getWindow().setWindowMode(windowMode);
+        }
+    return false;
+    }
+    //CHAOZHUO END
 
     class HostCallbacks extends FragmentHostCallback<Activity> {
         public HostCallbacks() {
diff --git a/core/java/android/app/ActivityManager.java b/core/java/android/app/ActivityManager.java
index 87c9efc2..6f6f20c 100644
--- a/core/java/android/app/ActivityManager.java
+++ b/core/java/android/app/ActivityManager.java
@@ -68,6 +68,10 @@ import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.List;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 /**
  * Interact with the overall activities running in the system.
  */
@@ -87,7 +91,14 @@ public class ActivityManager {
      * signed with the same certificate as the one declaring the {@code &lt;meta-data>}.
      */
     public static final String META_HOME_ALTERNATE = "android.app.home.alternate";
-
+    
+    // CHAOZHUO START
+    /** 
+     * @hide
+     */
+    public static final int START_TOO_MANY_OPENED_ACTIVITY = -9;
+    // CHAOZHUO END
+    
     /**
      * Result for IActivityManager.startActivity: trying to start a background user
      * activity that shouldn't be displayed for all users.
@@ -874,6 +885,14 @@ public class ActivityManager {
          * @hide
          */
         public int affiliatedTaskColor;
+        //CHAOZHUO START
+        /**
+         * task wih full Screen activity.
+         *
+         * @hide
+         */
+        public boolean taskFullScreen;
+        //CHAOZHUO END
 
         /**
          * The component launched as the first activity in the task.
@@ -925,6 +944,7 @@ public class ActivityManager {
             dest.writeLong(lastActiveTime);
             dest.writeInt(affiliatedTaskId);
             dest.writeInt(affiliatedTaskColor);
+            dest.writeInt(taskFullScreen ? 1 : 0);
             ComponentName.writeToParcel(baseActivity, dest);
             ComponentName.writeToParcel(topActivity, dest);
             dest.writeInt(numActivities);
@@ -944,6 +964,7 @@ public class ActivityManager {
             lastActiveTime = source.readLong();
             affiliatedTaskId = source.readInt();
             affiliatedTaskColor = source.readInt();
+            taskFullScreen = source.readInt() == 1;
             baseActivity = ComponentName.readFromParcel(source);
             topActivity = ComponentName.readFromParcel(source);
             numActivities = source.readInt();
@@ -1331,8 +1352,248 @@ public class ActivityManager {
             return false;
         }
     }
+    //CHAOZHUO START
+    /**
+     */
+    public void moveHomeToBack() throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            try {
+                ActivityManagerNative.getDefault().moveHomeToBack();
+            } catch (RemoteException e) {
+                // System dead, we will be dead too soon!
+            }
+        }
+    }
 
     /** @hide */
+    public interface ITaskStateListenerCallback extends android.os.IInterface {
+        /** Local-side IPC implementation stub class. */
+        public static abstract class Stub extends android.os.Binder implements
+                ITaskStateListenerCallback {
+            private static final java.lang.String DESCRIPTOR = "android.app.ITaskStateListenerCallback";
+
+            /** Construct the stub at attach it to the interface. */
+            public Stub() {
+                this.attachInterface(this, DESCRIPTOR);
+            }
+
+            /**
+             * Cast an IBinder object into an android.app.ITaskStateListenerCallback
+             * interface, generating a proxy if needed.
+             */
+            public static ITaskStateListenerCallback asInterface(
+                    android.os.IBinder obj) {
+                if ((obj == null)) {
+                    return null;
+                }
+                android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
+                if (((iin != null) && (iin instanceof ITaskStateListenerCallback))) {
+                    return ((ITaskStateListenerCallback) iin);
+                }
+                return new ITaskStateListenerCallback.Stub.Proxy(obj);
+            }
+
+            @Override
+            public android.os.IBinder asBinder() {
+                return this;
+            }
+
+            @Override
+            public boolean onTransact(int code, android.os.Parcel data,
+                    android.os.Parcel reply, int flags)
+                    throws android.os.RemoteException {
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    switch (code) {
+                    case INTERFACE_TRANSACTION: {
+                        reply.writeString(DESCRIPTOR);
+                        return true;
+                    }
+                    case TRANSACTION_onTaskCreate: {
+                        data.enforceInterface(DESCRIPTOR);
+                        ActivityManager.RecentTaskInfo info =
+                                ActivityManager.RecentTaskInfo.CREATOR.createFromParcel(data);
+                        this.onTaskCreate(info);
+                        return true;
+                    }
+                    case TRANSACTION_onTaskClose: {
+                        data.enforceInterface(DESCRIPTOR);
+                        ActivityManager.RecentTaskInfo info =
+                                ActivityManager.RecentTaskInfo.CREATOR.createFromParcel(data);
+                        this.onTaskClose(info);
+                        return true;
+                    }
+                    case TRANSACTION_onTaskFocuseChange: {
+                        data.enforceInterface(DESCRIPTOR);
+                        ActivityManager.RecentTaskInfo info =
+                                ActivityManager.RecentTaskInfo.CREATOR.createFromParcel(data);
+                        this.onTaskFocuseChange(info);
+                        return true;
+                    }
+                    case TRANSACTION_onTaskMinimized: {
+                        data.enforceInterface(DESCRIPTOR);
+                        ActivityManager.RecentTaskInfo info =
+                                ActivityManager.RecentTaskInfo.CREATOR.createFromParcel(data);
+                        this.onTaskMinimized(info);
+                        return true;
+                    }
+                    case TRANSACTION_onTaskProcessStarted: {
+                        data.enforceInterface(DESCRIPTOR);
+                        ActivityManager.RecentTaskInfo info =
+                                ActivityManager.RecentTaskInfo.CREATOR.createFromParcel(data);
+                        this.onTaskProcessStarted(info);
+                        return true;
+                    }
+                    case TRANSACTION_onActivityWindowVisible: {
+                        data.enforceInterface(DESCRIPTOR);
+                        ActivityManager.RecentTaskInfo info =
+                                ActivityManager.RecentTaskInfo.CREATOR.createFromParcel(data);
+                        this.onTaskActivityWindowVisible(info);
+                        return true;
+                    }
+                    }
+                }
+                return super.onTransact(code, data, reply, flags);
+            }
+
+            private static class Proxy implements
+                    ITaskStateListenerCallback {
+                private android.os.IBinder mRemote;
+
+                Proxy(android.os.IBinder remote) {
+                    mRemote = remote;
+                }
+
+                @Override
+                public android.os.IBinder asBinder() {
+                    return mRemote;
+                }
+
+                public java.lang.String getInterfaceDescriptor() {
+                    return DESCRIPTOR;
+                }
+
+                @Override
+                public void onTaskCreate(ActivityManager.RecentTaskInfo info)
+                        throws android.os.RemoteException {
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    android.os.Parcel _data = android.os.Parcel.obtain();
+                    try {                        
+                        _data.writeInterfaceToken(DESCRIPTOR);
+                        info.writeToParcel(_data, 0);
+                        mRemote.transact(Stub.TRANSACTION_onTaskCreate, _data,
+                                null, android.os.IBinder.FLAG_ONEWAY);
+                    } finally {
+                        _data.recycle();
+                    }
+                    }
+                }
+
+                @Override
+                public void onTaskClose(ActivityManager.RecentTaskInfo info)
+                        throws android.os.RemoteException {
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    android.os.Parcel _data = android.os.Parcel.obtain();
+                    try {
+                        _data.writeInterfaceToken(DESCRIPTOR);
+                        info.writeToParcel(_data, 0);
+                        mRemote.transact(Stub.TRANSACTION_onTaskClose, _data,
+                                null, android.os.IBinder.FLAG_ONEWAY);
+                    } finally {
+                        _data.recycle();
+                    }
+                    }
+                }
+
+                @Override
+                public void onTaskFocuseChange(ActivityManager.RecentTaskInfo info)
+                        throws android.os.RemoteException {
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    android.os.Parcel _data = android.os.Parcel.obtain();
+                    try {
+                        _data.writeInterfaceToken(DESCRIPTOR);
+                        info.writeToParcel(_data, 0);
+                        mRemote.transact(Stub.TRANSACTION_onTaskFocuseChange,
+                                _data, null, android.os.IBinder.FLAG_ONEWAY);
+                    } finally {
+                        _data.recycle();
+                    }
+                    }
+                }
+
+                @Override
+                public void onTaskMinimized(ActivityManager.RecentTaskInfo info)
+                        throws android.os.RemoteException {
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    android.os.Parcel _data = android.os.Parcel.obtain();
+                    try {
+                        _data.writeInterfaceToken(DESCRIPTOR);
+                        info.writeToParcel(_data, 0);
+                        mRemote.transact(Stub.TRANSACTION_onTaskMinimized,
+                                _data, null, android.os.IBinder.FLAG_ONEWAY);
+                    } finally {
+                        _data.recycle();
+                    }
+                    }
+                }
+
+                @Override
+                public void onTaskProcessStarted(RecentTaskInfo info) throws RemoteException {
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    android.os.Parcel _data = android.os.Parcel.obtain();
+                    try {
+                        _data.writeInterfaceToken(DESCRIPTOR);
+                        info.writeToParcel(_data, 0);
+                        mRemote.transact(Stub.TRANSACTION_onTaskProcessStarted,
+                                _data, null, android.os.IBinder.FLAG_ONEWAY);
+                    } finally {
+                        _data.recycle();
+                    }
+                    }
+                }
+
+                @Override
+                public void onTaskActivityWindowVisible(RecentTaskInfo info) throws RemoteException {
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    android.os.Parcel _data = android.os.Parcel.obtain();
+                    try {
+                        _data.writeInterfaceToken(DESCRIPTOR);
+                        info.writeToParcel(_data, 0);
+                        mRemote.transact(Stub.TRANSACTION_onActivityWindowVisible,
+                                _data, null, android.os.IBinder.FLAG_ONEWAY);
+                    } finally {
+                        _data.recycle();
+                    }
+                    }
+                }
+            }
+
+            static final int TRANSACTION_onTaskCreate = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
+            static final int TRANSACTION_onTaskClose = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
+            static final int TRANSACTION_onTaskFocuseChange = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
+            static final int TRANSACTION_onTaskMinimized = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
+            static final int TRANSACTION_onTaskProcessStarted = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);
+            static final int TRANSACTION_onActivityWindowVisible = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);
+        }
+
+        public void onTaskCreate(ActivityManager.RecentTaskInfo info)
+                throws android.os.RemoteException;
+
+        public void onTaskClose(ActivityManager.RecentTaskInfo info) throws android.os.RemoteException;
+
+        public void onTaskFocuseChange(ActivityManager.RecentTaskInfo info)
+                throws android.os.RemoteException;
+
+        public void onTaskMinimized(ActivityManager.RecentTaskInfo info)
+                throws android.os.RemoteException;
+
+        public void onTaskProcessStarted(ActivityManager.RecentTaskInfo info)
+                throws android.os.RemoteException;
+
+        public void onTaskActivityWindowVisible(ActivityManager.RecentTaskInfo info)
+                throws android.os.RemoteException;
+    }
+    //CHAOZHUO END
+    /** @hide */
     public static class TaskThumbnail implements Parcelable {
         public Bitmap mainThumbnail;
         public ParcelFileDescriptor thumbnailFileDescriptor;
@@ -1774,6 +2035,14 @@ public class ActivityManager {
         public int[] taskIds;
         public String[] taskNames;
         public int displayId;
+        //CHAOZHUO START
+        /**
+         * Information, whether stack is floating stack, eg.
+         * can be moved around screen
+         */
+        public boolean floating;
+        public boolean infront;
+        //CHAOZHUO END
 
         @Override
         public int describeContents() {
@@ -1790,6 +2059,12 @@ public class ActivityManager {
             dest.writeIntArray(taskIds);
             dest.writeStringArray(taskNames);
             dest.writeInt(displayId);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                dest.writeInt(floating ? 1 : 0);
+                dest.writeInt(infront ? 1 : 0);
+            }
+            //CHAOZHUO END
         }
 
         public void readFromParcel(Parcel source) {
@@ -1799,6 +2074,12 @@ public class ActivityManager {
             taskIds = source.createIntArray();
             taskNames = source.createStringArray();
             displayId = source.readInt();
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                floating = source.readInt() == 1;
+                infront = source.readInt() == 1;
+            }
+            //CHAOZHUO END
         }
 
         public static final Creator<StackInfo> CREATOR = new Creator<StackInfo>() {
diff --git a/core/java/android/app/ActivityManagerNative.java b/core/java/android/app/ActivityManagerNative.java
index 38f6cbc..7b7f555 100644
--- a/core/java/android/app/ActivityManagerNative.java
+++ b/core/java/android/app/ActivityManagerNative.java
@@ -60,6 +60,10 @@ import com.android.internal.os.IResultReceiver;
 import java.util.ArrayList;
 import java.util.List;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 /** {@hide} */
 public abstract class ActivityManagerNative extends Binder implements IActivityManager
 {
@@ -2597,6 +2601,140 @@ public abstract class ActivityManagerNative extends Binder implements IActivityM
             reply.writeInt(res ? 1 : 0);
             return true;
         }
+        //CHAOZHUO START
+        /**
+         * Phoenix Os Add
+         */
+        case MOVE_APP_WINDOW_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            IBinder token = data.readStrongBinder();
+            int x = data.readInt();
+            int y = data.readInt();
+            reply.writeNoException();
+            boolean res = moveAppWindow(token,x,y);
+            reply.writeNoException();
+            reply.writeInt(res ? 1 : 0);
+            return true;
+        }
+        }
+
+        case SET_APP_TITLE_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            IBinder token = data.readStrongBinder();
+            String title = data.readString();
+            setAppTitle(token,title);
+            reply.writeNoException();
+            return true;
+        }
+        }
+
+        case REGISTER_TASK_STATE_LISTENER_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            ActivityManager.ITaskStateListenerCallback arg = 
+                    ActivityManager.ITaskStateListenerCallback.Stub.asInterface(data.readStrongBinder());
+            registerTaskListener(arg);
+            reply.writeNoException();
+            return true;
+        }
+        }
+
+        case GET_RECENTS_TASKSINFO_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            int[] taskIds = data.createIntArray();
+            int fl = data.readInt();
+            int userId = data.readInt();
+            List<ActivityManager.RecentTaskInfo> list = getRecentTasks(taskIds,
+                    fl, userId);
+            reply.writeNoException();
+            reply.writeTypedList(list);
+            return true;
+        }
+        }
+        
+        case SHOW_RESIZING_FRAME_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            Rect r = new Rect();
+            r.readFromParcel(data);
+            showResizingFrame(r);
+            reply.writeNoException();
+            return true;
+        }
+        }
+        case HIDE_RESIZING_FRAME_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            hideResizingFrame();
+            reply.writeNoException();
+            return true;
+        }
+        }
+        case GET_RECENET_RUNNING_TASKS: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            int maxNum = data.readInt();
+            List<ActivityManager.RecentTaskInfo> list = getRecentRunningTasks(maxNum);
+            reply.writeNoException();
+            reply.writeTypedList(list);
+            return true;
+        }
+        }
+
+        case PINNED_ACTIVITY_STACK_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            IBinder token = data.readStrongBinder();
+            boolean pin = data.readInt() != 0;
+            boolean[] ret = new boolean[1];
+            ret[0] = pinedActivityStack(token,pin);
+            reply.writeNoException();
+            reply.writeBooleanArray(ret);
+            return true;
+        }
+        }
+        case DRAG_MOVE_ACTIVITY_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            IBinder token = data.readStrongBinder();
+            int state = data.readInt();
+            dragMoveActivity(token,state);
+            reply.writeNoException();
+            return true;
+        }
+        }
+        case SWITCH_CURRENT_APP_WINDOW_MODE_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            boolean windowMode = data.readInt() != 0;
+            int ret = switchCurrentAppWindowMode(windowMode);
+            reply.writeNoException();
+            reply.writeInt(ret);
+            return true;
+        }
+        }
+        case MOVE_HOME_TO_BACK_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            moveHomeToBack();
+            reply.writeNoException();
+            return true;
+        }
+        }
+        case SET_APP_FULLSCREEN_TRANSACTION: {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IActivityManager.descriptor);
+            IBinder token = data.readStrongBinder();
+            boolean windowMode = data.readInt()!= 0;
+            setAppWindowMode(token,windowMode);
+            reply.writeNoException();
+            return true;
+        }
+        }
+        //CHAOZHUO END
         }
 
         return super.onTransact(code, data, reply, flags);
@@ -6003,6 +6141,197 @@ class ActivityManagerProxy implements IActivityManager
         reply.recycle();
         return res != 0;
     }
+    //CHAOZHUO START
+    /**
+     * PhoenixOs Add
+     */
+    public boolean moveAppWindow(IBinder token,int x,int y) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeStrongBinder(token);
+        data.writeInt(x);
+        data.writeInt(y);
+        mRemote.transact(MOVE_APP_WINDOW_TRANSACTION, data, reply, 0);
+        reply.readException();
+        boolean res = reply.readInt() != 0;
+        data.recycle();
+        reply.recycle();
+        return res;
+        }
+        return false;
+    }
+    
+    public void registerTaskListener(ActivityManager.ITaskStateListenerCallback callback) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeStrongBinder(callback.asBinder());
+        mRemote.transact(REGISTER_TASK_STATE_LISTENER_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        }
+    }
+
+    public void setAppWindowMode(IBinder token, boolean windowMode) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeStrongBinder(token);
+        data.writeInt(windowMode ? 1 : 0);
+        mRemote.transact(SET_APP_FULLSCREEN_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        }
+    }
+    
+    public void setAppTitle(IBinder token, String title) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeStrongBinder(token);
+        data.writeString(title);
+        mRemote.transact(SET_APP_TITLE_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        }
+    }
+    
+    public List<ActivityManager.RecentTaskInfo> getRecentTasks(int[] taskIds,
+            int flags, int userId) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeIntArray(taskIds);
+        data.writeInt(flags);
+        data.writeInt(userId);
+        mRemote.transact(GET_RECENTS_TASKSINFO_TRANSACTION, data, reply, 0);
+        reply.readException();
+        ArrayList<ActivityManager.RecentTaskInfo> list
+            = reply.createTypedArrayList(ActivityManager.RecentTaskInfo.CREATOR);
+        data.recycle();
+        reply.recycle();
+        return list;
+        }
+        return null;
+    }
+    
+    
+    public void showResizingFrame(Rect rect) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        int flags = 0;
+        rect.writeToParcel(data, flags);
+        mRemote.transact(SHOW_RESIZING_FRAME_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        return;
+        }
+    }
+    
+    public void hideResizingFrame() throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        mRemote.transact(HIDE_RESIZING_FRAME_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        return;
+        }
+    }
+    
+    public List<ActivityManager.RecentTaskInfo> getRecentRunningTasks(int maxNum) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeInt(maxNum);
+        mRemote.transact(GET_RECENET_RUNNING_TASKS, data, reply, 0);
+        reply.readException();
+        ArrayList<ActivityManager.RecentTaskInfo> list
+            = reply.createTypedArrayList(ActivityManager.RecentTaskInfo.CREATOR);
+        data.recycle();
+        reply.recycle();
+        return list;
+        }
+        return null;
+    }
+    
+    public boolean pinedActivityStack(IBinder token,boolean pin) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeStrongBinder(token);
+        data.writeInt(pin?1:0);
+        mRemote.transact(PINNED_ACTIVITY_STACK_TRANSACTION, data, reply, 0);
+        reply.readException();
+        boolean[] ret = new boolean[1];
+        reply.readBooleanArray(ret);
+        data.recycle();
+        reply.recycle();
+        return ret[0];
+        }
+        return false;
+    }
+    
+    public void dragMoveActivity(IBinder token,int state) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeStrongBinder(token);
+        data.writeInt(state);
+        mRemote.transact(DRAG_MOVE_ACTIVITY_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        }
+    }
 
+    @Override
+    public int switchCurrentAppWindowMode(boolean windowMode)
+            throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeInt(windowMode?1:0);
+        mRemote.transact(SWITCH_CURRENT_APP_WINDOW_MODE_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        int res = reply.readInt();
+        reply.recycle();
+        return res;
+        }
+        return -1;
+    }
+
+    @Override
+    public void moveHomeToBack() throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        mRemote.transact(MOVE_HOME_TO_BACK_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        }
+    }
+    //CHAOZHUO END
     private IBinder mRemote;
 }
diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index d9b5d6c..5bc2de9 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -132,7 +132,13 @@ import libcore.net.event.NetworkEventDispatcher;
 import dalvik.system.CloseGuard;
 import dalvik.system.VMDebug;
 import dalvik.system.VMRuntime;
-
+//CHAOZHUO START
+import android.content.res.MultiWindowCompatibility;
+import android.graphics.Rect;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 final class RemoteServiceException extends AndroidRuntimeException {
     public RemoteServiceException(String msg) {
         super(msg);
@@ -215,7 +221,14 @@ public final class ActivityThread {
     boolean mSystemThread = false;
     boolean mJitEnabled = false;
     boolean mSomeActivitiesChanged = false;
-
+    //CHAOZHUO START
+    /** @hide */
+    public static Rect sAppPrefSize = null;
+    
+    // 对于输入法进程，改变size会造成布局有问题
+    /** @hide */
+    public static boolean sImeProcess = false;;
+    //CHAOZHUO END
     // These can be accessed by multiple threads; mPackages is the lock.
     // XXX For now we keep around information about all packages we have
     // seen, not removing entries from this map.
@@ -452,7 +465,9 @@ public final class ActivityThread {
         boolean persistent;
         Configuration config;
         CompatibilityInfo compatInfo;
-
+        //CHAOZHUO START
+        MultiWindowCompatibility mwCompat;
+        //CHAOZHUO END
         /** Initial values for {@link Profiler}. */
         ProfilerInfo initProfilerInfo;
 
@@ -783,7 +798,9 @@ public final class ActivityThread {
                 IInstrumentationWatcher instrumentationWatcher,
                 IUiAutomationConnection instrumentationUiConnection, int debugMode,
                 boolean enableOpenGlTrace, boolean isRestrictedBackupMode, boolean persistent,
-                Configuration config, CompatibilityInfo compatInfo, Map<String, IBinder> services,
+                //CHAOZHUO START
+                Configuration config, CompatibilityInfo compatInfo,MultiWindowCompatibility mwCompat, Map<String, IBinder> services,
+                //CHAOZHUO END
                 Bundle coreSettings) {
 
             if (services != null) {
@@ -844,6 +861,11 @@ public final class ActivityThread {
             data.persistent = persistent;
             data.config = config;
             data.compatInfo = compatInfo;
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.mwCompat = mwCompat;
+            }
+            //CHAOZHUO END
             data.initProfilerInfo = profilerInfo;
             sendMessage(H.BIND_APPLICATION, data);
         }
@@ -855,6 +877,20 @@ public final class ActivityThread {
         public final void scheduleSuicide() {
             sendMessage(H.SUICIDE, null);
         }
+        
+        //CHAOZHUO START
+        public void scheduleUpdateAppPrefSize(Rect rect) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            sendMessage(H.UPDATE_APP_PREFSIZE, rect);
+            }
+        }
+        
+        public void scheduleUpdateAppWindowMode(IBinder token,boolean windowMode) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            sendMessage(H.UPDATE_APP_WINDOW_MODE,token, windowMode?1:0,0);
+            }
+        }
+        //CHAOZHUO END
 
         public void scheduleConfigurationChanged(Configuration config) {
             updatePendingConfiguration(config);
@@ -1288,6 +1324,10 @@ public final class ActivityThread {
         public static final int CANCEL_VISIBLE_BEHIND = 147;
         public static final int BACKGROUND_VISIBLE_BEHIND_CHANGED = 148;
         public static final int ENTER_ANIMATION_COMPLETE = 149;
+        //CHAOZHUO START
+        public static final int UPDATE_APP_PREFSIZE      = 150;
+        public static final int UPDATE_APP_WINDOW_MODE      = 151;
+        //CHAOZHUO END
 
         String codeToString(int code) {
             if (DEBUG_MESSAGES) {
@@ -1309,6 +1349,10 @@ public final class ActivityThread {
                     case CREATE_SERVICE: return "CREATE_SERVICE";
                     case SERVICE_ARGS: return "SERVICE_ARGS";
                     case STOP_SERVICE: return "STOP_SERVICE";
+                    //CHAOZHUO START
+                    case UPDATE_APP_PREFSIZE: return "UPDATE_APP_PREFSIZE";
+                    case UPDATE_APP_WINDOW_MODE: return "UPDATE_APP_WINDOW_MODE";
+                    //CHAOZHUO END
                     case CONFIGURATION_CHANGED: return "CONFIGURATION_CHANGED";
                     case CLEAN_UP_CONTEXT: return "CLEAN_UP_CONTEXT";
                     case GC_WHEN_IDLE: return "GC_WHEN_IDLE";
@@ -1570,6 +1614,19 @@ public final class ActivityThread {
                 case ENTER_ANIMATION_COMPLETE:
                     handleEnterAnimationComplete((IBinder) msg.obj);
                     break;
+                //CHAOZHUO START
+                case UPDATE_APP_PREFSIZE:
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    Rect rect = (Rect)msg.obj;
+                    handleUpdateAppSize(rect);
+                    }
+                    break;
+                case UPDATE_APP_WINDOW_MODE:
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    handleUpdateAppWindowMode((IBinder) msg.obj,msg.arg1 == 1);
+                    }
+                    break;
+                //CHAOZHUO END    
             }
             if (DEBUG_MESSAGES) Slog.v(TAG, "<<< done: " + codeToString(msg.what));
         }
@@ -2690,7 +2747,25 @@ public final class ActivityThread {
             r.activity.dispatchEnterAnimationComplete();
         }
     }
-
+    //CHAOZHUO START
+    public void handleUpdateAppSize(Rect rect) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (!sImeProcess)
+        	sAppPrefSize = rect;
+        if (rect.width() == 0 || rect.height() == 0)
+        	sAppPrefSize = null;
+		}
+    }
+    
+    public void handleUpdateAppWindowMode(IBinder token,boolean windowMode) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        ActivityClientRecord r = mActivities.get(token);
+        if (r != null) {
+            r.activity.updateWindowMode(windowMode);
+        }
+        }
+    }
+    //CHAOZHUO END
     private static final ThreadLocal<Intent> sCurrentBroadcastIntent = new ThreadLocal<Intent>();
 
     /**
@@ -3179,7 +3254,14 @@ public final class ActivityThread {
             }
             if (r.window == null && !a.mFinished && willBeVisible) {
                 r.window = r.activity.getWindow();
-                View decor = r.window.getDecorView();
+                //CHAOZHUO START
+                View decor;
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    decor = r.window.getDecorRootView();
+                } else {
+                    decor = r.window.getDecorView();
+                }
+                //CHAOZHUO END
                 decor.setVisibility(View.INVISIBLE);
                 ViewManager wm = a.getWindowManager();
                 WindowManager.LayoutParams l = r.window.getAttributes();
@@ -3229,7 +3311,14 @@ public final class ActivityThread {
                             | forwardBit;
                     if (r.activity.mVisibleFromClient) {
                         ViewManager wm = a.getWindowManager();
-                        View decor = r.window.getDecorView();
+                        //CHAOZHUO START
+                        View decor;
+                        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                            decor = r.window.getDecorRootView();
+                        } else {
+                            decor = r.window.getDecorView();
+                        }
+                        //CHAOZHUO END
                         wm.updateViewLayout(decor, l);
                     }
                 }
@@ -3491,7 +3580,9 @@ public final class ActivityThread {
                 RuntimeException e = new RuntimeException(
                         "Performing stop of activity that is not resumed: "
                         + r.intent.getComponent().toShortString());
-                Slog.e(TAG, e.getMessage(), e);
+                //CHAOZHUO START
+                Slog.w(TAG, e.getMessage(), e);
+                //CHAOZHUO END
             }
 
             if (info != null) {
diff --git a/core/java/android/app/ApplicationThreadNative.java b/core/java/android/app/ApplicationThreadNative.java
index a69764b..5f346a9 100644
--- a/core/java/android/app/ApplicationThreadNative.java
+++ b/core/java/android/app/ApplicationThreadNative.java
@@ -25,7 +25,13 @@ import android.content.pm.ProviderInfo;
 import android.content.pm.ServiceInfo;
 import android.content.res.CompatibilityInfo;
 import android.content.res.Configuration;
+//CHAOZHUO START
+import android.content.res.MultiWindowCompatibility;
+//CHAOZHUO END
 import android.net.Uri;
+//CHAOZHUO START
+import android.graphics.Rect;
+//CHAOZHUO END
 import android.os.Binder;
 import android.os.Bundle;
 import android.os.Debug;
@@ -51,6 +57,10 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 /** {@hide} */
 public abstract class ApplicationThreadNative extends Binder
         implements IApplicationThread {
@@ -300,11 +310,19 @@ public abstract class ApplicationThreadNative extends Binder
             boolean persistent = (data.readInt() != 0);
             Configuration config = Configuration.CREATOR.createFromParcel(data);
             CompatibilityInfo compatInfo = CompatibilityInfo.CREATOR.createFromParcel(data);
+            //CHAOZHUO START
+            MultiWindowCompatibility mwCompat = null;
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                mwCompat = MultiWindowCompatibility.CREATOR.createFromParcel(data);
+            }
+            //CHAOZHUO END
             HashMap<String, IBinder> services = data.readHashMap(null);
             Bundle coreSettings = data.readBundle();
             bindApplication(packageName, info, providers, testName, profilerInfo, testArgs,
                     testWatcher, uiAutomationConnection, testMode, openGlTrace,
-                    restrictedBackupMode, persistent, config, compatInfo, services, coreSettings);
+                    //CHAOZHUO START
+                    restrictedBackupMode, persistent, config, compatInfo,mwCompat, services, coreSettings);
+                    //CHAOZHUO END
             return true;
         }
 
@@ -697,6 +715,29 @@ public abstract class ApplicationThreadNative extends Binder
             reply.writeNoException();
             return true;
         }
+        //CHAOZHUO START
+        case SCHEDULE_APP_PREF_SIZE:
+        {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IApplicationThread.descriptor);
+            Rect rect = Rect.CREATOR.createFromParcel(data);
+            scheduleUpdateAppPrefSize(rect);
+            reply.writeNoException();
+            return true;
+        }
+        }
+        case SCHEDULE_UPDATE_WINDOW_MODE:
+        {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            data.enforceInterface(IApplicationThread.descriptor);
+            IBinder token = data.readStrongBinder();
+            boolean windowMode = data.readInt() == 1;
+            scheduleUpdateAppWindowMode(token,windowMode);
+            reply.writeNoException();
+            return true;
+        }    
+        }
+        //CHAOZHUO END
         }
 
         return super.onTransact(code, data, reply, flags);
@@ -1008,7 +1049,9 @@ class ApplicationThreadProxy implements IApplicationThread {
             Bundle testArgs, IInstrumentationWatcher testWatcher,
             IUiAutomationConnection uiAutomationConnection, int debugMode,
             boolean openGlTrace, boolean restrictedBackupMode, boolean persistent,
-            Configuration config, CompatibilityInfo compatInfo, Map<String, IBinder> services,
+            //CHAOZHUO START
+            Configuration config, CompatibilityInfo compatInfo,MultiWindowCompatibility mwCompat, Map<String, IBinder> services,
+            //CHAOZHUO END
             Bundle coreSettings) throws RemoteException {
         Parcel data = Parcel.obtain();
         data.writeInterfaceToken(IApplicationThread.descriptor);
@@ -1036,6 +1079,11 @@ class ApplicationThreadProxy implements IApplicationThread {
         data.writeInt(persistent ? 1 : 0);
         config.writeToParcel(data, 0);
         compatInfo.writeToParcel(data, 0);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mwCompat.writeToParcel(data, 0);
+        }
+        //CHAOZHUO END
         data.writeMap(services);
         data.writeBundle(coreSettings);
         mRemote.transact(BIND_APPLICATION_TRANSACTION, data, null,
@@ -1420,4 +1468,29 @@ class ApplicationThreadProxy implements IApplicationThread {
         mRemote.transact(NOTIFY_CLEARTEXT_NETWORK_TRANSACTION, data, null, IBinder.FLAG_ONEWAY);
         data.recycle();
     }
+    //CHAOZHUO START
+    @Override
+    public void scheduleUpdateAppPrefSize(Rect rect) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        data.writeInterfaceToken(IApplicationThread.descriptor);
+        rect.writeToParcel(data, 0);
+        mRemote.transact(SCHEDULE_APP_PREF_SIZE, data, null, IBinder.FLAG_ONEWAY);
+        data.recycle();
+        }
+    }
+
+    @Override
+    public void scheduleUpdateAppWindowMode(IBinder token, boolean windowMode)
+            throws RemoteException {
+        // TODO Auto-generated method stub
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Parcel data = Parcel.obtain();
+        data.writeInterfaceToken(IApplicationThread.descriptor);
+        data.writeStrongBinder(token);
+        data.writeInt(windowMode?1:0);
+        mRemote.transact(SCHEDULE_UPDATE_WINDOW_MODE, data, null, IBinder.FLAG_ONEWAY);
+        }
+    }
+    //CHAOZHUO END
 }
diff --git a/core/java/android/app/Dialog.java b/core/java/android/app/Dialog.java
index f6e0e1e..c01ce09 100644
--- a/core/java/android/app/Dialog.java
+++ b/core/java/android/app/Dialog.java
@@ -63,6 +63,10 @@ import com.android.internal.app.WindowDecorActionBar;
 
 import java.lang.ref.WeakReference;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 /**
  * Base class for Dialogs.
  * 
@@ -296,8 +300,14 @@ public class Dialog implements DialogInterface, Window.Callback,
         }
 
         onStart();
-        mDecor = mWindow.getDecorView();
-
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mDecor = mWindow.getDecorRootView();
+        } else {
+            mDecor = mWindow.getDecorView();
+        }
+        //CHAOZHUO END
+    
         if (mActionBar == null && mWindow.hasFeature(Window.FEATURE_ACTION_BAR)) {
             final ApplicationInfo info = mContext.getApplicationInfo();
             mWindow.setDefaultIcon(info.icon);
diff --git a/core/java/android/app/IActivityManager.java b/core/java/android/app/IActivityManager.java
index ef121ce..3cf8293 100644
--- a/core/java/android/app/IActivityManager.java
+++ b/core/java/android/app/IActivityManager.java
@@ -55,6 +55,10 @@ import android.service.voice.IVoiceInteractionSession;
 import com.android.internal.app.IVoiceInteractor;
 import com.android.internal.os.IResultReceiver;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.util.List;
 
 /**
@@ -619,6 +623,24 @@ public interface IActivityManager extends IInterface {
         }
     }
 
+    //CHAOZHUO START
+    public boolean moveAppWindow(IBinder token,int x,int y) throws RemoteException;
+    
+    public void setAppWindowMode(IBinder token, boolean windowMode) throws RemoteException;
+    public void setAppTitle(IBinder token,String title) throws RemoteException;
+    
+    public void registerTaskListener(ActivityManager.ITaskStateListenerCallback callback) throws RemoteException;
+    
+    public List<ActivityManager.RecentTaskInfo> getRecentTasks(int[] taskIds,
+            int flags, int userId) throws RemoteException;
+    public void showResizingFrame(Rect bound) throws RemoteException;
+    public void hideResizingFrame() throws RemoteException;
+    public List<ActivityManager.RecentTaskInfo> getRecentRunningTasks(int maxNum) throws RemoteException;
+    public boolean pinedActivityStack(IBinder token,boolean pin) throws RemoteException;
+    public void dragMoveActivity(IBinder token,int state) throws RemoteException;
+    public int switchCurrentAppWindowMode(boolean windowMode) throws RemoteException;
+    public void moveHomeToBack() throws RemoteException;
+    //CHAOZHUO END
     String descriptor = "android.app.IActivityManager";
 
     // Please keep these transaction codes the same -- they are also
@@ -864,4 +886,26 @@ public interface IActivityManager extends IInterface {
             = IBinder.FIRST_CALL_TRANSACTION+299;
     int SHOW_ASSIST_FROM_ACTIVITY_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+300;
     int IS_ROOT_VOICE_INTERACTION_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+301;
+    //CHAOZHUO START    
+    /**
+     *  Phoenix Os Add
+     */
+    int MOVE_APP_WINDOW_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+400;
+    
+    int SET_APP_FULLSCREEN_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+402;
+    
+    int REGISTER_TASK_STATE_LISTENER_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+405;
+    int GET_RESTORED_APP_WINDOW_SIZE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+406;
+    int SET_APP_TITLE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+407;
+    int GET_RECENTS_TASKSINFO_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+408;
+
+    
+    int SHOW_RESIZING_FRAME_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+412;
+    int HIDE_RESIZING_FRAME_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+413;
+    int GET_RECENET_RUNNING_TASKS = IBinder.FIRST_CALL_TRANSACTION+414;
+    int PINNED_ACTIVITY_STACK_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+415;
+    int DRAG_MOVE_ACTIVITY_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+416;
+    int MOVE_HOME_TO_BACK_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+417;
+    int SWITCH_CURRENT_APP_WINDOW_MODE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+418;
+    //CHAOZHUO END
 }
diff --git a/core/java/android/app/IApplicationThread.java b/core/java/android/app/IApplicationThread.java
index 185578f..969e48d 100644
--- a/core/java/android/app/IApplicationThread.java
+++ b/core/java/android/app/IApplicationThread.java
@@ -25,6 +25,10 @@ import android.content.pm.ProviderInfo;
 import android.content.pm.ServiceInfo;
 import android.content.res.CompatibilityInfo;
 import android.content.res.Configuration;
+//CHAOZHUO START
+import android.content.res.MultiWindowCompatibility;
+import android.graphics.Rect;
+//CHAOZHUO END
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Debug;
@@ -36,6 +40,10 @@ import android.os.IInterface;
 import com.android.internal.app.IVoiceInteractor;
 import com.android.internal.content.ReferrerIntent;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.FileDescriptor;
 import java.util.List;
 import java.util.Map;
@@ -96,7 +104,9 @@ public interface IApplicationThread extends IInterface {
             ComponentName testName, ProfilerInfo profilerInfo, Bundle testArguments,
             IInstrumentationWatcher testWatcher, IUiAutomationConnection uiAutomationConnection,
             int debugMode, boolean openGlTrace, boolean restrictedBackupMode, boolean persistent,
-            Configuration config, CompatibilityInfo compatInfo, Map<String, IBinder> services,
+            //CHAOZHUO START
+            Configuration config, CompatibilityInfo compatInfo,MultiWindowCompatibility mwCompat, Map<String, IBinder> services,
+            //CHAOZHUO END
             Bundle coreSettings) throws RemoteException;
     void scheduleExit() throws RemoteException;
     void scheduleSuicide() throws RemoteException;
@@ -148,6 +158,10 @@ public interface IApplicationThread extends IInterface {
     void scheduleBackgroundVisibleBehindChanged(IBinder token, boolean enabled) throws RemoteException;
     void scheduleEnterAnimationComplete(IBinder token) throws RemoteException;
     void notifyCleartextNetwork(byte[] firstPacket) throws RemoteException;
+    //CHAOZHUO START
+    void scheduleUpdateAppPrefSize(Rect rect) throws RemoteException;
+    void scheduleUpdateAppWindowMode(IBinder token,boolean windowMode) throws RemoteException;
+    //CHAOZHUO END
 
     String descriptor = "android.app.IApplicationThread";
 
@@ -206,4 +220,8 @@ public interface IApplicationThread extends IInterface {
     int BACKGROUND_VISIBLE_BEHIND_CHANGED_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+53;
     int ENTER_ANIMATION_COMPLETE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+54;
     int NOTIFY_CLEARTEXT_NETWORK_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+55;
+    //CHAOZHUO START
+    int SCHEDULE_APP_PREF_SIZE = IBinder.FIRST_CALL_TRANSACTION+56;
+    int SCHEDULE_UPDATE_WINDOW_MODE = IBinder.FIRST_CALL_TRANSACTION+57;
+    //CHAOZHUO END
 }
diff --git a/core/java/android/app/IStackListenerCallback.aidl b/core/java/android/app/IStackListenerCallback.aidl
new file mode 100644
index 0000000..d12b0e5
--- /dev/null
+++ b/core/java/android/app/IStackListenerCallback.aidl
@@ -0,0 +1,10 @@
+/* CHAOZHUO START */
+package android.app;
+/** @hide */
+oneway interface IStackListenerCallback {
+    void onStackCreate(int stackId);
+    void onStackClose(int stackId);
+    void onStackFocuseChange(int newStackId);
+    void onStackMinimized(int stackId);
+}
+/* CHAOZHUO END */
\ No newline at end of file
diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index c27e24d..26d0fbc 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -1838,6 +1838,10 @@ public class Instrumentation {
                         "Not allowed to start background user activity that shouldn't be displayed"
                         + " for all users. Failing silently...");
                 break;
+                // CHAOZHUO START
+            case ActivityManager.START_TOO_MANY_OPENED_ACTIVITY:
+            	break;
+            	// CHAOZHUO END
             default:
                 throw new AndroidRuntimeException("Unknown error code "
                         + res + " when starting " + intent);
diff --git a/core/java/android/app/NativeActivity.java b/core/java/android/app/NativeActivity.java
index 2e05edb..e05d420 100644
--- a/core/java/android/app/NativeActivity.java
+++ b/core/java/android/app/NativeActivity.java
@@ -35,6 +35,10 @@ import android.view.ViewTreeObserver.OnGlobalLayoutListener;
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.File;
 
 /**
@@ -131,7 +135,15 @@ public class NativeActivity extends Activity implements SurfaceHolder.Callback2,
         ActivityInfo ai;
         
         mIMM = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        try{
+            ActivityManagerNative.getDefault().setAppWindowMode(mToken, false);
+        } catch(Exception e){
 
+        }
+        }
+        //CHAOZHUO END
         getWindow().takeSurface(this);
         getWindow().takeInputQueue(this);
         getWindow().setFormat(PixelFormat.RGB_565);
diff --git a/core/java/android/app/TaskStateListener.java b/core/java/android/app/TaskStateListener.java
new file mode 100644
index 0000000..34e8e1d
--- /dev/null
+++ b/core/java/android/app/TaskStateListener.java
@@ -0,0 +1,113 @@
+//CHAOZHUO START
+package android.app;
+
+import android.os.Handler;
+import android.os.Message;
+import android.telephony.PhoneStateListener;
+import android.telephony.ServiceState;
+
+import com.android.internal.telephony.IPhoneStateListener;
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
+/** @hide */
+public class TaskStateListener {
+    public static final int TASK_LISTENER_TASK_CREATE = 0;
+    public static final int TASK_LISTENER_TASK_CLOSE = 1;
+    public static final int TASK_LISTENER_TASK_FOCUSE_CHANGE = 2;
+    public static final int TASK_LISTENER_TASK_MINIMIZED = 3;
+    public static final int TASK_LISTENER_TASK_PROCESS_STARTED = 4;
+    public static final int TASK_LISTENER_TASK_ACTIVITY_WINDOW_VISIBLE = 5;
+
+    public TaskStateListener() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        try {
+            ActivityManagerNative.getDefault().registerTaskListener(callback);
+        } catch (Exception e) {
+
+        }
+        }
+    }
+
+    public void onTaskCreate(ActivityManager.RecentTaskInfo info) {
+
+    }
+
+    public void onTaskClose(ActivityManager.RecentTaskInfo info) {
+
+    }
+
+    public void onTaskFocuseChange(ActivityManager.RecentTaskInfo info) {
+
+    }
+
+    public void onTaskMinimized(ActivityManager.RecentTaskInfo info) {
+
+    }
+
+    public void onTaskProcessStarted(ActivityManager.RecentTaskInfo info) {
+
+    }
+
+    public void onTaskActivityWindowVisible(ActivityManager.RecentTaskInfo info) {
+
+    }
+
+    ActivityManager.ITaskStateListenerCallback callback = new ActivityManager.ITaskStateListenerCallback.Stub() {
+        public void onTaskCreate(ActivityManager.RecentTaskInfo info)
+                throws android.os.RemoteException {
+            Message.obtain(mHandler, TASK_LISTENER_TASK_CREATE, 0, 0, info).sendToTarget();
+        }
+
+        public void onTaskClose(ActivityManager.RecentTaskInfo info) throws android.os.RemoteException {
+            Message.obtain(mHandler, TASK_LISTENER_TASK_CLOSE, 0, 0, info).sendToTarget();
+        }
+
+        public void onTaskFocuseChange(ActivityManager.RecentTaskInfo info) {
+            Message.obtain(mHandler, TASK_LISTENER_TASK_FOCUSE_CHANGE, 0, 0, info).sendToTarget();
+        }
+
+        public void onTaskMinimized(ActivityManager.RecentTaskInfo info) {
+            Message.obtain(mHandler, TASK_LISTENER_TASK_MINIMIZED, 0, 0, info).sendToTarget();
+        }
+
+        public void onTaskProcessStarted(android.app.ActivityManager.RecentTaskInfo info) throws android.os.RemoteException {
+            Message.obtain(mHandler, TASK_LISTENER_TASK_PROCESS_STARTED, 0, 0, info).sendToTarget();
+        };
+
+        public void onTaskActivityWindowVisible(android.app.ActivityManager.RecentTaskInfo info) throws android.os.RemoteException {
+            Message.obtain(mHandler, TASK_LISTENER_TASK_ACTIVITY_WINDOW_VISIBLE, 0, 0, info).sendToTarget();
+        };
+    };
+
+    Handler mHandler = new Handler() {
+        public void handleMessage(Message msg) {
+            // Rlog.d("TelephonyRegistry", "what=0x" +
+            // Integer.toHexString(msg.what) + " msg=" + msg);
+            switch (msg.what) {
+                case TASK_LISTENER_TASK_CREATE:
+                    TaskStateListener.this.onTaskCreate((ActivityManager.RecentTaskInfo) msg.obj);
+                    break;
+                case TASK_LISTENER_TASK_CLOSE:
+                    TaskStateListener.this.onTaskClose((ActivityManager.RecentTaskInfo) msg.obj);
+                    break;
+                case TASK_LISTENER_TASK_FOCUSE_CHANGE:
+                    TaskStateListener.this.onTaskFocuseChange((ActivityManager.RecentTaskInfo) msg.obj);
+                    break;
+                case TASK_LISTENER_TASK_MINIMIZED:
+                    TaskStateListener.this.onTaskMinimized((ActivityManager.RecentTaskInfo) msg.obj);
+                    break;
+                case TASK_LISTENER_TASK_PROCESS_STARTED:
+                    TaskStateListener.this.onTaskProcessStarted((ActivityManager.RecentTaskInfo) msg.obj);
+                    break;
+                case TASK_LISTENER_TASK_ACTIVITY_WINDOW_VISIBLE:
+                    TaskStateListener.this.onTaskActivityWindowVisible((ActivityManager.RecentTaskInfo) msg.obj);
+                    break;
+                default:
+                    break;
+            }
+        }
+    };
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/core/java/android/content/pm/ActivityInfo.java b/core/java/android/content/pm/ActivityInfo.java
index 50eb7bb..bbea886 100644
--- a/core/java/android/content/pm/ActivityInfo.java
+++ b/core/java/android/content/pm/ActivityInfo.java
@@ -574,6 +574,24 @@ public class ActivityInfo extends ComponentInfo
         Configuration.NATIVE_CONFIG_DENSITY,                // DENSITY
         Configuration.NATIVE_CONFIG_LAYOUTDIR,              // LAYOUT DIRECTION
     };
+    //CHAOZHUO START
+    /**
+     * @hide 
+     */
+    public static final int ACTIVITY_DRAG_MOVE_NONE = 0;
+    /**
+     * @hide 
+     */
+    public static final int ACTIVITY_DRAG_MOVE_START = 1;
+    /**
+     * @hide 
+     */
+    public static final int ACTIVITY_DRAG_MOVE_EXIT = 2;
+    /**
+     * @hide 
+     */
+    public static final int ACTIVITY_DRAG_MOVE_CLOSE = 3;
+    //CHAOZHUO END
 
     /**
      * Convert Java change bits to native.
diff --git a/core/java/android/content/pm/PackageParser.java b/core/java/android/content/pm/PackageParser.java
index 99bd390..aa3d246 100644
--- a/core/java/android/content/pm/PackageParser.java
+++ b/core/java/android/content/pm/PackageParser.java
@@ -55,6 +55,10 @@ import com.android.internal.R;
 import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.XmlUtils;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import libcore.io.IoUtils;
 
 import org.xmlpull.v1.XmlPullParser;
@@ -3180,8 +3184,14 @@ public class PackageParser {
                 a.info.flags |= ActivityInfo.FLAG_RESUME_WHILE_PAUSING;
             }
 
-            a.info.resizeable = sa.getBoolean(
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                a.info.resizeable = true;
+            } else {
+                a.info.resizeable = sa.getBoolean(
                     R.styleable.AndroidManifestActivity_resizeableActivity, false);
+            }
+            //CHAOZHUO END
             if (a.info.resizeable) {
                 // Fixed screen orientation isn't supported with resizeable activities.
                 a.info.screenOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
diff --git a/core/java/android/content/res/MultiWindowCompatibility.aidl b/core/java/android/content/res/MultiWindowCompatibility.aidl
new file mode 100644
index 0000000..b61991d
--- /dev/null
+++ b/core/java/android/content/res/MultiWindowCompatibility.aidl
@@ -0,0 +1,21 @@
+/* CHAOZHUO START */
+/*
+** Copyright 2011, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+
+package android.content.res;
+
+parcelable MultiWindowCompatibility;
+/* CHAOZHUO END */
diff --git a/core/java/android/content/res/MultiWindowCompatibility.java b/core/java/android/content/res/MultiWindowCompatibility.java
new file mode 100644
index 0000000..5ca1537
--- /dev/null
+++ b/core/java/android/content/res/MultiWindowCompatibility.java
@@ -0,0 +1,78 @@
+//CHAOZHUO START
+package android.content.res;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+/**
+ * CompatibilityInfo class keeps the information about compatibility mode that the application is
+ * running under.
+ * 
+ *  {@hide} 
+ */
+public class MultiWindowCompatibility implements Parcelable {
+
+    public static final int WINDOW_COMPAT_PHONE = 0;
+    public static final int WINDOW_COMPAT_LANDSCAPE = 1;
+    public static final int WINDOW_COMPAT_TABLET = 2;
+    public static final int WINDOW_COMPAT_MAXIMIZE = 3;
+    
+    /** default compatibility info object for compatible applications */
+    public static final MultiWindowCompatibility DEFAULT_COMPATIBILITY_INFO = new MultiWindowCompatibility(WINDOW_COMPAT_PHONE) {
+    };
+
+
+    public final int mCompatMode;
+
+    public MultiWindowCompatibility(int mode) {
+        mCompatMode = mode;
+    }
+
+    private MultiWindowCompatibility(Parcel source) {
+        mCompatMode = source.readInt();
+    }
+
+  
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder(128);
+        sb.append("{");
+        sb.append("mode:");
+        sb.append(mCompatMode);
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(mCompatMode);
+    }
+
+    public static final Parcelable.Creator<MultiWindowCompatibility> CREATOR
+            = new Parcelable.Creator<MultiWindowCompatibility>() {
+        @Override
+        public MultiWindowCompatibility createFromParcel(Parcel source) {
+            return new MultiWindowCompatibility(source);
+        }
+
+        @Override
+        public MultiWindowCompatibility[] newArray(int size) {
+            return new MultiWindowCompatibility[size];
+        }
+    };
+
+    @Override
+    public int describeContents() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/core/java/android/content/res/Resources.java b/core/java/android/content/res/Resources.java
index 731903c..87fa28b 100644
--- a/core/java/android/content/res/Resources.java
+++ b/core/java/android/content/res/Resources.java
@@ -69,6 +69,12 @@ import java.lang.ref.WeakReference;
 import java.util.Locale;
 
 import libcore.icu.NativePluralRules;
+//CHAOZHUO START
+import android.app.ActivityThread;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * Class for accessing an application's resources.  This sits on top of the
@@ -2139,8 +2145,30 @@ public class Resources {
     public DisplayMetrics getDisplayMetrics() {
         if (DEBUG_CONFIG) Slog.v(TAG, "Returning DisplayMetrics: " + mMetrics.widthPixels
                 + "x" + mMetrics.heightPixels + " " + mMetrics.density);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (ActivityThread.sAppPrefSize != null && ActivityThread.sAppPrefSize.width() > 0) {
+            DisplayMetrics metrics = new DisplayMetrics();
+            metrics.setTo(mMetrics);
+            metrics.widthPixels = ActivityThread.sAppPrefSize.width();
+            metrics.heightPixels = ActivityThread.sAppPrefSize.height();
+            return metrics;
+        }
+        }
+        //CHAOZHUO END
         return mMetrics;
     }
+    //CHAOZHUO START
+    /**
+     * @hide
+     */
+    public DisplayMetrics getFullScreenDisplayMetrics() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            return mMetrics;
+        }
+        return null;
+    }
+    //CHAOZHUO END
 
     /**
      * Return the current configuration that is in effect for this resource 
diff --git a/core/java/android/hardware/display/DisplayManagerGlobal.java b/core/java/android/hardware/display/DisplayManagerGlobal.java
index 2913263..e270aca 100644
--- a/core/java/android/hardware/display/DisplayManagerGlobal.java
+++ b/core/java/android/hardware/display/DisplayManagerGlobal.java
@@ -36,6 +36,13 @@ import android.view.DisplayInfo;
 import android.view.Surface;
 
 import java.util.ArrayList;
+//CHAOZHUO START
+import android.app.ActivityThread;
+import android.graphics.Rect;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * Manager communication with the display manager service on behalf of
@@ -120,6 +127,15 @@ public final class DisplayManagerGlobal {
                 if (info == null) {
                     return null;
                 }
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                Rect appPref = ActivityThread.sAppPrefSize;
+                if (appPref != null && appPref.width() > 0 && appPref.height() > 0) {
+                    info.appWidth = appPref.width();
+                    info.appHeight = appPref.height();
+                }
+                }
+                //CHAOZHUO END
 
                 if (USE_CACHE) {
                     mDisplayInfoCache.put(displayId, info);
diff --git a/core/java/android/hardware/input/IInputManager.aidl b/core/java/android/hardware/input/IInputManager.aidl
index 239e604..14f52ee9 100644
--- a/core/java/android/hardware/input/IInputManager.aidl
+++ b/core/java/android/hardware/input/IInputManager.aidl
@@ -24,6 +24,9 @@ import android.hardware.input.TouchCalibration;
 import android.os.IBinder;
 import android.view.InputDevice;
 import android.view.InputEvent;
+//CHAOZHUO START
+import android.view.PointerIcon;
+//CHAOZHUO END
 /* begin R&T xieqd1 20160225 PortableInk framework patch */
 import android.view.InputChannel;
 /* end R&T xieqd1 20160225 */
@@ -43,6 +46,9 @@ interface IInputManager {
     // Injects an input event into the system.  To inject into windows owned by other
     // applications, the caller must have the INJECT_EVENTS permission.
     boolean injectInputEvent(in InputEvent ev, int mode);
+    //CHAOZHUO START
+    boolean updatePointerIcon(in PointerIcon icon);
+    //CHAOZHUO END
 
     // Calibrate input device position
     TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int rotation);
diff --git a/core/java/android/hardware/input/InputManager.java b/core/java/android/hardware/input/InputManager.java
index 8f918f2..9b98e84 100644
--- a/core/java/android/hardware/input/InputManager.java
+++ b/core/java/android/hardware/input/InputManager.java
@@ -24,6 +24,9 @@ import android.annotation.SdkConstant;
 import android.annotation.SdkConstant.SdkConstantType;
 import android.content.Context;
 import android.media.AudioAttributes;
+//CHAOZHUO START
+import android.graphics.Bitmap;
+//CHAOZHUO END
 import android.os.Binder;
 import android.os.Handler;
 import android.os.IBinder;
@@ -47,6 +50,12 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.List;
+//CHAOZHUO START
+import android.view.PointerIcon;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * Provides information about input devices and available key layouts.
@@ -820,6 +829,110 @@ public final class InputManager {
         }
     }
     /* end R&T xieqd1 20160225 */
+    
+//CHAOZHUO START
+    /**
+     * @hide
+     */
+    public static final int ARROW_NOMAL = 0;
+    /**
+     * @hide
+     */
+    public static final int ARROW_LEFT_RIGHT = 1;
+    /**
+     * @hide
+     */
+    public static final int ARROW_UP_DOWN = 2;
+    /**
+     * @hide
+     */
+    public static final int ARROW_TOPLEFT = 3;
+    /**
+     * @hide
+     */
+    public static final int ARROW_TOPRIGHT = 4;
+    /**
+     * @hide
+     */
+    public static final int ARROW_DRAG = 5;
+    /**
+     * @hide
+     */
+    public static final int ARROW_LINK = 6;
+    /**
+     * @hide
+     */
+    public static final int ARROW_INPUT = 7;
+   /**
+    * @hide
+    */
+    public boolean updatePointerIcon(Context context, int systemIconIndex) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        int systemIconStyle = PointerIcon.STYLE_ARROW;
+
+        switch (systemIconIndex) {
+        case ARROW_NOMAL:
+            systemIconStyle = PointerIcon.STYLE_ARROW;
+            break;
+        case ARROW_LEFT_RIGHT:
+            systemIconStyle = PointerIcon.STYLE_ARROW_LEFT_RIGHT;
+            break;
+        case ARROW_UP_DOWN:
+            systemIconStyle = PointerIcon.STYLE_ARROW_UP_DOWN;
+            break;
+        case ARROW_TOPLEFT:
+            systemIconStyle = PointerIcon.STYLE_ARROW_TOPLEFT;
+            break;
+        case ARROW_TOPRIGHT:
+            systemIconStyle = PointerIcon.STYLE_ARROW_TOPRIGHT;
+            break;
+        case ARROW_DRAG:
+            systemIconStyle = PointerIcon.STYLE_ARROW_DRAG;
+            break;
+        case ARROW_LINK:
+            systemIconStyle = PointerIcon.STYLE_ARROW_LINK;
+            break;
+        case ARROW_INPUT:
+            systemIconStyle = PointerIcon.STYLE_ARROW_INPUT;
+            break;
+        default:
+            systemIconStyle = PointerIcon.STYLE_ARROW;
+            break;
+        }
+        try {
+            return mIm.updatePointerIcon(PointerIcon.getSystemIcon(context,
+                    systemIconStyle));
+        } catch (RemoteException ex) {
+            return false;
+        }
+        }
+        return false;
+    }
+   
+   /**
+    * @hide
+    */
+   public boolean updatePointerIcon(Bitmap bitmap, float hotSpotX, float hotSpotY) {
+       if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+       try {
+           return mIm.updatePointerIcon(PointerIcon.createCustomIcon(bitmap, hotSpotX, hotSpotY));
+       } catch (RemoteException ex) {
+           return false;
+       }
+       }
+       return false;
+   }
+   
+   /**
+    * @hide
+    */
+   public boolean resetPointerIcon(Context context) {
+       if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+       return updatePointerIcon(context,ARROW_NOMAL);
+    }
+    return false;
+   }
+//CHAOZHUO END
 
     private void populateInputDevicesLocked() {
         if (mInputDevicesChangedListener == null) {
diff --git a/core/java/android/inputmethodservice/InputMethodService.java b/core/java/android/inputmethodservice/InputMethodService.java
index ff7a300..884ee47 100644
--- a/core/java/android/inputmethodservice/InputMethodService.java
+++ b/core/java/android/inputmethodservice/InputMethodService.java
@@ -68,6 +68,12 @@ import android.widget.LinearLayout;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+//CHAOZHUO START
+import android.app.ActivityThread;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * InputMethodService provides a standard implementation of an InputMethod,
@@ -689,6 +695,12 @@ public class InputMethodService extends AbstractInputMethodService {
         if (mHardwareAccelerated) {
             mWindow.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        ActivityThread.sAppPrefSize = null;
+        ActivityThread.sImeProcess = true;
+        }
+        //CHAOZHUO END
         initViews();
         mWindow.getWindow().setLayout(MATCH_PARENT, WRAP_CONTENT);
     }
diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index 862f4c4..9a38278 100644
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -20,6 +20,9 @@ import android.text.TextUtils;
 import android.util.Slog;
 
 import com.android.internal.telephony.TelephonyProperties;
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 import dalvik.system.VMRuntime;
 
@@ -144,6 +147,9 @@ public class Build {
 
     /** Various version strings. */
     public static class VERSION {
+        //CHAOZHUO START
+        public static final String PHOENIX = CZSwitchManager.BUILD_MAIN_SWITCH_ON ? getString("ro.phoenix.version.codename") : "";
+        //CHAOZHUO END
         /**
          * The internal value used by the underlying source control to
          * represent this build.  E.g., a perforce changelist number
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index ed6a012..4832ce9 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5421,6 +5421,20 @@ public final class Settings {
          */
         public static final String ANR_SHOW_BACKGROUND = "anr_show_background";
 
+      //CHAOZHUO START
+        /**
+        * @hide
+        */
+       public static final String FIRST_TIME_OPEN_WINDOW_ACTIVITY =
+               "first_time_open_window_activity";
+       
+       /**
+        * @hide
+        */
+       public static final String FIRST_TIME_OPEN_FULLSCREEN_ACTIVITY =
+               "first_time_open_fullscreen_activity";
+     //CHAOZHUO END
+
         /**
          * The {@link ComponentName} string of the service to be used as the voice recognition
          * service.
diff --git a/core/java/android/view/PointerIcon.java b/core/java/android/view/PointerIcon.java
index cf35ce5..aadf388 100644
--- a/core/java/android/view/PointerIcon.java
+++ b/core/java/android/view/PointerIcon.java
@@ -29,6 +29,9 @@ import android.graphics.drawable.Drawable;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.util.Log;
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * Represents an icon that can be used as a mouse pointer.
@@ -60,6 +63,17 @@ public final class PointerIcon implements Parcelable {
     /** {@hide} Style constant: Spot anchor icon for touchpads. */
     public static final int STYLE_SPOT_ANCHOR = 2002;
 
+    //CHAOZHUO START
+    /** {@hide} Style constant: Spot anchor icon for touchpads. */
+    public static final int STYLE_ARROW_LEFT_RIGHT = 3000;
+    public static final int STYLE_ARROW_UP_DOWN = 3001;
+    public static final int STYLE_ARROW_TOPLEFT = 3002;
+    public static final int STYLE_ARROW_TOPRIGHT = 3003;
+    public static final int STYLE_ARROW_DRAG = 3004;
+    public static final int STYLE_ARROW_LINK = 3005;
+    public static final int STYLE_ARROW_INPUT = 3006;
+    //CHAOZHUO END
+
     // OEM private styles should be defined starting at this range to avoid
     // conflicts with any system styles that may be defined in the future.
     private static final int STYLE_OEM_FIRST = 10000;
@@ -434,6 +448,22 @@ public final class PointerIcon implements Parcelable {
                 return com.android.internal.R.styleable.Pointer_pointerIconSpotTouch;
             case STYLE_SPOT_ANCHOR:
                 return com.android.internal.R.styleable.Pointer_pointerIconSpotAnchor;
+            //CHAOZHUO START
+            case STYLE_ARROW_LEFT_RIGHT:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowLeftRight : -1;
+            case STYLE_ARROW_UP_DOWN:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowUpDown : -1;
+            case STYLE_ARROW_TOPLEFT:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowTopLeft : -1;
+            case STYLE_ARROW_TOPRIGHT:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowTopRight : -1;
+            case STYLE_ARROW_DRAG:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowDrag : -1;
+            case STYLE_ARROW_LINK:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowLink : -1;
+            case STYLE_ARROW_INPUT:
+                return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? com.android.internal.R.styleable.Pointer_pointerIconArrowInput : -1;
+            //CHAOZHUO END
             default:
                 return 0;
         }
diff --git a/core/java/android/view/View.java b/core/java/android/view/View.java
index dea004e..a43d0ab 100644
--- a/core/java/android/view/View.java
+++ b/core/java/android/view/View.java
@@ -99,6 +99,10 @@ import android.widget.Checkable;
 import android.widget.FrameLayout;
 import android.widget.ScrollBarDrawable;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import static android.os.Build.VERSION_CODES.*;
 import static java.lang.Math.max;
 
@@ -9214,6 +9218,23 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
         return onKeyPreIme(event.getKeyCode(), event);
     }
 
+    //CHAOZHUO START
+    /**
+     * @hide
+     */
+    public void dispatchWindowMoved(int newX,int newY) {
+    }
+
+    /**
+     * @hide
+     */
+    public void setFrameInsets(Rect rect) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mAttachInfo != null)
+            mAttachInfo.mFrameInsets.set(rect);
+        }
+    }
+    //CHAOZHUO END
     /**
      * Dispatch a key event to the next view on the focus path. This path runs
      * from the top of the view tree down to the currently focused view. If this
@@ -18207,6 +18228,12 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
         if (info != null) {
             location[0] += info.mWindowLeft;
             location[1] += info.mWindowTop;
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            location[0] += info.mFrameInsets.left;
+            location[1] += info.mFrameInsets.top;
+            }
+            //CHAOZHUO END
         }
     }
 
@@ -18260,6 +18287,12 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
             final ViewRootImpl vr = (ViewRootImpl) viewParent;
             position[1] -= vr.mCurScrollY;
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        position[0] -= mAttachInfo.mFrameInsets.left;
+        position[1] -= mAttachInfo.mFrameInsets.top;
+        }
+        //CHAOZHUO END
 
         location[0] = (int) (position[0] + 0.5f);
         location[1] = (int) (position[1] + 0.5f);
@@ -21625,6 +21658,12 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
          * for real surface.
          */
         final Rect mOutsets = new Rect();
+        //CHAOZHUO START        
+        /**
+         * {@hide}
+         */
+        final Rect mFrameInsets = new Rect();
+        //CHAOZHUO END
 
         /**
          * The internal insets given by this window.  This value is
diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java
index 97476f2..640d575 100644
--- a/core/java/android/view/ViewRootImpl.java
+++ b/core/java/android/view/ViewRootImpl.java
@@ -19,6 +19,9 @@ package android.view;
 import android.Manifest;
 import android.animation.LayoutTransition;
 import android.app.ActivityManagerNative;
+//CHAOZHUO START
+import android.app.ActivityThread;
+//CHAOZHUO END
 import android.content.ClipDescription;
 import android.content.ComponentCallbacks;
 import android.content.Context;
@@ -76,6 +79,10 @@ import android.view.inputmethod.InputConnection;
 import android.view.inputmethod.InputMethodManager;
 import android.widget.Scroller;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import com.android.internal.R;
 import com.android.internal.os.SomeArgs;
 import com.android.internal.policy.PhoneFallbackEventHandler;
@@ -260,8 +267,9 @@ public final class ViewRootImpl implements ViewParent,
 
     final DisplayAdjustments mDisplayAdjustments;
 
-    // These are accessed by multiple threads.
-    final Rect mWinFrame; // frame given by window manager.
+    //CHAOZHUO START
+    public final Rect mWinFrame; // frame given by window manager.
+    //CHAOZHUO END
 
     final Rect mPendingOverscanInsets = new Rect();
     final Rect mPendingVisibleInsets = new Rect();
@@ -1936,6 +1944,11 @@ public final class ViewRootImpl implements ViewParent,
                         mTmpLocation[1] + host.mBottom - host.mTop);
 
                 host.gatherTransparentRegion(mTransparentRegion);
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                mTransparentRegion.translate(host.mAttachInfo.mFrameInsets.left,host.mAttachInfo.mFrameInsets.top);
+                }
+                //CHAOZHUO END
                 if (mTranslator != null) {
                     mTranslator.translateRegionInWindowToScreen(mTransparentRegion);
                 }
diff --git a/core/java/android/view/Window.java b/core/java/android/view/Window.java
index c222a82..4974541 100644
--- a/core/java/android/view/Window.java
+++ b/core/java/android/view/Window.java
@@ -29,6 +29,9 @@ import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.PixelFormat;
+//CHAOZHUO START
+import android.graphics.Rect;
+//CHAOZHUO END
 import android.graphics.drawable.Drawable;
 import android.media.session.MediaController;
 import android.net.Uri;
@@ -39,6 +42,12 @@ import android.transition.Scene;
 import android.transition.Transition;
 import android.transition.TransitionManager;
 import android.view.accessibility.AccessibilityEvent;
+//CHAOZHUO START
+import android.widget.LinearLayout;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * Abstract base class for a top-level window look and behavior policy.  An
@@ -183,7 +192,12 @@ public abstract class Window {
     private Callback mCallback;
     private OnWindowDismissedCallback mOnWindowDismissedCallback;
     private WindowManager mWindowManager;
-    private IBinder mAppToken;
+    //CHAOZHUO START
+    /**
+     * @hide
+     */
+    public IBinder mAppToken;
+    //CHAOZHUO END
     private String mAppName;
     private boolean mHardwareAccelerated;
     private Window mContainer;
@@ -1308,6 +1322,14 @@ public abstract class Window {
      */
     public abstract View getDecorView();
 
+    //CHAOZHUO START
+    /** @hide */
+    public abstract View getDecorRootView();
+    
+    
+    /** @hide */
+    public abstract void setWindowMode(boolean windowMode);
+    //CHAOZHUO END
     /**
      * Retrieve the current decor view, but only if it has already been created;
      * otherwise returns null.
@@ -1904,6 +1926,51 @@ public abstract class Window {
      * </p>
      */
     public abstract void setNavigationBarColor(@ColorInt int color);
-
+    //CHAOZHUO START    
+    /**
+    *
+    * Stackbox id in which app was started.
+    * Setters and getters
+    */
+   private int mStackId = -1;
+
+   /**
+    * @hide
+    */
+   public void setStackId(int id) {
+       if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+       mStackId = id;
+       }
+   }
+
+   /**
+    * @hide
+    */
+   public int getStackId() {
+       if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+       return mStackId;
+    }
+    return -1;
+   }
+
+   /**
+    *
+    * TODO: this is used to indicate, that window should
+    * have decor frame. Check if FocusedStackFrame can be used
+    * as decor
+    * @hide
+    */
+   public boolean isMWPanel() {
+   if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+       TypedArray a = getWindowStyle();
+       boolean isFloating = a.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating, false);
+       //a.recycle();
+       if (isFloating)
+           return false;
+       return mStackId != 0 && mStackId != -1;
+    }
+    return false;
+   }
+    //CHAOZHUO END
 
 }
diff --git a/core/java/android/view/WindowInfo.java b/core/java/android/view/WindowInfo.java
index b721074..abcd49d 100644
--- a/core/java/android/view/WindowInfo.java
+++ b/core/java/android/view/WindowInfo.java
@@ -22,6 +22,10 @@ import android.os.Parcel;
 import android.os.Parcelable;
 import android.util.Pools;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -44,6 +48,11 @@ public class WindowInfo implements Parcelable {
     public boolean focused;
     public final Rect boundsInScreen = new Rect();
     public List<IBinder> childTokens;
+    //CHAOZHUO START
+    public String title;
+    public Rect frame = new Rect();
+    public Rect frameInsets = new Rect();
+    //CHAOZHUO END
 
     private WindowInfo() {
         /* do nothing - hide constructor */
@@ -73,6 +82,13 @@ public class WindowInfo implements Parcelable {
                 window.childTokens.addAll(other.childTokens);
             }
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        window.title = other.title;
+        window.frame.set(other.frame);
+        window.frameInsets.set(other.frameInsets);
+        }
+        //CHAOZHUO END
 
         return window;
     }
@@ -102,6 +118,13 @@ public class WindowInfo implements Parcelable {
         } else {
             parcel.writeInt(0);
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        parcel.writeString(title);
+        frame.writeToParcel(parcel, flags);
+        frameInsets.writeToParcel(parcel, flags);
+        }
+        //CHAOZHUO END
     }
 
     @Override
@@ -115,6 +138,13 @@ public class WindowInfo implements Parcelable {
         builder.append(", parent=").append(parentToken);
         builder.append(", focused=").append(focused);
         builder.append(", children=").append(childTokens);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        builder.append(", title=").append(title);
+        builder.append(", frame=").append(frame);
+        builder.append(", frameInsets=").append(frameInsets);
+        }
+        //CHAOZHUO END
         builder.append(']');
         return builder.toString();
     }
@@ -134,6 +164,13 @@ public class WindowInfo implements Parcelable {
             }
             parcel.readBinderList(childTokens);
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        title = parcel.readString();
+        frame.readFromParcel(parcel);
+        frameInsets.readFromParcel(parcel);
+        }
+        //CHAOZHUO END
     }
 
     private void clear() {
@@ -146,6 +183,13 @@ public class WindowInfo implements Parcelable {
         if (childTokens != null) {
             childTokens.clear();
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        title = null;
+        frame.setEmpty();
+        frameInsets.setEmpty();
+        }
+        //CHAOZHUO END
     }
 
     public static final Parcelable.Creator<WindowInfo> CREATOR =
diff --git a/core/java/android/view/WindowManager.java b/core/java/android/view/WindowManager.java
index 45bc1df..5a24f80 100644
--- a/core/java/android/view/WindowManager.java
+++ b/core/java/android/view/WindowManager.java
@@ -29,6 +29,10 @@ import android.os.Parcelable;
 import android.text.TextUtils;
 import android.util.Log;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 
 /**
  * The interface that apps use to talk to the window manager.
@@ -263,6 +267,14 @@ public interface WindowManager extends ViewManager {
          */
         public static final int LAST_APPLICATION_WINDOW = 99;
 
+        //CHAOZHUO START
+        /**
+         *
+         * Special type of window which indicates floating window
+         * {@hide}
+         */
+        public static final int TYPE_PINEDWINDOW_APPLICATION = 100;
+        //CHAOZHUO END
         /**
          * Start of types of sub-windows.  The {@link #token} of these windows
          * must be set to the window they are attached to.  These types of
@@ -1361,6 +1373,18 @@ public interface WindowManager extends ViewManager {
          * @hide
          */
         public boolean hasManualSurfaceInsets;
+        //CHAOZHUO START
+        /**
+        *
+        * @hide
+        */
+        public final Rect frameInsets = new Rect();
+        /**
+        *
+        * @hide
+        */
+        public int headHeight;
+        //CHAOZHUO END
 
         /**
          * The desired bitmap format.  May be one of the constants in
@@ -1686,6 +1710,15 @@ public interface WindowManager extends ViewManager {
             out.writeInt(surfaceInsets.right);
             out.writeInt(surfaceInsets.bottom);
             out.writeInt(hasManualSurfaceInsets ? 1 : 0);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            out.writeInt(frameInsets.left);
+            out.writeInt(frameInsets.top);
+            out.writeInt(frameInsets.right);
+            out.writeInt(frameInsets.bottom);
+            out.writeInt(headHeight);
+            }
+            //CHAOZHUO END
             out.writeInt(needsMenuKey);
         }
 
@@ -1736,6 +1769,15 @@ public interface WindowManager extends ViewManager {
             surfaceInsets.right = in.readInt();
             surfaceInsets.bottom = in.readInt();
             hasManualSurfaceInsets = in.readInt() != 0;
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            frameInsets.left = in.readInt();
+            frameInsets.top = in.readInt();
+            frameInsets.right = in.readInt();
+            frameInsets.bottom = in.readInt();
+            headHeight = in.readInt();
+            }
+            //CHAOZHUO END
             needsMenuKey = in.readInt();
         }
 
@@ -1775,6 +1817,10 @@ public interface WindowManager extends ViewManager {
         public static final int NEEDS_MENU_KEY_CHANGED = 1 << 22;
         /** {@hide} */
         public static final int PREFERRED_DISPLAY_MODE_ID = 1 << 23;
+        //CHAOZHUO START
+        /** {@hide} */
+        public static final int FRAME_INSETS_CHANGED = 1<<30;
+        //CHAOZHUO END
         /** {@hide} */
         public static final int EVERYTHING_CHANGED = 0xffffffff;
 
@@ -1929,7 +1975,19 @@ public interface WindowManager extends ViewManager {
                 hasManualSurfaceInsets = o.hasManualSurfaceInsets;
                 changes |= SURFACE_INSETS_CHANGED;
             }
-
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (!frameInsets.equals(o.frameInsets)) {
+                frameInsets.set(o.frameInsets);
+                changes |= FRAME_INSETS_CHANGED;
+            }
+            
+            if (headHeight != o.headHeight) {
+                headHeight = o.headHeight;
+                changes |= FRAME_INSETS_CHANGED;
+            }
+            }
+            //CHAOZHUO END
             if (needsMenuKey != o.needsMenuKey) {
                 needsMenuKey = o.needsMenuKey;
                 changes |= NEEDS_MENU_KEY_CHANGED;
@@ -2049,6 +2107,14 @@ public interface WindowManager extends ViewManager {
                     sb.append(" (manual)");
                 }
             }
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (headHeight != 0) {
+                sb.append(" headHeight=%d");
+                sb.append(headHeight);
+            }
+            }
+            //CHAOZHUO END
             if (needsMenuKey != NEEDS_MENU_UNSET) {
                 sb.append(" needsMenuKey=");
                 sb.append(needsMenuKey);
diff --git a/core/java/android/widget/Editor.java b/core/java/android/widget/Editor.java
index 13c1937..cc7c7e5 100644
--- a/core/java/android/widget/Editor.java
+++ b/core/java/android/widget/Editor.java
@@ -106,6 +106,10 @@ import com.android.internal.util.GrowingArrayUtils;
 import com.android.internal.util.Preconditions;
 import com.android.internal.widget.EditableInputConnection;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.text.BreakIterator;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -2355,8 +2359,12 @@ public class Editor {
      */
     private class EasyEditPopupWindow extends PinnedPopupWindow
             implements OnClickListener {
-        private static final int POPUP_TEXT_LAYOUT =
+//CHAOZHUO START
+        private static final int POPUP_TEXT_LAYOUT = 
+                CZSwitchManager.BUILD_MAIN_SWITCH_ON ? 
+                com.android.internal.R.layout.text_edit_action_popup_text_phoenix : 
                 com.android.internal.R.layout.text_edit_action_popup_text;
+//CHAOZHUO END
         private TextView mDeleteTextView;
         private EasyEditSpan mEasyEditSpan;
         private EasyEditDeleteListener mOnDeleteListener;
diff --git a/core/java/com/android/internal/policy/PhoneWindow.java b/core/java/com/android/internal/policy/PhoneWindow.java
index fdc28be..9e7a3d7 100644
--- a/core/java/com/android/internal/policy/PhoneWindow.java
+++ b/core/java/com/android/internal/policy/PhoneWindow.java
@@ -123,6 +123,18 @@ import android.widget.TextView;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
+//CHAOZHUO START
+import java.util.List;
+
+import android.app.ActivityManagerNative;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.hardware.input.InputManager;
+import android.os.IBinder;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /**
  * Android-specific Window.
@@ -494,6 +506,13 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         } else if (mDecorContentParent != null) {
             mDecorContentParent.setWindowTitle(title);
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mDecor != null && mDecor.getWindowFrame() != null) {
+            mDecor.getWindowFrame().setTitle(title);
+        }
+        }
+        //CHAOZHUO END
         mTitle = title;
     }
 
@@ -1970,8 +1989,34 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         if (mDecor == null) {
             installDecor();
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        return mDecor.getDecorContainer();
+        } else {
         return mDecor;
+        }
+        //CHAOZHUO END
+    }
+    //CHAOZHUO START
+    @Override
+    public final View getDecorRootView() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mDecor == null) {
+            installDecor();
+        }
+        }
+        return mDecor;
+    }
+    
+    @Override
+    public void setWindowMode(boolean windowMode) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mDecor != null) {
+            mDecor.installWindowFrame(windowMode);
+        }
+        }
     }
+    //CHAOZHUO END
 
     @Override
     public final View peekDecorView() {
@@ -2260,6 +2305,11 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         private int mLastWindowFlags = 0;
 
         private int mRootScrollY = 0;
+        //CHAOZHUO START
+        private FrameLayout mDecorContainer;
+        private WindowFrameView mWindowFrame;
+        private boolean mCurrentOnFocus = false;
+        //CHAOZHUO END
 
         public DecorView(Context context, int featureId) {
             super(context);
@@ -2273,6 +2323,137 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             mBarEnterExitDuration = context.getResources().getInteger(
                     R.integer.dock_enter_exit_duration);
         }
+        //CHAOZHUO START
+        private WindowFrameView getWindowFrame() {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            return mWindowFrame;
+            }
+            return null;
+        }
+
+        public ViewGroup getDecorContainer() {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (mDecorContainer != null)
+                return mDecorContainer;
+            else 
+                return this;
+            }
+            return null;
+        }
+        
+        public void getLocationInWindow(int[] location) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (location == null || location.length < 2) {
+                throw new IllegalArgumentException("location must be an array of two integers");
+            }
+            location[0] = 0;
+            location[1] = 0;
+            }
+        }
+
+        private void installWindowFrame(boolean windowMode) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (windowMode) {
+            if (mWindowFrame == null ){
+                mWindowFrame = new WindowFrameView(mContext,this,R.layout.window_frame);
+                LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
+                
+                mWindowFrame.mStackBoxId = getStackId();
+                mWindowFrame.mWindow = PhoneWindow.this;
+                WindowManager.LayoutParams attr = PhoneWindow.this.getAttributes();
+                attr.frameInsets.set(mWindowFrame.getFrameInsets());
+                attr.headHeight = mWindowFrame.mFrameHeaderHeight;
+                PhoneWindow.this.setAttributes(attr);
+                this.addView(mWindowFrame);
+                mDecorContainer = (FrameLayout)mWindowFrame.getDecorContainer();
+                this.removeView(mContentRoot);
+                mDecorContainer.addView(mContentRoot,0);
+                setWindowBackground(this.getBackground());
+                if (mTitle != null)
+                    mWindowFrame.setTitle(mTitle);
+            } else {
+                mWindowFrame.hideWindowFrame(false);
+            }
+            } else if (mWindowFrame != null) {
+                mWindowFrame.hideWindowFrame(true);
+            }
+            }
+        }
+        
+        private void handleFocus(MotionEvent ev) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (!mCurrentOnFocus && ev.isTouchEvent()
+                    && ev.getAction() == MotionEvent.ACTION_DOWN) {
+                int stackBoxId = getStackId();
+                if (stackBoxId != -1 && stackBoxId != 0) {
+                    try {
+                        ActivityManagerNative.getDefault().setFocusedStack(
+                                getStackId());
+                    } catch (Exception e) {
+
+                    }
+                }
+            }
+            }
+        }
+        
+        private void handleResetCursor(InputEvent ev) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (ev instanceof MotionEvent && PhoneWindow.this.getStackId() != -1) {
+                MotionEvent event = (MotionEvent) ev;
+                int action = event.getActionMasked();
+                if (action == MotionEvent.ACTION_CANCEL ||
+                        action == MotionEvent.ACTION_HOVER_EXIT ||
+                        action == MotionEvent.ACTION_UP ||
+                        action == MotionEvent.ACTION_OUTSIDE) {
+                    float x = event.getRawX();
+                    float y = event.getRawY();
+                    int[] position = new int[2];
+                    getLocationOnScreen(position);
+                    if (x < position[0] || y < position[1] ||
+                            x > position[0] + this.getWidth() ||
+                            y > position[1] + this.getHeight() ||
+                            positionInDock(x,y)) {
+                        InputManager.getInstance().resetPointerIcon(mContext);
+                    }
+                }
+            }
+            }
+        }
+        
+        // todo
+        // dockbar may be in left and right side
+        private int mDockBarHeight = -1;
+        private boolean positionInDock(float x,float y) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (mDockBarHeight == -1) {
+                mDockBarHeight = mContext.getResources().getDimensionPixelSize(
+                        com.android.internal.R.dimen.navigation_bar_height) + 
+                        mContext.getResources().getDimensionPixelSize(
+                        com.android.internal.R.dimen.navigation_bar_shadow_padding_outside);
+            }
+            if (mMetrics == null) {
+                mMetrics = new DisplayMetrics();
+            }
+            getWindowManager().getDefaultDisplay().getRealMetrics(mMetrics);
+            if (y > mMetrics.heightPixels - mDockBarHeight)
+                return true;
+            return false;
+            }
+            return false;
+        }
+        
+        DisplayMetrics mMetrics = null;
+        WindowManager mWindowManager;
+        public WindowManager getWindowManager() {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (mWindowManager == null)
+                mWindowManager = (WindowManager)mContext.getSystemService("window");
+            return mWindowManager;
+            }
+            return null;
+        }
+        //CHAOZHUO END
 
         public void setBackgroundFallback(int resId) {
             mBackgroundFallback.setDrawable(resId != 0 ? getContext().getDrawable(resId) : null);
@@ -2392,6 +2573,11 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         @Override
         public boolean dispatchTouchEvent(MotionEvent ev) {
             final Callback cb = getCallback();
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            handleFocus(ev);
+            }
+            //CHAOZHUO END
             return cb != null && !isDestroyed() && mFeatureId < 0 ? cb.dispatchTouchEvent(ev)
                     : super.dispatchTouchEvent(ev);
         }
@@ -2851,6 +3037,26 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         }
 
         public void setWindowBackground(Drawable drawable) {
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                if (mDecorContainer != null) {
+                    if (mDecorContainer.getBackground() != drawable) {
+                        mDecorContainer.setBackgroundDrawable(drawable);
+                    }
+                    Drawable bk = new ColorDrawable(Color.TRANSPARENT);
+                    this.setBackground(bk);
+                } else {
+                    if (getBackground() != drawable) {
+                        setBackgroundDrawable(drawable);
+                        if (drawable != null) {
+                            drawable.getPadding(mBackgroundPadding);
+                        } else {
+                            mBackgroundPadding.setEmpty();
+                        }
+                    }
+                }
+                drawableChanged();
+            } else {
             if (getBackground() != drawable) {
                 setBackgroundDrawable(drawable);
                 if (drawable != null) {
@@ -2860,6 +3066,8 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
                 }
                 drawableChanged();
             }
+
+            }
         }
 
         @Override
@@ -3262,6 +3470,11 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             if (hasFeature(FEATURE_OPTIONS_PANEL) && !hasWindowFocus && mPanelChordingKey != 0) {
                 closePanel(FEATURE_OPTIONS_PANEL);
             }
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mCurrentOnFocus = hasWindowFocus;
+            }
+            //CHAOZHUO END
 
             final Callback cb = getCallback();
             if (cb != null && !isDestroyed() && mFeatureId < 0) {
@@ -4134,6 +4347,13 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
                 }
             }
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (isMWPanel()){
+            mDecor.installWindowFrame(true);
+        }
+        }
+        //CHAOZHUO END
     }
 
     private Transition getTransition(Transition currentValue, Transition defaultValue, int id) {
diff --git a/core/java/com/android/internal/policy/WindowFrameView.java b/core/java/com/android/internal/policy/WindowFrameView.java
new file mode 100644
index 0000000..4eef20d
--- /dev/null
+++ b/core/java/com/android/internal/policy/WindowFrameView.java
@@ -0,0 +1,397 @@
+//CHAOZHUO START
+package com.android.internal.policy;
+
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.content.pm.ActivityInfo;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.util.DisplayMetrics;
+import android.view.InputEvent;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.FrameLayout;
+import android.widget.ImageButton;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.android.internal.R;
+
+/**
+ * MultiWindow Frame View. author dingchao
+ */
+
+public class WindowFrameView extends FrameLayout implements
+        View.OnClickListener {
+
+    private static String TAG = "WindowFrameView";
+    private static boolean DEBUG = false;
+
+    boolean mHideFrame = false;
+    boolean mClosed = false;
+
+    private Configuration mConfiguration;
+
+    boolean mWindowFullScreen = false;
+
+    int mFrameHeaderHeight = 0;
+
+    RelativeLayout mHeader;
+    ViewGroup mFrameView;
+    FrameLayout mDecorContainer;
+
+    Drawable mDefaultBackground;
+
+    TextView mTitle;
+    ImageButton mPinBtn;
+
+    View mDecor;
+    Window mWindow;
+
+    int mDockBarHeight = 0;
+    int mStatusBarHeight = 0;
+
+    boolean mMaximized = false;
+
+    Rect mBorderPadding;
+
+    Rect mFrame = new Rect();
+
+    boolean mCurrentOnFocus = false;
+
+    public int mStackBoxId = -1;
+
+    Point mRealSize = new Point();
+
+    WindowManager mWindowManager;
+    DisplayMetrics mRealDisplayMetrics;
+
+    private final int mTapSlop;
+
+    public WindowFrameView(Context context, View decorView, int resId) {
+        super(context);
+        mDecor = decorView;
+        LayoutInflater.from(context).inflate(resId, this);
+
+        mFrameHeaderHeight = getContext().getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.mw_header_height);
+
+        mDockBarHeight = getContext().getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.navigation_bar_height);
+
+        mStatusBarHeight = getContext().getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.status_bar_height);
+//        mStatusBarHeight = 0;
+
+        mHeader = (RelativeLayout) findViewById(com.android.internal.R.id.mwDecorHeader);
+        mHeader.setOnTouchListener(mHeaderTouch);
+
+        mRealDisplayMetrics = mContext.getResources().getFullScreenDisplayMetrics();
+
+        getWindowManager().getDefaultDisplay().getRealSize(mRealSize);
+
+        mConfiguration = new Configuration(context.getResources()
+                .getConfiguration());
+
+        mFrameView = (ViewGroup) findViewById(R.id.window_frame);
+        mDefaultBackground = mFrameView.getBackground();
+        mBorderPadding = new Rect(mFrameView.getPaddingLeft(),
+                mFrameView.getPaddingTop(), mFrameView.getPaddingRight(),
+                mFrameView.getPaddingBottom());
+
+        mDecorContainer = (FrameLayout) findViewById(com.android.internal.R.id.decor_container);
+
+        PackageManager pm = getContext().getPackageManager();
+        ApplicationInfo ai = getContext().getApplicationInfo();
+        mTitle = (TextView) findViewById(com.android.internal.R.id.mwTitle);
+        mTitle.setText(pm.getApplicationLabel(ai));
+
+        mPinBtn = (ImageButton) findViewById(com.android.internal.R.id.mwPin);
+        mPinBtn.setOnClickListener(this);
+        updateFrameInsets();
+
+        mTapSlop = ViewConfiguration.get(context).getScaledTouchSlop();
+    }
+
+    public Rect getFrameInsets() {
+        Rect rect = new Rect(mBorderPadding);
+        if (mHeader.getVisibility() == View.VISIBLE) {
+            int height = mHeader.getHeight();
+            if (height == 0) {
+                height = mFrameHeaderHeight;
+            }
+            rect.top += height;
+        }
+        return rect;
+    }
+
+    void updateFrameInsets() {
+        Rect rect = getFrameInsets();
+        setFrameInsets(rect);
+
+        if (mWindow != null) {
+            WindowManager.LayoutParams attr = mWindow.getAttributes();
+            attr.frameInsets.set(rect);
+            attr.headHeight = mFrameHeaderHeight;
+            mWindow.setAttributes(attr);
+        }
+    }
+
+    public boolean dispatchEarlyFrameEvent(InputEvent event) {
+        if (event instanceof MotionEvent)
+            handleFocus((MotionEvent) event);
+        return false;
+    }
+
+    private void handleFocus(MotionEvent ev) {
+        if (!mCurrentOnFocus && ev.isTouchEvent()
+                && ev.getAction() == MotionEvent.ACTION_DOWN) {
+            int stackId = mWindow.getStackId();
+            if (stackId != -1) {
+                try {
+                    ActivityManagerNative.getDefault().setFocusedStack(
+                            stackId);
+                } catch (Exception e) {
+
+                }
+            }
+        }
+    }
+    @Override
+    public void onWindowFocusChanged(boolean hasWindowFocus) {
+        super.onWindowFocusChanged(hasWindowFocus);
+        mCurrentOnFocus = hasWindowFocus;
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        int diff = mConfiguration.diff(newConfig);
+        if ((ActivityInfo.CONFIG_ORIENTATION & diff) != 0) {
+            getWindowManager().getDefaultDisplay().getRealMetrics(
+                    mRealDisplayMetrics);
+        }
+        mRealDisplayMetrics = mContext.getResources().getFullScreenDisplayMetrics();
+        getWindowManager().getDefaultDisplay().getRealSize(mRealSize);
+        mConfiguration.setTo(newConfig);
+    }
+
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        updateFrameInsets();
+    }
+
+    public void setTitle(CharSequence title) {
+        mTitle.setText(title);
+    }
+
+    public FrameLayout getDecorContainer() {
+        return mDecorContainer;
+    }
+
+    int getStackBoxId() {
+        return mStackBoxId;
+    }
+
+    public WindowManager getWindowManager() {
+        if (mWindowManager == null)
+            mWindowManager = (WindowManager) mContext
+                    .getSystemService("window");
+        return mWindowManager;
+    }
+
+    void setHasShadowBackground(boolean shadow) {
+        if (shadow) {
+            mFrameView.setBackground(mDefaultBackground);
+            mDefaultBackground.getPadding(mBorderPadding);
+        } else {
+            mFrameView.setBackground(null);
+            mFrameView.setPadding(0, 0, 0, 0);
+            mBorderPadding.set(0, 0, 0, 0);
+        }
+        updateFrameInsets();
+    }
+
+    private boolean mPin = false;
+
+    @Override
+    public void onClick(View v) {
+        if (v == mPinBtn) {
+            mPin = !mPin;
+            pinActivity(mPin);
+            mPinBtn.setImageResource(mPin ? com.android.internal.R.drawable.window_pined
+                    : com.android.internal.R.drawable.window_unpin);
+        }
+    }
+
+    void pinActivity(boolean pin) {
+        try {
+            ActivityManagerNative.getDefault().pinedActivityStack(
+                    mWindow.mAppToken,pin);
+
+        } catch (Exception e) {
+        }
+    }
+
+    public void hideWindowFrame(boolean hide) {
+        if (hide == mHideFrame)
+            return;
+        mHideFrame = hide;
+        if (mHideFrame == true) {
+            mHeader.setVisibility(View.GONE);
+            setHasShadowBackground(false);
+        } else {
+            mHeader.setVisibility(View.VISIBLE);
+            setHasShadowBackground(true);
+        }
+
+        if (!hide) {
+            pinActivity(mPin);
+        }
+    }
+
+    OnTouchListener mHeaderTouch = new OnTouchListener() {
+        private long mLastTimeClick = 0L;
+        private static final long sDoubleClickInterval = 500;
+        private Rect mDownFrame = new Rect();
+        private Rect mTmpFullScreen = new Rect();
+        private int mDownX = 0;
+        private int mDownY = 0;
+        private int mLastX = 0;
+        private int mLastY = 0;
+        private int mDragMoveState = ActivityInfo.ACTIVITY_DRAG_MOVE_NONE;
+        private boolean mTouchOnHeader = false;
+        private boolean mOnShowFullScreen = false;
+        private boolean mScrollStarted = false;
+
+        private void moveWindow(int dx, int dy) {
+            try {
+                ActivityManagerNative.getDefault().moveAppWindow(
+                        mWindow.mAppToken, dx, dy);
+            } catch (Exception e) {
+            }
+        }
+
+        void showResizingFrame(Rect rect) {
+            try {
+                if (rect == null) {
+                    ActivityManagerNative.getDefault().hideResizingFrame();
+                    mOnShowFullScreen = false;
+                } else {
+                    ActivityManagerNative.getDefault().showResizingFrame(rect);
+                    mOnShowFullScreen = true;
+                }
+            } catch (Exception e) {
+            }
+        }
+        private void fullScreenWindow() {
+            hideWindowFrame(true);
+            try {
+                ActivityManagerNative.getDefault().setAppWindowMode(
+                        mWindow.mAppToken, mWindowFullScreen);
+            } catch (Exception e) {
+            }
+        }
+
+        void startDragMove(int state) {
+            try {
+                ActivityManagerNative.getDefault().dragMoveActivity(
+                        mWindow.mAppToken, state);
+            } catch (Exception e) {
+            }
+        }
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            int rawX = (int) event.getRawX();
+            int rawY = (int) event.getRawY();
+
+            if (MotionEvent.ACTION_DOWN == event.getAction()) {
+
+                mDownFrame.set(mDecor.getViewRootImpl().mWinFrame);
+                mTouchOnHeader = true;
+                mDownX = (int) event.getRawX();
+                mDownY = (int) event.getRawY();
+                mLastX = mDownX;
+                mLastY = mDownY;
+
+                long time = System.currentTimeMillis();
+                if (time - mLastTimeClick < sDoubleClickInterval) {
+                    fullScreenWindow();
+                    mLastTimeClick = 0L;
+                } else {
+                    mLastTimeClick = time;
+                }
+            } else if (MotionEvent.ACTION_MOVE == event.getAction()) {
+                if (!mTouchOnHeader)
+                    return false;
+                // 对于屏幕触屏事件，会有多余的move action
+                if (mDownX == rawX && mDownY == rawY)
+                    return true;
+
+                // Ignore jitter moves
+                if(!mScrollStarted && Math.abs(rawX - mDownX) <= mTapSlop && Math.abs(rawY - mDownY) <= mTapSlop) {
+                    return true;
+                }
+
+                mScrollStarted = true;
+
+                if (mDragMoveState == ActivityInfo.ACTIVITY_DRAG_MOVE_NONE) {
+                    mDragMoveState = ActivityInfo.ACTIVITY_DRAG_MOVE_START;
+                    startDragMove(mDragMoveState);
+                }
+                if (rawY > mRealDisplayMetrics.heightPixels * 2 / 3) {
+                    if (mDragMoveState == ActivityInfo.ACTIVITY_DRAG_MOVE_START) {
+                        mDragMoveState = ActivityInfo.ACTIVITY_DRAG_MOVE_CLOSE;
+                        startDragMove(mDragMoveState);
+                    }
+                } else {
+                    if (mDragMoveState == ActivityInfo.ACTIVITY_DRAG_MOVE_CLOSE) {
+                        mDragMoveState = ActivityInfo.ACTIVITY_DRAG_MOVE_START;
+                        startDragMove(mDragMoveState);
+                    }
+                }
+
+                if (rawY < mRealDisplayMetrics.heightPixels) {
+                    moveWindow(rawX - mLastX, rawY - mLastY);
+                    mLastX = rawX;
+                    mLastY = rawY;
+                }
+
+                if (rawY - event.getY() < mStatusBarHeight) {
+                    mTmpFullScreen.set(0,0,mRealSize.x,mRealSize.y - mDockBarHeight);
+                    showResizingFrame(mTmpFullScreen);
+                } else {
+                    showResizingFrame(null);
+                }
+
+                mLastTimeClick = 0L;
+            } else if (MotionEvent.ACTION_CANCEL == event.getAction()
+                    || MotionEvent.ACTION_UP == event.getAction()) {
+                if (mDragMoveState != ActivityInfo.ACTIVITY_DRAG_MOVE_NONE) {
+                    startDragMove(ActivityInfo.ACTIVITY_DRAG_MOVE_EXIT);
+                    mDragMoveState = ActivityInfo.ACTIVITY_DRAG_MOVE_NONE;
+                }
+
+                if (mOnShowFullScreen == true) {
+                    mOnShowFullScreen = false;
+                    fullScreenWindow();
+                    showResizingFrame(null);
+                }
+
+                mScrollStarted = false;
+            }
+            return true;
+        }
+    };
+
+}
+//CHAOZHUO END
diff --git a/core/java/com/android/internal/statusbar/IStatusBar.aidl b/core/java/com/android/internal/statusbar/IStatusBar.aidl
index ba67cf4..70969f3 100644
--- a/core/java/com/android/internal/statusbar/IStatusBar.aidl
+++ b/core/java/com/android/internal/statusbar/IStatusBar.aidl
@@ -76,5 +76,8 @@ oneway interface IStatusBar
      * @param source the identifier for the gesture, see {@link StatusBarManager}
      */
     void onCameraLaunchGestureDetected(int source);
+    //CHAOZHUO START
+    void dragMoveActivityState(int state);
+    //CHAOZHUO END
 }
 
diff --git a/core/java/com/android/internal/statusbar/IStatusBarService.aidl b/core/java/com/android/internal/statusbar/IStatusBarService.aidl
index 7db2cc9..7f8d100 100644
--- a/core/java/com/android/internal/statusbar/IStatusBarService.aidl
+++ b/core/java/com/android/internal/statusbar/IStatusBarService.aidl
@@ -90,4 +90,7 @@ interface IStatusBarService
     void appTransitionStarting(long statusBarAnimationsStartTime, long statusBarAnimationsDuration);
 
     void startAssist(in Bundle args);
+    //CHAOZHUO START
+    void dragMoveActivityState(int state);
+    //CHAOZHUO END
 }
diff --git a/core/java/com/android/internal/view/FloatingActionMode.java b/core/java/com/android/internal/view/FloatingActionMode.java
index b44baa2..c27138e 100644
--- a/core/java/com/android/internal/view/FloatingActionMode.java
+++ b/core/java/com/android/internal/view/FloatingActionMode.java
@@ -32,6 +32,10 @@ import com.android.internal.widget.FloatingToolbar;
 
 import java.util.Arrays;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 public class FloatingActionMode extends ActionMode {
 
     private static final int MAX_HIDE_DURATION = 3000;
@@ -167,15 +171,17 @@ public class FloatingActionMode extends ActionMode {
         mContentRectOnScreen.set(mContentRect);
         mContentRectOnScreen.offset(mViewPositionOnScreen[0], mViewPositionOnScreen[1]);
 
-        if (isContentRectWithinBounds()) {
+        if (isContentRectWithinBounds() || CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
             mFloatingToolbarVisibilityHelper.setOutOfBounds(false);
             // Make sure that content rect is not out of the view's visible bounds.
+            if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON){
             mContentRectOnScreen.set(
                     Math.max(mContentRectOnScreen.left, mViewRectOnScreen.left),
                     Math.max(mContentRectOnScreen.top, mViewRectOnScreen.top),
                     Math.min(mContentRectOnScreen.right, mViewRectOnScreen.right),
                     Math.min(mContentRectOnScreen.bottom,
                             mViewRectOnScreen.bottom + mBottomAllowance));
+            }
 
             if (!mContentRectOnScreen.equals(mPreviousContentRectOnScreen)) {
                 // Content rect is moving.
diff --git a/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigConstants.java b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigConstants.java
new file mode 100644
index 0000000..44b385b
--- /dev/null
+++ b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigConstants.java
@@ -0,0 +1,14 @@
+
+package com.chaozhuo.onlineconfig;
+
+public class CZOnlineConfigConstants {
+    static final boolean FEATURE_ENABLED = false;
+    static final boolean DEBUG = false;
+
+    public static final String CONFIG_NAME_WINDOW_OPEN_MODE = "window_open_mode";
+    public static final String CONFIG_NAME_AUTO_RUN = "auto_run_allowed";
+    public static final String CONFIG_NAME_INPUT_METHOD_SWITCH_KEY = "input_method_switch_key";
+
+    // 默认窗口模式的配置信息
+    public static final String CONFIG_NAME_WINDOW_OPEN_MODE_3 = "window_open_mode_3";
+}
diff --git a/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigInfo.java b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigInfo.java
new file mode 100644
index 0000000..03feb05
--- /dev/null
+++ b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigInfo.java
@@ -0,0 +1,144 @@
+
+package com.chaozhuo.onlineconfig;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FilenameFilter;
+
+import android.os.FileUtils;
+import android.text.TextUtils;
+import android.util.Log;
+
+/**
+ * @author Fan Guofeng
+ */
+public class CZOnlineConfigInfo {
+    private static final boolean DEBUG = CZOnlineConfigConstants.DEBUG;
+
+    private static final String TAG = "CZOnlineConfigStorage";
+
+    public static final String FEATURE_ID_AND_DATA_FINGERPRINT_SEPARATOR = "_#_";
+
+    public static final String FILE_POSTFIX = ".config";
+
+    static class ConfigFileNameFilter implements FilenameFilter {
+        final String mFeatureId;
+
+        public ConfigFileNameFilter(String featureId) {
+            mFeatureId = featureId;
+        }
+
+        @Override
+        public boolean accept(File dir, String filename) {
+            return filename.startsWith(mFeatureId + FEATURE_ID_AND_DATA_FINGERPRINT_SEPARATOR);
+        }
+    }
+
+    /**
+     * 找到符合标准的第一个文件，以字符串形式返回该文件内容 理论上不应该存在满足标准的多个文件，代码这样写只是为了增强容错性
+     */
+    public static CZOnlineConfigInfo getStoredConfigInfo(String configName) {
+        if(!CZOnlineConfigConstants.FEATURE_ENABLED) {
+            return null;
+        }
+
+        File targetFile = null;
+        final File dir = new File(CZOnlineConfigManager.DIR_PATH);
+        if (dir.exists()) {
+            String[] fileNameList = dir.list(new ConfigFileNameFilter(configName));
+            if (fileNameList != null) {
+                for (String fileName : fileNameList) {
+                    File file = new File(dir, fileName);
+                    if (file.exists() && file.isFile()) {
+                        targetFile = file;
+                        if (DEBUG) {
+                            Log.d(TAG, "[readAdaptData]: Target file: " + file.getName());
+                        }
+                        break;
+                    }
+                }
+            }
+        }
+
+        if (targetFile != null) {
+            final String fileName = targetFile.getName();
+            String version = null;
+            if (fileName.endsWith(FILE_POSTFIX)) {
+                String prefix = fileName.substring(0, fileName.length() - FILE_POSTFIX.length());
+                String[] nameSegs = prefix.split(FEATURE_ID_AND_DATA_FINGERPRINT_SEPARATOR);
+                if (nameSegs != null && nameSegs.length > 0) {
+                    version = nameSegs[nameSegs.length - 1];
+                }
+
+                if (!TextUtils.isEmpty(version)) {
+                    CZOnlineConfigInfo config = new CZOnlineConfigInfo(configName);
+                    config.mFilePath = targetFile.getAbsolutePath();
+                    try {
+                        config.mVersion = Integer.valueOf(version);
+                    } catch (Exception e) {
+                        if (DEBUG) {
+                            Log.e(TAG, "Error parsing version", e);
+                        }
+                    }
+                    return config;
+                }
+            }
+        }
+
+        return null;
+    }
+
+    // 检查是否有已经存在的和这个feature对应的文件，有的话删除
+    private static void removeAdaptFile(String configName) {
+        final File dir = new File(CZOnlineConfigManager.DIR_PATH);
+        if (!dir.exists()) {
+            return;
+        }
+
+        String[] fileNameList = dir.list(new ConfigFileNameFilter(configName));
+        if (fileNameList != null) {
+            for (String fileName : fileNameList) {
+                File file = new File(dir, fileName);
+                file.delete();
+
+                if (DEBUG) {
+                    Log.d(TAG, "[removeAdaptFile]: Delete exsiting file: " + file.getName());
+                }
+            }
+        }
+    }
+
+    private static String getConfigFilePath(CZOnlineConfigInfo config) {
+        return CZOnlineConfigManager.DIR_PATH + config.mName + FEATURE_ID_AND_DATA_FINGERPRINT_SEPARATOR
+                + config.mVersion + FILE_POSTFIX;
+    }
+
+    final String mName;
+    public String mFilePath = "";
+    int mVersion = 0;
+
+    CZOnlineConfigInfo(String name) {
+        mName = name;
+    }
+
+    void storeDataToFile(byte[] data) {
+        // Ensure the direcoty
+        final File dir = new File(CZOnlineConfigManager.DIR_PATH);
+        if (!dir.exists()) {
+            dir.mkdirs();
+        } else {
+            removeAdaptFile(mName);
+        }
+
+        if (TextUtils.isEmpty(mFilePath)) {
+            mFilePath = getConfigFilePath(this);
+        }
+
+        FileUtils.copyToFile(new ByteArrayInputStream(data), new File(mFilePath));
+    }
+
+    @Override
+    public String toString() {
+        return this.getClass().getSimpleName() + ": " + mName + ", " + mVersion + ", " + mFilePath;
+    }
+}
diff --git a/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigManager.java b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigManager.java
new file mode 100644
index 0000000..e1249e1
--- /dev/null
+++ b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigManager.java
@@ -0,0 +1,286 @@
+
+package com.chaozhuo.onlineconfig;
+
+import com.chaozhuo.update.CZNetUtils;
+import com.chaozhuo.update.CZUpdateUtils;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.ConnectivityManager;
+import android.net.wifi.WifiManager;
+import android.os.FileUtils;
+import android.os.Handler;
+import android.os.Message;
+import android.text.TextUtils;
+import android.util.Log;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+public class CZOnlineConfigManager {
+    public interface ConfigUpdateListener {
+        public void onConfigUpdated(String name, int version, String filePath);
+    }
+
+    static final boolean DEBUG = CZOnlineConfigConstants.DEBUG;
+
+    private static final int MSG_GENERATE_MID = 1;
+
+    private static final String TAG = "CZOnlineConfigManager";
+    static final String DIR_PATH = "/data/system/chaozhuo/online_config/";
+    public static final String LAST_UPDATE_TIME_FILE_PATH = DIR_PATH + "last_update_time.config";
+
+    public static final String SHARED_PREF_KEY_LAST_UPDATE_TIME = "shared_pref_key_last_update_time";
+    public static final int UPDATE_INTERVAL = 8 * 3600 * 1000;
+
+    final static String[] DEFAULT_CONFIG_NAMES = {
+            CZOnlineConfigConstants.CONFIG_NAME_AUTO_RUN,
+            CZOnlineConfigConstants.CONFIG_NAME_INPUT_METHOD_SWITCH_KEY,
+            CZOnlineConfigConstants.CONFIG_NAME_WINDOW_OPEN_MODE_3,
+    };
+
+    private static CZOnlineConfigManager sInstance = null;
+    private final AtomicBoolean mUpdateInProcess = new AtomicBoolean(false);
+    private long mLastUpdateTime = -1;
+    private ConcurrentHashMap<String, ArrayList<ConfigUpdateListener>> mListenermap;
+
+    private Handler mHandler = new Handler() {
+        public void handleMessage(android.os.Message msg) {
+            if (DEBUG) {
+                Log.d(TAG, "Try generating the mid again...");
+            }
+
+            if (!TextUtils.isEmpty(CZUpdateUtils.generateMidIfNotExist(mContext, false))) {
+                removeMessages(MSG_GENERATE_MID);
+
+                if (msg.obj != null) {
+                    mContext.unregisterReceiver((BroadcastReceiver) msg.obj);
+                }
+            }
+        };
+    };
+
+    public static CZOnlineConfigManager getInstance() {
+        if (sInstance == null) {
+            synchronized (DEFAULT_CONFIG_NAMES) {
+                if (sInstance == null) {
+                    sInstance = new CZOnlineConfigManager();
+                }
+            }
+        }
+
+        return sInstance;
+    }
+
+    private Context mContext;
+
+    private CZOnlineConfigManager() {
+    }
+
+    public void init(Context context) {
+        if (CZOnlineConfigConstants.FEATURE_ENABLED) {
+            mContext = context;
+            IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
+            filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
+
+            mContext.registerReceiver(new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    if (CZNetUtils.isConnected(mContext)) {
+                        checkForUpdate();
+                    } else if (DEBUG) {
+                        Log.d(TAG, "[ACTION_SCREEN_ON]: Network unavailable...");
+                    }
+                }
+            }, filter);
+
+            // 监控WiFi开关的变化，以尽早获取正确的Mid
+            if (TextUtils.isEmpty(CZUpdateUtils.getStoredMid())) {
+                mContext.registerReceiver(new BroadcastReceiver() {
+                    @Override
+                    public void onReceive(Context context, Intent intent) {
+                        if (DEBUG) {
+                            Log.d(TAG, "[ACTION_WIFI_STATE_CHANGED]: " + intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, -1));
+                        }
+
+                        if (DEBUG) {
+                            Log.d(TAG, "Try generating the mid...");
+                        }
+
+                        if (!TextUtils.isEmpty(CZUpdateUtils.generateMidIfNotExist(context, false))) {
+                            mHandler.removeMessages(MSG_GENERATE_MID);
+                            mContext.unregisterReceiver(this);
+                        } else {
+                            // Try again in half second...
+                            mHandler.sendMessageDelayed(Message.obtain(mHandler, MSG_GENERATE_MID, this), 500);
+                        }
+                    }
+                }, new IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION));
+            }
+
+            if (DEBUG) {
+                addConfigUpdateListener(CZOnlineConfigConstants.CONFIG_NAME_WINDOW_OPEN_MODE, new ConfigUpdateListener() {
+                    @Override
+                    public void onConfigUpdated(String name, int version, String filePath) {
+                        Log.d(TAG, "onConfigUpdated-1: " + name + ", " + version + ", " + filePath);
+                    }
+                });
+                addConfigUpdateListener(CZOnlineConfigConstants.CONFIG_NAME_WINDOW_OPEN_MODE, new ConfigUpdateListener() {
+                    @Override
+                    public void onConfigUpdated(String name, int version, String filePath) {
+                        Log.d(TAG, "onConfigUpdated-2: " + name + ", " + version + ", " + filePath);
+                    }
+                });
+                addConfigUpdateListener(CZOnlineConfigConstants.CONFIG_NAME_AUTO_RUN, new ConfigUpdateListener() {
+                    @Override
+                    public void onConfigUpdated(String name, int version, String filePath) {
+                        Log.d(TAG, "onConfigUpdated-3: " + name + ", " + version + ", " + filePath);
+                    }
+                });
+                addConfigUpdateListener(CZOnlineConfigConstants.CONFIG_NAME_WINDOW_OPEN_MODE_3, new ConfigUpdateListener() {
+                    @Override
+                    public void onConfigUpdated(String name, int version, String filePath) {
+                        Log.d(TAG, "onConfigUpdated-4: " + name + ", " + version + ", " + filePath);
+                    }
+                });
+            }
+        }
+    }
+
+    public void addConfigUpdateListener(String configName, ConfigUpdateListener listener) {
+        if (!TextUtils.isEmpty(configName) && listener != null) {
+            ArrayList<ConfigUpdateListener> ConfigList = null;
+            if (mListenermap == null) {
+                mListenermap = new ConcurrentHashMap<String, ArrayList<ConfigUpdateListener>>();
+            } else {
+                ConfigList = mListenermap.get(configName);
+            }
+
+            if (ConfigList == null) {
+                ConfigList = new ArrayList<ConfigUpdateListener>();
+                ConfigList.add(listener);
+                mListenermap.put(configName, ConfigList);
+            } else if (!ConfigList.contains(listener)) {
+                ConfigList.add(listener);
+            }
+        }
+    }
+
+    public void removeConfigUpdateListener(String configName, ConfigUpdateListener listener) {
+        if (mListenermap != null) {
+            ArrayList<ConfigUpdateListener> ConfigList = mListenermap.get(configName);
+            if (ConfigList != null) {
+                ConfigList.remove(listener);
+            }
+        }
+    }
+
+    private void checkForUpdate() {
+        if (DEBUG) {
+            Log.d(TAG, "[checkForUpdate]: Enter...");
+        }
+
+        if (mUpdateInProcess.get()) {
+            if (DEBUG) {
+                Log.d(TAG, "[checkForUpdate]: Update already in process...");
+            }
+            return;
+        }
+
+        if (mContext != null && checkUpdateInterval()) {
+            if (DEBUG) {
+                Log.d(TAG, "[checkForUpdate]: Start update...");
+            }
+            startUpdate();
+        }
+    }
+
+    private boolean checkUpdateInterval() {
+        long lastUpdateTime = readLastUpdateTime();
+        if (lastUpdateTime < 0) {
+            if (DEBUG) {
+                Log.d(TAG, "[checkUpdateInterval]: Never updated...");
+            }
+            return true;
+        }
+
+        long now = System.currentTimeMillis();
+        if (DEBUG) {
+            Log.d(TAG, "[checkUpdateInterval]: Time interval: " + (now - lastUpdateTime) / 1000);
+        }
+
+        return now < lastUpdateTime || now - lastUpdateTime > UPDATE_INTERVAL;
+    }
+
+    private void startUpdate() {
+        if (mUpdateInProcess.compareAndSet(false, true)) {
+            Runnable updateTask = new Runnable() {
+                @Override
+                public void run() {
+                    if (DEBUG) {
+                        for (String configName : DEFAULT_CONFIG_NAMES) {
+                            CZOnlineConfigInfo oci = CZOnlineConfigInfo.getStoredConfigInfo(configName);
+                            if (oci != null && DEBUG) {
+                                Log.d(TAG, "[beforeUpdate]: " + oci.mName + ", " + oci.mVersion + ", " + oci.mFilePath);
+                            }
+                        }
+                    }
+
+                    CZOnlineConfigInfo[] updatedConfigs = CZOnlineConfigUpdater.update(mContext, DEFAULT_CONFIG_NAMES);
+                    if (updatedConfigs != null) {
+                        storeLastUpdateTime(System.currentTimeMillis());
+
+                        for (CZOnlineConfigInfo oci : updatedConfigs) {
+                            final String configName = oci.mName;
+                            ArrayList<ConfigUpdateListener> cuListeners = mListenermap.get(configName);
+                            if (cuListeners != null) {
+                                for (ConfigUpdateListener listener : cuListeners) {
+                                    listener.onConfigUpdated(configName, oci.mVersion, oci.mFilePath);
+                                }
+                            }
+                        }
+                    } else if (DEBUG) {
+                        Log.d(TAG, "[startUpdate]: No thing updated...");
+                    }
+                    mUpdateInProcess.set(false);
+                }
+            };
+            new Thread(updateTask).start();
+        }
+    }
+
+    private synchronized long readLastUpdateTime() {
+        if (mLastUpdateTime > 0) {
+            return mLastUpdateTime;
+        }
+
+        File file = new File(LAST_UPDATE_TIME_FILE_PATH);
+        if (file.exists()) {
+            try {
+                String strTime = FileUtils.readTextFile(file, 0, null);
+                long time = Long.valueOf(strTime);
+                mLastUpdateTime = time;
+                return time;
+            } catch (Exception e) {
+            }
+        }
+
+        return -1;
+    }
+
+    private synchronized void storeLastUpdateTime(long time) {
+        mLastUpdateTime = time;
+
+        File dir = new File(DIR_PATH);
+        if (!dir.exists()) {
+            dir.mkdirs();
+        }
+
+        FileUtils.copyToFile(new ByteArrayInputStream(String.valueOf(time).getBytes()), new File(LAST_UPDATE_TIME_FILE_PATH));
+    }
+}
diff --git a/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigUpdater.java b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigUpdater.java
new file mode 100644
index 0000000..021b6d2
--- /dev/null
+++ b/core/java/com/chaozhuo/onlineconfig/CZOnlineConfigUpdater.java
@@ -0,0 +1,98 @@
+
+package com.chaozhuo.onlineconfig;
+
+import com.chaozhuo.update.CZUpdateHelper;
+import com.chaozhuo.update.CZUpdateQuery;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class CZOnlineConfigUpdater {
+    static final boolean DEBUG = CZOnlineConfigConstants.DEBUG;
+    private static final String TAG = "CZOnlineConfigUpdater";
+
+    private static final String API = "/v1/app/config";
+
+    public static CZOnlineConfigInfo[] update(final Context context, final String[] configNames) {
+        if (configNames != null) {
+            CZUpdateQuery query = new CZUpdateQuery() {
+                protected void injectExtraData(JSONObject jsonObj) {
+                    try {
+                        JSONObject keys = new JSONObject();
+                        int version;
+                        for (String configName : configNames) {
+                            CZOnlineConfigInfo oci = CZOnlineConfigInfo.getStoredConfigInfo(configName);
+                            if (oci != null) {
+                                version = oci.mVersion;
+                            } else {
+                                version = 0;
+                            }
+                            keys.put(configName, version);
+                        }
+
+                        jsonObj.put("keys", keys);
+                    } catch (JSONException e) {
+                        if (DEBUG) {
+                            Log.e(TAG, "Error update", e);
+                        }
+                    }
+                };
+            };
+            byte[] retData = CZUpdateHelper.update(API, query.toJsonString(context).getBytes());
+            return handleUpdateResult(context, retData);
+        }
+
+        return null;
+    }
+
+    private static CZOnlineConfigInfo[] handleUpdateResult(Context context, byte[] retData) {
+        if (retData == null) {
+            return null;
+        }
+
+        try {
+            ArrayList<CZOnlineConfigInfo> updatedConfigs = new ArrayList<CZOnlineConfigInfo>();
+            JSONArray array = new JSONArray(new String(retData));
+            final int length = array.length();
+            for (int i = 0; i < length; i++) {
+                JSONObject jo = array.getJSONObject(i);
+                String name = jo.getString("name");
+
+                String data = jo.optString("value");
+                if (TextUtils.isEmpty(data)) {
+                    if (DEBUG) {
+                        Log.e(TAG, "No update for:  " + name);
+                    }
+                    continue;
+                }
+
+                CZOnlineConfigInfo oci = new CZOnlineConfigInfo(name);
+                oci.mVersion = Integer.valueOf(jo.getString("version"));
+                oci.storeDataToFile(data.getBytes());
+
+                updatedConfigs.add(oci);
+
+                if (DEBUG) {
+                    Log.e(TAG, "Storing ret: " + oci);
+                }
+            }
+
+            CZOnlineConfigInfo[] ret = new CZOnlineConfigInfo[updatedConfigs.size()];
+            updatedConfigs.toArray(ret);
+            return ret;
+        } catch (JSONException e) {
+            if (DEBUG) {
+                Log.e(TAG, "Error processing result", e);
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/core/java/com/chaozhuo/system/CZSwitchManager.java b/core/java/com/chaozhuo/system/CZSwitchManager.java
new file mode 100644
index 0000000..408c992
--- /dev/null
+++ b/core/java/com/chaozhuo/system/CZSwitchManager.java
@@ -0,0 +1,10 @@
+
+package com.chaozhuo.system;
+
+/**
+ * @hide
+ */
+public class CZSwitchManager {
+    // 主编译开关
+    public static final boolean BUILD_MAIN_SWITCH_ON = true;
+}
diff --git a/core/java/com/chaozhuo/update/CZNetUtils.java b/core/java/com/chaozhuo/update/CZNetUtils.java
new file mode 100644
index 0000000..f930f39
--- /dev/null
+++ b/core/java/com/chaozhuo/update/CZNetUtils.java
@@ -0,0 +1,58 @@
+
+package com.chaozhuo.update;
+
+import android.content.Context;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.util.Log;
+
+public class CZNetUtils {
+    private static final String TAG = "NetUtils";
+
+    /** 网络是否已经连接 */
+    public static boolean isConnected(Context c) {
+        ConnectivityManager cm = (ConnectivityManager) c.getSystemService(Context.CONNECTIVITY_SERVICE);
+        if (cm != null) {
+            NetworkInfo[] infos = cm.getAllNetworkInfo();
+            if (infos != null) {
+                for (NetworkInfo ni : infos) {
+                    if (ni.isConnected()) {
+                        return true;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+
+    /** WiFi 是否已经连接 */
+    public static boolean isWifiConnected(Context c) {
+        ConnectivityManager connecManager = (ConnectivityManager) c.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo networkInfo = null;
+        try {
+            networkInfo = connecManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
+        } catch (Exception e) {
+            Log.e(TAG, "Error reading wifi state: ", e);
+        }
+        if (networkInfo != null) {
+            return networkInfo.isConnected();
+        } else {
+            return false;
+        }
+    }
+
+    /** 数据网络是否已经连接 */
+    public static boolean isMobileConnected(Context c) {
+        boolean isConnected = false;
+        try {
+            ConnectivityManager mConnectivityManager = (ConnectivityManager) c.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo mMobileNetworkInfo = mConnectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
+            if (mMobileNetworkInfo != null) {
+                isConnected = mMobileNetworkInfo.isConnected();
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error reading mobile network state: ", e);
+        }
+        return isConnected;
+    }
+}
diff --git a/core/java/com/chaozhuo/update/CZUpdateCryptUtil.java b/core/java/com/chaozhuo/update/CZUpdateCryptUtil.java
new file mode 100644
index 0000000..d87e877
--- /dev/null
+++ b/core/java/com/chaozhuo/update/CZUpdateCryptUtil.java
@@ -0,0 +1,108 @@
+
+package com.chaozhuo.update;
+
+import android.util.Base64;
+
+import javax.crypto.*;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.UnsupportedEncodingException;
+import java.security.InvalidAlgorithmParameterException;
+import java.security.InvalidKeyException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.*;
+
+public class CZUpdateCryptUtil {
+
+    public static final String AES_ECB = "AES/ECB/PKCS5Padding";
+    public static final String AES_CBC = "AES/CBC/PKCS5Padding";
+
+    public static byte[] decrypt(byte[] content, String key, String algo)
+            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
+            IllegalBlockSizeException, BadPaddingException {
+        Cipher cipherEnc = Cipher.getInstance(algo);
+        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
+        cipherEnc.init(Cipher.DECRYPT_MODE, keySpec);
+        byte[] data = cipherEnc.doFinal(content);
+        if (AES_ECB.equals(algo)) {
+            return data;
+        } else {
+            byte[] iv = cipherEnc.getIV();
+            byte[] ret = new byte[ data.length - iv.length];
+            System.arraycopy(data, iv.length, ret, 0, (data.length - iv.length));
+            return ret;
+        }
+
+    }
+
+    public static byte[] encrypt(byte[] content, String key) throws NoSuchPaddingException,
+            NoSuchAlgorithmException, InvalidAlgorithmParameterException,
+            InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
+        return encrypt(content, key, AES_ECB);
+    }
+
+    public static byte[] encrypt(byte[] content, String key, String algo)
+            throws NoSuchPaddingException, NoSuchAlgorithmException,
+            InvalidAlgorithmParameterException,
+            InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
+        Cipher cipherEnc = Cipher.getInstance(algo);
+        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
+        cipherEnc.init(Cipher.ENCRYPT_MODE, keySpec);
+        byte[] data = cipherEnc.doFinal(content);
+        if (AES_ECB.equals(algo)) {
+            return data;
+        } else {
+            byte[] iv = cipherEnc.getIV();
+            byte[] ret = new byte[iv.length + data.length];
+            System.arraycopy(iv, 0, ret, 0, iv.length);
+            System.arraycopy(data, 0, ret, iv.length, data.length);
+            return ret;
+        }
+    }
+
+    public static byte[] hmac(byte[] data, String key) throws NoSuchAlgorithmException,
+            UnsupportedEncodingException, InvalidKeyException {
+        Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
+        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes("UTF-8"), "HmacSHA256");
+        sha256_HMAC.init(secret_key);
+
+        return sha256_HMAC.doFinal(data);
+    }
+
+    public static String sign(Map<String, String> params, String secret, byte[] postBody)
+            throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException {
+        byte[] body = concatParams(params).getBytes("UTF-8");
+        if (postBody != null && postBody.length > 0) {
+            byte[] total = new byte[body.length + postBody.length];
+            System.arraycopy(body, 0, total, 0, body.length);
+            System.arraycopy(postBody, 0, total, body.length, postBody.length);
+            body = total;
+        }
+        return base64(hmac(body, secret));
+    }
+
+    public static String sign(Map<String, String> params, String secret)
+            throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException {
+        return sign(params, secret, null);
+    }
+
+    public static String md5(Map<String, String> params, String secret)
+            throws NoSuchAlgorithmException, UnsupportedEncodingException {
+        MessageDigest digest = MessageDigest.getInstance("MD5");
+        return base64(digest.digest((secret + concatParams(params) + secret).getBytes("UTF-8")));
+    }
+
+    private static String concatParams(Map<String, String> params) {
+        List<String> keys = new ArrayList<String>(params.keySet());
+        Collections.sort(keys);
+        StringBuilder body = new StringBuilder();
+        for (String key : keys) {
+            body.append(key).append(params.get(key));
+        }
+        return body.toString();
+    }
+
+    private static String base64(byte[] data) {
+        return Base64.encodeToString(data, Base64.NO_WRAP);
+    }
+}
diff --git a/core/java/com/chaozhuo/update/CZUpdateHelper.java b/core/java/com/chaozhuo/update/CZUpdateHelper.java
new file mode 100644
index 0000000..8fb0c7d
--- /dev/null
+++ b/core/java/com/chaozhuo/update/CZUpdateHelper.java
@@ -0,0 +1,105 @@
+
+package com.chaozhuo.update;
+
+import android.util.Log;
+
+import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.sql.Date;
+import java.text.SimpleDateFormat;
+import java.util.HashMap;
+import java.util.Map;
+
+public class CZUpdateHelper {
+    private static final boolean DEBUG = false;
+    private static final String TAG = "CZUpdateHelper";
+    private static final String HOST = "http://api.phoenixstudio.org";
+    private static final String API_KEY = "c1509280000000001";
+    private static final String SECRET_KEY = "96e3f1ea2cc7457fb89b97c55d688405";
+
+//    private static final String HOST = "http://api.chaozhuo.net";
+//    private static final String API_KEY = "c1509170000000003";
+//    private static final String SECRET_KEY = "6b76227cfd3547e7b52eab5fa3d94012";
+
+    public static byte[] update(String api, byte[] sendData) {
+        if (DEBUG) {
+            Log.d(TAG, "uploadToServer: " + new String(sendData));
+        }
+
+        HttpURLConnection conn = null;
+        try {
+            sendData = CZUpdateCryptUtil.encrypt(sendData, SECRET_KEY, CZUpdateCryptUtil.AES_CBC);
+
+            Map<String, String> params = new HashMap<String, String>();
+            SimpleDateFormat formatter = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
+            String timeStamp = formatter.format(new Date(System.currentTimeMillis()));
+            params.put("timestamp", timeStamp);
+
+            String pSign = "sign=" + URLEncoder.encode(CZUpdateCryptUtil.sign(params, SECRET_KEY, sendData), "UTF-8");
+            String pTimeStamp = "timestamp=" + URLEncoder.encode(timeStamp, "UTF-8");
+
+            URL url = new URL(HOST + api + "?" + pSign + "&" + pTimeStamp);
+            if (DEBUG) {
+                Log.d(TAG, "Url: " + url);
+            }
+
+            conn = (HttpURLConnection) url.openConnection();
+            conn.setConnectTimeout(10000);
+            conn.setRequestMethod("POST");
+            conn.setDoOutput(true);
+            conn.setUseCaches(false); // Post不能用cache
+            conn.setRequestProperty("Accept", "application/json");
+            conn.setRequestProperty("X-ApiKey", API_KEY);
+            conn.connect();
+
+            OutputStream outStrm = conn.getOutputStream();
+            outStrm.write(sendData);
+            outStrm.flush();
+            outStrm.close();
+
+            int retCode = conn.getResponseCode();
+            if (DEBUG) {
+                Log.d(TAG, "Upload retCode: " + retCode);
+            }
+
+            if (retCode == 200) {
+                InputStream inStrm = conn.getInputStream();
+                byte[] retData = readInputStream(inStrm);
+                retData = CZUpdateCryptUtil.decrypt(retData, SECRET_KEY, CZUpdateCryptUtil.AES_CBC);
+
+                if (DEBUG) {
+                    Log.d(TAG, "Upload result: " + new String(retData));
+                }
+
+                return retData;
+            }
+        } catch (Exception e) {
+            if (DEBUG) {
+                Log.w(TAG, "Error connecting server..", e);
+            }
+        } finally {
+            if (conn != null) {
+                conn.disconnect();
+            }
+        }
+
+        return null;
+    }
+
+    private static byte[] readInputStream(InputStream inStream) throws Exception {
+        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+        byte[] buffer = new byte[1024];
+        int len = 0;
+        while ((len = inStream.read(buffer)) != -1) {
+            outStream.write(buffer, 0, len);
+        }
+        byte[] data = outStream.toByteArray();
+        outStream.close();
+        inStream.close();
+        return data;
+    }
+}
diff --git a/core/java/com/chaozhuo/update/CZUpdateQuery.java b/core/java/com/chaozhuo/update/CZUpdateQuery.java
new file mode 100644
index 0000000..aa027ad
--- /dev/null
+++ b/core/java/com/chaozhuo/update/CZUpdateQuery.java
@@ -0,0 +1,58 @@
+
+package com.chaozhuo.update;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import android.content.Context;
+import android.os.Build;
+import android.provider.Settings.Secure;
+import android.provider.Settings.System;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+
+import java.lang.reflect.Method;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+
+public class CZUpdateQuery {
+    private static final String TAG = "CZUpdateQuery";
+
+    public String toJsonString(Context context) {
+        JSONObject obj = new JSONObject();
+        try {
+            obj.put("mid", CZUpdateUtils.getMid(context));
+            obj.put("version", CZUpdateUtils.getSystemVersion());
+            obj.put("device_info", getDeviceInfo(context));
+        } catch (JSONException e) {
+        }
+
+        injectExtraData(obj);
+        return obj.toString();
+    }
+
+    /**
+     * Override this method to add your custom data into the query body
+     */
+    protected void injectExtraData(JSONObject jsonObj) {
+
+    }
+
+    private JSONObject getDeviceInfo(Context context) {
+        JSONObject jDeviceInfo = new JSONObject();
+        try {
+            jDeviceInfo.put("manufacturer", Build.MANUFACTURER);
+            jDeviceInfo.put("brand", Build.BRAND);
+            jDeviceInfo.put("model", Build.MODEL);
+            jDeviceInfo.put("device", Build.DEVICE);
+            jDeviceInfo.put("product", Build.PRODUCT);
+            jDeviceInfo.put("sdk_int", Build.VERSION.SDK_INT);
+            jDeviceInfo
+                    .put("net_type", CZNetUtils.isWifiConnected(context) ? "wifi" : (CZNetUtils.isMobileConnected(context) ? "mobile" : "unknown"));
+        } catch (JSONException e) {
+            Log.e("CZUpdateQuery", "Error reading device info", e);
+        }
+
+        return jDeviceInfo;
+    }
+}
diff --git a/core/java/com/chaozhuo/update/CZUpdateUtils.java b/core/java/com/chaozhuo/update/CZUpdateUtils.java
new file mode 100644
index 0000000..14bce4c
--- /dev/null
+++ b/core/java/com/chaozhuo/update/CZUpdateUtils.java
@@ -0,0 +1,228 @@
+
+package com.chaozhuo.update;
+
+import android.content.Context;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.os.Build;
+import android.os.SystemProperties;
+import android.provider.Settings.Secure;
+import android.provider.Settings.System;
+import android.text.TextUtils;
+import android.util.Log;
+
+import java.lang.reflect.Method;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Enumeration;
+import java.util.regex.Pattern;
+
+public class CZUpdateUtils {
+    private static final boolean DEBUG = false;
+    private static final String TAG = "CZUpdateUtils";
+
+    private static final String SYSTEM_PROP_KEY_MID = "persist.sys.phoenix.mid";
+    private static final String PATTERN_MAC_ADDRESS = "[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}";
+
+    public static String getSystemVersion() {
+        return SystemProperties.get("ro.phoenix.version.code", "0");
+    }
+
+    /**
+     * 对于非系统权限的进程，写系统设置会有异常，无法存储成功，因此对于此类应用， 需要自己保存通过此接口取得的mid值，避免每次现生成导致的前后不一致。
+     */
+
+    public static String getMid(Context context) {
+        return generateMidIfNotExist(context, true);
+    }
+
+    public synchronized static String generateMidIfNotExist(Context context, boolean force) {
+        String mid = getStoredMid();
+        if (!TextUtils.isEmpty(mid)) {
+            if (DEBUG) {
+                Log.d(TAG, "Stored mid found: " + mid);
+            }
+
+            return mid;
+        }
+
+        // Try to fetch the WiFi mac address
+        String macAddr = getWiFiMacAddress(context);
+        boolean isMacAddrValid = !TextUtils.isEmpty(macAddr) && Pattern.matches(PATTERN_MAC_ADDRESS, macAddr);
+        if (!isMacAddrValid) {
+            if (DEBUG) {
+                Log.d(TAG, "WiFi Mac Address invalid: " + macAddr);
+            }
+
+            // Fetch the ethernet mac address
+            macAddr = getEthernetMacAddress();
+            isMacAddrValid = !TextUtils.isEmpty(macAddr) && Pattern.matches(PATTERN_MAC_ADDRESS, macAddr);
+
+            if (DEBUG && !isMacAddrValid) {
+                Log.d(TAG, "Ethernet Mac Address invalid: " + macAddr);
+            }
+        }
+
+        if (!isMacAddrValid && !force) {
+            // This is not the best situation since we've got no valid
+            // macaddress...
+            return "";
+        }
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(Build.MANUFACTURER).append('&')
+                .append(Build.MODEL).append('&');
+
+        String deviceSerial = getDeviceSerial();
+        if (!TextUtils.isEmpty(deviceSerial)) {
+            sb.append(deviceSerial).append('&');
+        }
+
+        if (isMacAddrValid) {
+            sb.append(macAddr);
+        } else {
+            if (DEBUG) {
+                Log.d(TAG, "Use android Id instead since the mac address is invalid!");
+            }
+
+            sb.append(getAndroidId(context));
+        }
+
+        if (DEBUG) {
+            Log.d(TAG, "Raw information for mid generation: " + sb.toString());
+        }
+
+        mid = getMD5(sb.toString());
+        try {
+            SystemProperties.set(SYSTEM_PROP_KEY_MID, mid);
+        } catch (Exception e) {
+            // 对于非系统权限的进程，写系统设置会有exception，无法存储成功。
+        }
+
+        if (DEBUG) {
+            Log.d(TAG, "Final mid: " + mid);
+        }
+        return mid;
+    }
+
+    public static String getStoredMid() {
+        return SystemProperties.get(SYSTEM_PROP_KEY_MID);
+    }
+
+    public static String getAndroidId(Context context) {
+        String ai = System.getString(context.getContentResolver(), Secure.ANDROID_ID);
+        return ai == null ? "" : ai;
+    }
+
+    public static String getDeviceSerial() {
+        String serial = "";
+        try {
+            Class<?> c = Class.forName("android.os.SystemProperties");
+            Method get = c.getMethod("get", String.class);
+            serial = (String) get.invoke(c, "ro.serialno");
+            if (serial == null) {
+                serial = "";
+            }
+        } catch (Exception e) {
+            Log.d(TAG, "Error getting device serial:", e);
+        }
+        return serial;
+    }
+
+    public static String getWiFiMacAddress(Context context) {
+        WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
+        WifiInfo info = wifi.getConnectionInfo();
+        return info.getMacAddress();
+    }
+
+    public static String getEthernetMacAddress() {
+        String mac = "";
+        try {
+            Enumeration<NetworkInterface> localEnumeration = NetworkInterface.getNetworkInterfaces();
+            while (localEnumeration.hasMoreElements()) {
+                NetworkInterface localNetworkInterface = (NetworkInterface) localEnumeration.nextElement();
+                String interfaceName = localNetworkInterface.getDisplayName();
+
+                if (interfaceName == null) {
+                    continue;
+                }
+
+                if (interfaceName.equals("eth0")) {
+                    mac = bytesToMacAddress(localNetworkInterface.getHardwareAddress());
+                    if (mac != null && mac.startsWith("0:")) {
+                        mac = "0" + mac;
+                    }
+                    break;
+                }
+            }
+        } catch (SocketException e) {
+            e.printStackTrace();
+        }
+        return mac;
+    }
+
+    private static String bytesToMacAddress(byte[] mac) {
+        StringBuilder sb = new StringBuilder();
+        for (int i = 0; i < mac.length; i++) {
+            byte b = mac[i];
+            int value = 0;
+            if (b >= 0 && b <= 16) {
+                value = b;
+                sb.append("0" + Integer.toHexString(value));
+            } else if (b > 16) {
+                value = b;
+                sb.append(Integer.toHexString(value));
+            } else {
+                value = 256 + b;
+                sb.append(Integer.toHexString(value));
+            }
+            if (i != mac.length - 1) {
+                sb.append(":");
+            }
+        }
+        return sb.toString();
+    }
+
+    private static String getMD5(String input) {
+        return getMD5(input.getBytes());
+    }
+
+    private static String getMD5(byte[] input) {
+        return bytesToHexString(MD5(input));
+    }
+
+    private static String bytesToHexString(byte[] bytes) {
+        if (bytes == null) {
+            return null;
+        }
+        final String table = "0123456789abcdef";
+        final StringBuilder ret = new StringBuilder(2 * bytes.length);
+
+        for (final byte c : bytes) {
+            int b;
+            b = 0x0f & (c >> 4);
+            ret.append(table.charAt(b));
+            b = 0x0f & c;
+            ret.append(table.charAt(b));
+        }
+
+        return ret.toString();
+    }
+
+    private static byte[] MD5(byte[] input) {
+        MessageDigest md = null;
+        try {
+            md = MessageDigest.getInstance("MD5");
+        } catch (final NoSuchAlgorithmException e) {
+            Log.e(TAG, "Error getting MD5", e);
+        }
+        if (md != null) {
+            md.update(input);
+            return md.digest();
+        } else {
+            return null;
+        }
+    }
+}
diff --git a/core/res/res/color/chaozhuo_resolver_button_text_color.xml b/core/res/res/color/chaozhuo_resolver_button_text_color.xml
new file mode 100644
index 0000000..4782b30
--- /dev/null
+++ b/core/res/res/color/chaozhuo_resolver_button_text_color.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!-- Copyright (C) 2014 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_hovered="true" android:color="#3aa2ff" />
+    <item android:state_pressed="true" android:color="#0163ba" />
+    <item android:state_focused="true" android:color="#0163ba" />
+    <item android:state_enabled="false" android:color="#7f0e81e7" />
+    <item android:color="#0e81e7" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable-hdpi/arrow_lean14.png b/core/res/res/drawable-hdpi/arrow_lean14.png
new file mode 100644
index 0000000000000000000000000000000000000000..6c608a9f414344f31c8e0c6ba933c63cdd04f260
GIT binary patch
literal 1615
zcmeAS@N?(olHy`uVBq!ia0vp^S|H591|*LjJ{b+9BuiW)N`mv#O3D+9QW+dm@{>{(
zJaZG%Q-e|yQz{EjrrIztFsEgPM3hAM`dB6B=jtVb)aX^@765fKFxc2v6eK2Rr<N!r
zrKV@**($x?y<bToGsRXZ+|<{=x4=0yBh#a*C^fjsFC@7tJJ~Wt$=*)EroswnKyGSD
zqC!P(PF}H9g{>0UTq__OB&@Hb09I0xZL0)vRD^GUf^&XRs)DJWfo`&anSp|tp`M|!
ziMhGCj)IYap@F`Ek-njkuA#Y=v5}R5fdUjL0c|TvNwW%aaf8|g<k>1^l#~=$>Fbx5
zm+O@q>*W`v>l<2HT7t|lGSUUA&@HaaD@m--%_~-hnc$LIoLrPyP?DLSrvNfBF)6>a
z#8wIDQivCF3w(Xy2Imz+0}2>q`W1-<`i6Q2`nkCve}PpOmjtCEoPkw!aY$uBs(w&v
zaeir0GB7^Ulwq2IVTa!$kV2qqto(~IfsvA!<C33Tnwy$e;^|_m1eDQB$xN{_H8(JJ
zb279rayBwBvoJKYFgJ8_Hg`32bhL1`Fm*M8nSo8OrIDkvtC5q1qou2>p`ojZqocE_
zvx|k9o2$9AlcA{_Os{8NaY<rcaw^Q;OrX6`z2<oJS~(Y`CYIzEh2-bwz*0a!Mt(_t
zaYlZDf^)E`f^TASW*&$SiXMn>T~doO%TiO^it=+6z~O6^iN$_XS3>@V=uIIf%=Ced
z(FY|Cq{IRf0;WI^6Q1;e9C+qQ%>(9`B4F0gI<=3Tfq|*s)5S5Q;?|p+`QA#7GVBH0
zHz~bZP*rrD)zP1&vpUL2k+sm}Y2uF!(*sz(x;*jw%=$uEp6iitHNUNB{DFfno2!|%
z+63+tK9|2$7rcLBVRX8CdAixbM*Y|8tbX4Fg3>D`vEO@~XMXDOoar!E&-hK(vP|dj
zgzf#&Zzo@~xBTk0@WPwu35(8YK1rUS^dw-_lsDbSp4jSLS|W4m)5oYOUp~d&dRXbH
zBJ{<2cixs2*9)qAh5L_JpN(97)$ap??Dvlgyu$*-W}bhppLko!(&6d_Q8^O{o^KOo
z`lxZ<{-!v4Lgm#9p{vDu-4@&CEDYFDxZ2fsq22s^g>7-`=kL7ee&4}!e$LjYDh&~-
zj@F_#T2uBGge0{tIGgra{ib&Jnh>q;S{t1%#OReDeP=n<>u<x`<v{*n;S}|`e)alO
zy~;aOtnHM%Ln8!Vu%8e=5q_zQ<4$wV;~6Viw3+6%t})&qD|5l#=}+2?0*f~mVJu$9
z4ztP}F)!TNu%Bz%+yjSxG42dId5LdI(%y>bFGkHjx5Vlw-7HFAKc&5G!xvYhnM?G$
zH!UdJsDC2d`~9&+C!6|umU=LkgsEK-lJ0c*wV}~rLH^uEy_0Qxy|N6kfs9*^{Q6s`
z{bH3?hP>FkKkIwN&s8_=OE~@XleyrM+X4Q|FYgp}+{Jr!)zw!Q4UEN~+zi*6^4Bhy
zf9Ku0Q)!#Ud)*#S7Zs|@o|?Szh9&>1jSkC~$u68{8Bx=g;~?g`s?o-w&Uu#Ba@qL`
z{}t*Lb6Y-4&^;l4X=|%mk*rSa31z;}{~tdVbQK4%+&pl8R(X}=a=F)w`a6o-++8+{
zy;azhol_gNe~sAJ2L+dp_1Ku&{S0>rs}xIM*q=H3>&95?U{De7>FVdQ&MBb@0Dj71
AL;wH)

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-hdpi/arrow_lean23.png b/core/res/res/drawable-hdpi/arrow_lean23.png
new file mode 100644
index 0000000000000000000000000000000000000000..aed84253f546b17439b03ed7e8d34f16e4571370
GIT binary patch
literal 1615
zcmeAS@N?(olHy`uVBq!ia0vp^S|H591|*LjJ{b+9BuiW)N`mv#O3D+9QW+dm@{>{(
zJaZG%Q-e|yQz{EjrrIztFsEgPM3hAM`dB6B=jtVb)aX^@765fKFxc2v6eK2Rr<N!r
zrKV@**($x?y<bToGsRXZ+|<{=x4=0yBh#a*C^fjsFC@7tJJ~Wt$=*)EroswnKyGSD
zqC!P(PF}H9g{>0UTq__OB&@Hb09I0xZL0)vRD^GUf^&XRs)DJWfo`&anSp|tp`M|!
ziMhGCj)IYap@F`Ek-njkuA#Y=v5}R5fdUjL0c|TvNwW%aaf8|g<k>1^l#~=$>Fbx5
zm+O@q>*W`v>l<2HT7t|lGSUUA&@HaaD@m--%_~-hnc$LIoLrPyP?DLSrvNfBF)6>a
z#8wIDQivCF3w(Xy2Imz+0}2>q`W1-<`i6Q2`nkCve}PpOmjtCEoPkw!aY$uBs(w&v
zaeir0GB7^Ulwq2IVTa!$kV2qqto(~IfsvA!<C33Tnwy$e;^|_m1eDQB$xN{_H8(JJ
zb279rayBwBvoJKYFgJ8_Hg`32bhL1`Fm*M8nSo8OrIDkvtC5q5qou2>p`ojZqocE_
zvx|k9o2$9AlcA{_Os{8NaY<rcaw^Q;OrX8yrY=UtZf^MXS~(Y`CYIzEh2-bwz*0a!
zMt(_taYlZDf^)E`f^TASW*&$SiXMn>T~doO%TiO^it=+6z~O6^iN$_XS3>@V=uIIf
z%=Ced(FY|Cq{IRf0;WI^6Q1;e9C+qQ%>(9`B4E}?{eMG@fq|*s)5S5Q;?|p+2eYIc
zCD=dsWT{SBw&2->mU&ej3aZz&R63kE6nhUoFzmk&l%cP*_8R+z$?lGOW|W@@wRtjQ
z!q<Dwj)7AgW~Xdkcsu`;&Rm_lGb62y-3lJeFD*6xefrEgV{6B4x%y|EB4cJuG-^Mk
z$5_R#_+)p}|Gmd5pO?IvU;cNEW4S`^o#r^jrM#7A_p;47p%ZYw@9p|6k#<vcceU0}
z@mgwc&ZB+hqepr7qPX?nuVt=E+L*yzVqf?7%IW1?UH&`n<(S>?PSAX@Der~Q6H%4W
z)mKmPsm%2GwBX^&Eg7q?{(7SD>E|AgZnqNW!2S2_KRLNAzIdFmb=SAO6K47xGxPm?
z(9~LV1;?e@=FIjkrQLVmY4#pXHIbT|-T2G#P&NBhuczF$I;K*+{HGS$P5eE<cF)lp
ze#?u4)`r<1u8Vnj{W8l5kte(<vm5voc2Dp<!L1q~W;FY3m16RQP$PvSnm@cf3X(MT
z%s+PB=AM^R+lk3XjcqgpK3Ls!7k1>Fq?gHgLjBwV2e%EXn_Sm;3iEfVZz<auvuvZ$
zgnjc)Rs^`z3hv$*HDS>O1>U6_cLC{Ca}o849yT}5KP@^1<bK${z-r>63mn{1-AAV=
zFLk(UE^+3G{V6xE=3N`x5@k-gc(q=NIK64#sk&!nIgHmFAAkIzB*K;3b&k31@Iy(-
z#3$?dHb-p<(2zO2x&L7FBMBb1>0hh<%KkYgCCB&Ds#5T);;)43LJISw^BlrvXiL<e
z=09P6qI|{WD?8t0Oq@J>&blM>?>g2w<tgl+qW@&qDcux@IQ#TJff8lBl8);XzVBN2
z{mGN-YceG=1G~5EN!9*k?%i;CsaWTxr5}HGeco~^pOK9rL?h|0WLb0*sEGG;^>bP0
Hl+XkKuzY6h

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-hdpi/arrow_left_right.png b/core/res/res/drawable-hdpi/arrow_left_right.png
new file mode 100644
index 0000000000000000000000000000000000000000..fcf934651d95e8fa22222d1c25fb56419f69a9ec
GIT binary patch
literal 1690
zcmbVNeM}Q)7_XwkNpOq_6Gc3WOhnr272485VeMTj6^gVJEs98KuODE0^?FFbL3B>1
zGzvp;GMt+r8Z=5^GY&rxgG8``qA*Z&%%}@Q)KCObX0|I(w?B+acFEoQKJWYde$RJq
zcVfZ{&)M^5Qz#TqNh~5K*AVAB>jU!J+|;^`T>J=;l1Rd|M2-qaDFO|afdUevN{7l(
zl_qynD;h<ixM>XvC83nY^VFD;u5#+otwuA6rck0{tY(!u3nhRIRA(^psn5?}q5=jD
zpSp%6Wk}61syD>u;b>A`f<m2_rRHj=G0{Mjl}8d7Q9=b+jT=oCo|R9X;N_8f=P^hH
zCRB(lK6TP5r8E(MF&qV0bOue$U^4(VM2Et{IUG(Xz+^xSkii5YCJo~7!k9b;1DJZK
zq%~Zl<;fB8lr2)?Q}qO4=7C^NP7XaMjE><t5aM#VP7WrMMrzP3xh6torI{>&E(Qd(
zsBwdtFkmLY$*9V}vI#zw^mH-=qgg6_OKh@CC5lWLXjPd(h|U0wMrT|T+7?2N{^Q0w
zwJnNVGYZO43zm(m$$Dr5U0^bI?>FRBB)#FS!VP3mR2vaYooz%-gaqMJ$s4-Hpy9DN
zj4-hfieSP_20H?RA~=v3=7=DHAOenHiI^^qcVRhVZn%IYh6P*^0zsm1fdFQ~NCaCf
z;=n?PC3ayYCJUi5sZp0*18H{(D||1O2ji%Uz;FeIZFF@&q8=kKiykura1slUs?-LP
zQ+AeTGFk-14VzJo7{`pjM1FaOci3ma{}uNnR`Y*y29nNz&gS@6v$&4P4s>qcwmvDm
z9Ujy~P7F?tMge_a0EIIBngkIjtak?wZm@aF{CDc^*5Z}PEuvn}l#1mN$4Z9g!$G$t
z^N_xyt8R9siSl>SH5Uge7S!yhs_2<pGea=E>aTFUam~<+hRw&c_hmY5cGGum;I8)P
z+@h-%ZM)1z7;L}UzAWxms%%ZC&znBv%q7~7Cr*st26yy#aYv0s&AN-tgM}N6-D3^=
zw3@ag!ZTNpS=mwi#n6@N;LO8&YFpAGPxWK1nP);WYI}A?`OoR&`G}rI`*rAvD?f*3
zB{Ti!c>HkVxUB#lD0J)a`L#sgTXq0FwbCJ9PXz1<Wzy^kUi`)N!LqQFlNFKL5?lMh
z!S;CB^&|W=zoM%*;^iNW@6SrdP6RLAa<(`Bn$7;WZq^Q=?z7g0o}~*G_A{lOwtM=s
zy_hmF)VHXWp1F5^&>hagqjsdj9vfa3{~N|GAAeY9^9m}@Z~3}0a#ZR*;Lv@GUidV_
z-i+1mPK{gQy`VnznT#>-LP|*Kenm*ti#&eS?SbI!mw#`3I22`ej19gVzrm8O8ySC7
z*!?8g@#=#2Ze;)JlOxgJC&bX_&R%3r@vIKKC@C)qeB|Nqn`!j*{@iQZ*l48<__J#u
z0jUYHBXw;JRZSh8$sp(UlNQ<|x_I<Rv}Z_ZVX?>4py*z)srNcNYfot19ry8){L|&8
z{x;K?KA<wR;MkTkYoD?%kL0~c2E2aR{_<?`a`sQnYnd(7eS?ssXh4#FYk2-}>C6HR
zJe{s(mL;;wAKx=9_AlAnrgqQm{svH%r?ZA$yE{I9aBoQs7T1Zex26_<a;T2g8PGF#
z{bOON#{rL*Ua!LA@IM~Rq2@P6Ito^_1U)+c)gqoU?%Y9b`le~w$0hClvZh!)KBL{<
z)dSyed{8|+!=tQKe(Kq><fi)7ha8tyj*R);@wPka)2<H{DFW^M?(-GHYvZ5oI#+SJ
fKZg1`Y3npf{<g!_ebowI=ifpiN<dBv)4%*1K-!aH

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-hdpi/arrow_up_down.png b/core/res/res/drawable-hdpi/arrow_up_down.png
new file mode 100644
index 0000000000000000000000000000000000000000..e421df5f12ec4c31a646c8738c0ad007f12a7d80
GIT binary patch
literal 1697
zcmeAS@N?(olHy`uVBq!ia0vp^S|H591|*LjJ{b+9BuiW)N`mv#O3D+9QW+dm@{>{(
zJaZG%Q-e|yQz{EjrrIztFsEgPM3hAM`dB6B=jtVb)aX^@765fKFxc2v6eK2Rr<N!r
zrKV@**($x?y<bToGsRXZ+|<{=x4=0yBh#a*C^fjsFC@7tJJ~Wt$=*)EroswnKyGSD
zqC!P(PF}H9g{>0UTq__OB&@Hb09I0xZL0)vRD^GUf^&XRs)DJWfo`&anSp|tp`M|!
ziMhGCj)IYap@F`Ek-njkuA#Y=v5}R5fdUjL0c|TvNwW%aaf8|g<k>1^l#~=$>Fbx5
zm+O@q>*W`v>l<2HT7t|lGSUUA&@HaaD@m--%_~-hnc$LIoLrPyP?DLSrvNfBF)6>a
z#8wIDQivCF3w(Xy2Imz+0}2>q`W1-<`i6Q2`nkCve}PpOmjtCEoPkw!aY$uBs(w&v
zaeir0GB7^Ulwq2IVTa!$kV2qqto(~IfsvA!<C33Tnwy$e;^|_m1eDQB$xN{_H8(JJ
zb279rayBwBvoJKYFgJ8_Hg`32bhL1`Fm*M8nSo8OiK&s1qq(aiNUfovtBIwHnSrG%
zP|VWM(9zV{8K&1Wuec;JFF6%vZzj-Qs9sCFdaay`QWHz^i$e1Ab6_bTAS1sdzc?em
zK*2fKRKYhfIWrH$2SpFWw=StgnPsUdZbkXI3gGay%EV&7sT(1GL-eMQ6K48A$LNC+
z2U22z2?0|ehzU>nKn^_fq~-y0Oc5|^oC=yan}LDpqNj^vNX4x;GySuL9VL#H&vwzd
zs&<2IGDoAwf&ks71Rn>Ej_oq5+8em;eUjbtL-dc(-dC=ITylFnI&7s*UR6=KIOE!`
zuvt5Pn%f26)4jc8_FUgh-G}yln2=g_Z*F{A``qt0r%EPIiafDNC-Uf)nu!mRJ7SVO
zfB7F`{yW`qzH{}L-9H|1-}GtvIep>xH#vKn!j{EG+qVVmuXOl2;c3y#r9qn4a?ElM
zTJc$NO7gW=GI^^ARoyTT+tAlE%Q5TGhObqz9M=p3v`=VmSe@4#<>c2`$}W-{y=cO$
zM;~{{nZ3K#!xj?y_W+L*GdEka+w#cu*Q>if|BG~dYxAM9byJLn$UHNt-lYBa?S(vF
zmF@n$HR^4w-t_8YpHnA#9nUC`zAF4bIQv3qM(pjY6aGit7dO_@>{8-wKb)r^P~ovt
zIYa&zkF3$%1%4s^f3mbnc>cB>YqC^+b^i0O&F>b}&0b*pLYlX(@xE90ocU8eb6Y()
zo^y=pTK?w$48IOemn-4p@{Kf;S;43|WqDKKi(@@mhAOh$I&+l|XvW#TYOGoyw}Smu
zqZNDC+%(xL#;psPH`m$C@Bh8zeTd;(2kp-d=Qg$OYuRM>OWngU<Mvc>fsETvuKF(x
zN}TB7a-z%U#&hkwsELa-a*Sr$w6=)eoO`_M2IEuJKUsG3_g{WlVi$Grm16YTFvGci
z_g#Lwo(;9&+~p$nq)csc<(0hc_A?LW<>bt9I@I{?Xwt^t8T(mdi<rNpxGj8r!S;Zi
zS<~E>9=FB(7wW`sm1Mj5U(*n2%ab^mw)v*<goObavlX_Vkoa}C=6ed)>Q;><vH_LH
z`gs{Yc^fv_#cNHS_aLxjZPeN@hW*aV`l6rc-+40gr)uDCo%0_<pXf(K9Zzn0;}E~x
z@fPFP^BY(5o=Eg!+3t2OL^b=)wx*IQZqp{&iLG(VZrVJFs|%da&G2-4Zo}>60t@;V
i>};3!=I*g);$c{M*tyaE*)kJQrQzx7=d#Wzp$Py|uZZRV

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-hdpi/point_arrow_drag.png b/core/res/res/drawable-hdpi/point_arrow_drag.png
new file mode 100644
index 0000000000000000000000000000000000000000..823604a6a51ae19bb860a1d3907587200257b0c9
GIT binary patch
literal 2307
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
NEZ;!JIa>6-{{S(4$r1nn

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-hdpi/point_arrow_input.png b/core/res/res/drawable-hdpi/point_arrow_input.png
new file mode 100644
index 0000000000000000000000000000000000000000..e9fa13952dc340b6d1bea93a6bff46131bb66625
GIT binary patch
literal 1636
zcmbVMeNfY881LBK<Xbt%DS{&er}Kk0Nn6@x6evv#MO#bZCMr7(Z7RLmq%;8v4&2Zo
zOa-9|0|jp?2jaw!i3*DDR1WLp94da`2QugB7%C#n$z)rK;P!{NKbE`XeV_Mze!u5C
zMOsa)kLL_e4u|8Tio<m5I?wgGzsG*t&N`Q~O8}!tW)dkQlZD#|j?6%%5`fBruOf5=
zZpcn|5)mBEyGBz|GLx)cgz6~^7kBA!?G`JG=5QjS>{eWFCKw=<SY;xm;L{VQLBM2?
zf=h&INNtr9X{NXw8<Ci!Nz&(-^%4UZ6$wPxQI^0$FgRehtR`vHE(OPUQFiY-=7GSN
z3S*XnuboO(YXLcBBLE>63e!X35D*S?VZJ~l5-k7_2!?nN!h?}8ScLKs6oP>92V||;
z3`SIkDaUQGk`zp17%R%-Wo2b?v-n)fwu%Q!BoY?~f`qXeVRSah;Px<*4xM1Y2wHD5
zSs4>W0xm{8mC9hGAnWPt5G+=;`VBEjk0**v8PASec`z5^SuC!&#<XchNBrZ)Teaz=
zY%9Uj5j2%y)3fz3hE9Ol-2Jy9mm=#8y4Yr7i-NDlD1C;7AQ=@V1=$;}!DK*%B8aby
zfyIa%fx^WwEEd5^xkv%aWMa8ks6Zw--i8%nh*%6MWC|q)!LULg#$cI5DTIZXToHqW
z%O|iZl4fvHPfXY~v3AF?lK;e_avOm&lr4#(R!?+*HjQE^I*qad@<bt^#`PxBCA-S=
zI$DgdnKB83(neW;vHYT@x7ZgTG7%Ck<HOi^+;UieVUQe(!Gtl2a1l6;HT<8P@mObg
zuIBhxvrHVZ9q8J=X?<3BGdu*zPK=EmjidfSsT_{mRuv{ovUm3<Un;pA{XY3PKTuIr
z1p8@b*HlTP3!fcc>sI>L%GUJflLyY++&HIsAlMoXKXd<L;o?Bw)&TDhZeULCab-&_
znY$u)x1%8QX8ERtmn%NYzPN@$gZWp2dmf#7YCf^@*pZosszX|)Rb0&&z2LRy4mw@$
zFdG)`^lL5dtU&?qS5e!&#IsL^PVX;~_<Flf+FP0W?MLT^JmMPRkHN^oz|i7#(PaT`
zyYFdlABt{T)-^I388bVg8*I<4rv}|sBlfTQ?zc2<yYz6UXnO|$1^G7Rv^Fj+uNBVl
z*`LBSgOlXak|tgA(2K$w=Il?~@24LOHa9K1*IDi}{HVhCi(^V|wEf!S%%1L}qX}C|
z$(pr+<%9Kd=}2uzL;D?p->tsLUXNZlBzClCgSkyO_qY6tKh_Ua{?y|*Raw^G>2)Tc
z*SDNr*G)H`*5>l@0!?;haDk&O6&|R0I6CXaW=Owleiz2`0D1?X)?3y^4Q_Mh964Fh
zP~>?S=u1g>I7OB<?e6e$$K;#W6P1F{D!-1xyU?zUZQwuwe!IgsRCVF|9h$n>bm7*u
z9y6P&E7B2v&*pxGs?=!!=lhlXD(uqzd?4isgXZn)8dP5y^7_(kPwc%;Wzb8D^T8}^
z_@JgCX<pue>t3k?X&Z*8zDSH0982Nu&#3c${_@oiE#khVE9Oc+zd;?lMH#=V40FS*
z5i>SNZjG;9GLW`0s83sxx3_rC)Ozjt2X*UXzo{!oCaXjCy%SfqSa7W}-oMYUe1U?b
z`={+&bZ#(6bWY}ReNBVVaW>!QlP%|W(Bw{nsiC8e-%U_o)i-;8SmiJ>ZOzi+z_OE>
uf3|NLiTFJ}(!ca#Yr=sa`}w>xd0r5w)LBh-JVCy8{r6Q04b~X5GXHM~H+D4u

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-hdpi/point_arrow_link.png b/core/res/res/drawable-hdpi/point_arrow_link.png
new file mode 100644
index 0000000000000000000000000000000000000000..6408a01ac203f7f77fe80bba70131e70eeaa1d9c
GIT binary patch
literal 2150
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
F{{;*2ds+Yh

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/context_menu_window_bg.9.png b/core/res/res/drawable-mdpi/context_menu_window_bg.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..04194ff182cc8ae9cae6b7f9e2254ddc327a629e
GIT binary patch
literal 562
zcmV-20?qx2P)<h;3K|Lk000e1NJLTq001%o001rs1^@s6YAZ@n0005`Nkl<Zc-rlm
z&1%9x6h>qG4Hyh15Ntq^Vkt<}QbEzSdud;>bXmIStB5PXN9d;AN?fG(!WS6R5d#G?
zL+8S`b28^JnG4=nR{lx~%AcxAxugs!cZy^PrfOb^S{R12&1Ulw$MI*PNHGgDF&i`H
z5ec{3?Q5cFF&i_Uk|<F|`~Ch)RS{-mMzD(a_dvqt_c2ktaA#~mCdo=vG!m%@G6y1M
zN?jw7I+%Znu%V-ohy&&W5gRS7sgXz%%yw3UkIL0Z#09fdq@|HaOD4jXrlFxo1MErK
zgN=w0F(O99h!_zgVnmFH5&54Y6AeTrGLh{6k*NkE(>x*z4MY}sMDF7_{#I3j*_bhp
z$au9{y{Rg)Ua#MY@irr3$wWH7??2OmkKJyk%nX=Wn2Fhlv3pEJoT9WT1Ii<1NqJHv
zOE3+<C{9r<*<352Tu~ylxjE&b;LO1ifi1|)wJh1B(dXBTa)a^x1nq8CP^MrQfvF2d
zanfkXX1^Yeu7`yY9x}!yJ7>n&I|54&Y+h#eYsseZY<htO9UNt!a$QjRVCaJB0*vA`
z-jaPENo717VSop;@iFq8N%sxF;t3L!%*URiG7c8G=nzH51&eb^A}dqIk84<1N6#)I
z>Hak^l}|~CG9^LE7UYVE$RM(rGNnQ#isfki0IVtQj8Z*a^#A|>07*qoM6N<$g6o;|
AmjD0&

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_drag.png b/core/res/res/drawable-mdpi/point_arrow_drag.png
new file mode 100644
index 0000000000000000000000000000000000000000..abe5d461b82ce93fa42276d7035a02b0bb21ffb1
GIT binary patch
literal 1728
zcmbVNX;2eq7>-;rD3)=QT3|FJcmO5YO+qe=HpwOsAqoj9U@dHt1tLi{ZWa@e3W~=l
zTBLx8K)tX76)2V}gEkRGQCcXKf>z6+Rf|?FS_Bb`(+!91562(fnceSuzwdpX_nzGy
zxiZw<&C88MBDu@LAO*4d*k4x{;)}WW6%fk@xFiNwqKUW}#t@QFgQ^g+Ob;g^3Ix`q
zZEQi7l1Pq;+UOWOMjpXeqk0-_*P&VTMgmPDEnRLg!s-+RC##SotwBH;ICq{x)@lTl
zwZU>gZWJTQ+OTvCQKqkqR;Q<^c^b;{W#pw6K0%;IaF}e->kKBoML-$n<r91RF`Ysl
zSHV*RlnJL|<dI}CiXr4+8W5xg*Z`Rg(m*DQ!{K~LW&j{S2N-ma5d?DhOa>nS$deC+
zu!d<8`3gunX^W5qlw=$?^67N5*-SGtX(*ON2YEc6orA#$A~b?bX$Bm&1Q|@!DFz5J
zsWGh)*P;fpoe@@{sknebcsdb+-YA#9AvTyM6GfzqZh?(-kOt88dV5^s+9q6q{OiVB
zwN24!Mue_FOlT^mChCz$odOfNd$%FGBH;~x6{aPM0_z}DovKF+xC|0dh#Q(ltKkQ8
z0H#y~av5R<z~+J=mjg=090@2Ca>d+W31f=mZCJKg%!0%cp_mOYK~TaHiI_a8l*<%J
z7(yu<VohOX1``e&)X0=wEn#;O%X=r5FUAlUN3m!W)lGFkWHO4QrexGe7Au3va#*c3
z*kyZpCZdH9OuGruNHJ7T9?vgd`xg5E$OS-<!vZ*yaYG^zm%|V-*$hZ11c<mNu$upq
zGdkf6-QFDkX_l!Yq66*QH?2<yZ-xgk5EFwDqp?0r8AT#FJe5JhXv?kd*2E_(qI`xo
z^{iplJ|0LccCA_c?exm7c|(fG15v2xc0%qlcb9DmIWJirQrA;$i?bVtJWgIX6WVj~
zy+0BEnN3B%?>Tm`?tXWdp)dExeL3?v^jotsu8xiI4)>Q1ya);1kHp?+^>7j@|Mu;f
zmg~5<GiC32S4-A{M%Gg~lUfE-mlUqB-pA4sH5zD^lLK}_QM_}kGt;;G=FL<7ngS77
z@r`zozCefL&lkih%Qxrc{jpG%eu1jYSDkaLrgXNqx5uxGkI$sm9rf_17X8q+Q{?Nd
zQ!%%@G!lbr_VVrDT9S4A(0*N``;pBEa>Dz|{#OS2uEzoXMwLoL^UP`Yz#JYpyYRMW
zS4DsJb1b{OH{jumsAE^|=Cvg<7iNmWrW@zf8eM~0ZyX&No;y2tZ!2`wyDRDH;1k(b
z6;bl*Zk@`nJHm%vX4o{qytwPkkdTnn9U{11YSrxsZEkKhR99D9U!+^*=)-&W%1c``
zz3ww-K4-XhddzpJYHDh#>FVl|1mKkJ-rm=4uc*#G*E&bGT{se9imASSZp0QTujuwf
z5}31hXLv|9dL}ibFp9tM%WrZ1Ww5oc`DR1VN0fMe*(Z>{0O$II(~2G;?2@)qAMXzI
zV&9S7-g8;iupsC1MRv&(wymwov$}L{Tyc9xUtcDgmc~=n|5`R;i#Xk4eckzKeqM)D
zQPv|COv!t&HFHBQv(#-@)B4(>+8S{~^I5Y#wJve%m8`m~X&tjhGi+!7TAS+k{X^CH
zbh)*la7OhRf!Dray-o+El|xe7vu7J`4R1O?Wt-Oh<kx?s_ey2-2BCa~Mw9(~ptkVz
z>EGmo-XqRKTP~fk4!;_67=7e;{91*HUlwkt-|SL<De2OjSl!_JwQ*LlSiCAK0KNNc
zB(TtHU)+54#Vzl_cLu_X7M0t~J1Y-<ZgY%}2|BQDIKr<dyRLOl%o=^)qNmCkvEsn0
mxXOyr{MlGw+~Ltor+K6$C94mqPPSX@{}h>IB~&9y*!B;nE27r`

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_input.png b/core/res/res/drawable-mdpi/point_arrow_input.png
new file mode 100644
index 0000000000000000000000000000000000000000..2ebdbcfbe475bbfa1cbdf722e087c21c74a85d8e
GIT binary patch
literal 1280
zcmeAS@N?(olHy`uVBq!ia0vp^G9b*s1|*Ak?@s|zk|nMYCBgY=CFO}lsSJ)O`AMk?
zp1FzXsX?iUDV2pMQ*9U+nA0*tB1$5BeXNr6bM+EIYV;~{3xK*A7;Nk-3KEmEQ%e+*
zQqwc@Y?a>c-mj#PnPRIHZt82`Ti~3Uk?B!Ylp0*+7m{3+ootz+WN)WnQ(*-(AUCxn
zQK2F?C$HG5!d3}vt`(3C64qBz04piUwpD^SD#ABF!8yMuRl!uxKsVXI%s|1+P|wiV
z#N6CmN5ROz&_Lh7NZ-&%*U;R`*vQJjKmiJrfVLH-q*(>IxIyg#@@$ndN=gc>^!3Zj
z%k|2Q_413-^$jg8EkR}&8R-I5=oVMzl_XZ^<`pZ$OmImpPA<wUD9OyvQvjKmn3P{y
zVygsnDZ~r81-`y;gY$}^0R;>){ffi_eM3D1{oGuTzrd=COM+4n&cLd=IHa;5RX-@T
zIKQ+g85kdF$}r8qu)}W=NFmTQR{lkqz(`5Vami0E%}vcK@pQ3O0?O#6WTse|nj09q
zIT>0QIU5<6Sr{5xm>aq|o4Xo1I$Ahen7SIl%)qAC+{MVk!obzc)y>7g(9qSy!o|?h
z(#_P+)WzA=$;iwZrq?sCxFj(zITdDaCeU7}UQ@h!t(=Qe6HD@oLh|!-U@0IVBfliS
zI3vG6!8zDe!8b8EGY`ZEMGwTcE~!PCWvMA{Mftf3;PAD|#A3gRk)yehnWM3x3)J7v
zh9)j92F?afE~ZYdX68yzy(#2`nLf}l`k=&tlvrRwz!V5#!jnFb1J69EdB7Y~1k4(1
z>X_a!FfbZ;x;TbZ+<FsskgLf-AU9a)<At@075+NLKji<aJ=gjQJIBA4^7WP6m;3|+
zTeh8D6Fg&$X%|Z)Gyk;8$98Gr&(}@};;WNPGgWMPky9LNeE4AhV)2@LM}x!!nZ;UW
z6rDaM9^IzK6De@1G**(Ok!fA`dC~NOZ(&P$9IZVkndZr~Ei937XS^<PBGGqxlkfqV
z2e#I_rOyP-A9Bs=2|mx@-mvtc-;va{^)<dRjMWb79+ovQUoBDVa7sV0W7*;2|Bt^n
z?R`+sS(Ntj^t_V8zbD&nmA#k$?aA+bPSMqmWL{eMUgi~Z58Sdnx4QL!>9Yx|C97`<
zTwQ0f-fYV}$%L+wlafB0R*7s-z5e4@R(6s<8}BFXr@E(1H>vxzv&r7%C|F<85niNR
keacd{h~@up#XkZG49!V_p*BAvK;;{Qr>mdKI;Vst0DUpEO8@`>

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_lean14.png b/core/res/res/drawable-mdpi/point_arrow_lean14.png
new file mode 100644
index 0000000000000000000000000000000000000000..726b06d49a8614cead8424567cd25944f0c325bf
GIT binary patch
literal 1399
zcmeAS@N?(olHy`uVBq!ia0vp^G9b*s1|*Ak?@s|zk|nMYCBgY=CFO}lsSJ)O`AMk?
zp1FzXsX?iUDV2pMQ*9U+nA0*tB1$5BeXNr6bM+EIYV;~{3xK*A7;Nk-3KEmEQ%e+*
zQqwc@Y?a>c-mj#PnPRIHZt82`Ti~3Uk?B!Ylp0*+7m{3+ootz+WN)WnQ(*-(AUCxn
zQK2F?C$HG5!d3}vt`(3C64qBz04piUwpD^SD#ABF!8yMuRl!uxKsVXI%s|1+P|wiV
z#N6CmN5ROz&_Lh7NZ-&%*U;R`*vQJjKmiJrfVLH-q*(>IxIyg#@@$ndN=gc>^!3Zj
z%k|2Q_413-^$jg8EkR}&8R-I5=oVMzl_XZ^<`pZ$OmImpPA<wUD9OyvQvjKmn3P{y
zVygsnDZ~r81-`y;gY$}^0R;>){ffi_eM3D1{oGuTzrd=COM+4n&cLd=IHa;5RX-@T
zIKQ+g85kdF$}r8qu)}W=NFmTQR{lkqz(`5Vami0E%}vcK@pQ3O0?O#6WTse|nj09q
zIT>0QIU5<6Sr{5xm>aq|o4Xo1I$Ahen7SIl%)qAC+|<R$*v-|&(bCn`(9qSy(b3t|
z*~P-l&DGr5$<Wjdrq?sCxFj(zITdDaCeU7}UT3^|t(=Qe6HD@oLh|!-U@0IVBfliS
zI3vG6!8zDe!8b8EGY`ZEMGwTcE~!PCWvMA{Mftf3;PAD|#A3gxD<OYF^rny#X8J(K
z=z|gmQeuG#0aGA|2~YY!4m|Uu<^gj|5io01G9RA6z`(fN)5S5Q;?|RChTexAL>gwB
zU0ay2)|G>^Y|U(r$T>31?^v(%z5CbfAXxZnRj?wTm4$_sTJpCwWty!@9#PCqm(=FH
zUwS?0vEsr?k&Dg!*+zTbzq|W&uSd_uJ6i5`+h2WrUjD<nWx_LWHMt*g3+)aw&EEH?
zEpt|m(abpq^E-nggg67uBzW?y=bqEk>k5kS<TCY5-uK@4_O|m6BbmFV9D22ALyX?>
z&Ffxo+;ac@{Gj&*dPhvYRoRBEzPiujuz`)DXxZ+&)l(|xeP_trqc*kc+=h!8GCS8*
zCrcbNw2|(69FY=qQJ3|DnjFLL19Al(YN8yecU1THh9+>YnC!{w)Or7q()@|NTY@^a
z^UknHe<}8J%O#Djbx~`@4qIkdd#SqKG|7>PICqP`eu`F?k-kJs#G;G?PA}IeskVrA
z)%{@H!{mQ9t$59<SIbf(cPemP+Pa@-zC`Q8f(k?H%_=qRp+Ske@2+#Udhaq<>hxj{
zjfDY|roCF8&G7GfSw-Ol;mmqAxyHavt8}alUPym9ba{t_HcL%{&(6a)o32-eo>CWU
k-c+veEB^k{`Aj?vT2FQ^?_K=L6I2v>y85}Sb4q9e0J*^ObpQYW

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_lean23.png b/core/res/res/drawable-mdpi/point_arrow_lean23.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d8a04d24bd1893c48d6bdbb20332f0c1fefb3fc
GIT binary patch
literal 1392
zcmeAS@N?(olHy`uVBq!ia0vp^G9b*s1|*Ak?@s|zk|nMYCBgY=CFO}lsSJ)O`AMk?
zp1FzXsX?iUDV2pMQ*9U+nA0*tB1$5BeXNr6bM+EIYV;~{3xK*A7;Nk-3KEmEQ%e+*
zQqwc@Y?a>c-mj#PnPRIHZt82`Ti~3Uk?B!Ylp0*+7m{3+ootz+WN)WnQ(*-(AUCxn
zQK2F?C$HG5!d3}vt`(3C64qBz04piUwpD^SD#ABF!8yMuRl!uxKsVXI%s|1+P|wiV
z#N6CmN5ROz&_Lh7NZ-&%*U;R`*vQJjKmiJrfVLH-q*(>IxIyg#@@$ndN=gc>^!3Zj
z%k|2Q_413-^$jg8EkR}&8R-I5=oVMzl_XZ^<`pZ$OmImpPA<wUD9OyvQvjKmn3P{y
zVygsnDZ~r81-`y;gY$}^0R;>){ffi_eM3D1{oGuTzrd=COM+4n&cLd=IHa;5RX-@T
zIKQ+g85kdF$}r8qu)}W=NFmTQR{lkqz(`5Vami0E%}vcK@pQ3O0?O#6WTse|nj09q
zIT>0QIU5<6Sr{5xm>aq|o4Xo1I$Ahen7SIl%)qAC+|<R$*v-w*(bCn`(9qSy(b3t|
z*~P-l&DGr5$<Wjdrq?sCxFj(zITdDaCeU7}UIV;(t(=Qe6HD@oLh|!-U@0IVBfliS
zI3vG6!8zDe!8b8EGY`ZEMGwTcE~!PCWvMA{Mftf3;PAD|#A3gxD<OYF^rny#X8J(K
z=z|gmQeuG#0aGA|2~YY!4m|Uu<^gj|5io14YO$Woz`(e`)5S5Q;?|pKhTexAL>eZm
zbp&j<7R13>viYvdiAPT~c8JGV@A%En<alId_FS&Q3kMHg+$g)d{G1Sz;{+C_ri@AR
z-oIqcs=BzvlB<i~u5aI^n%ehI^#nN;4_Pf%T4VjMrggtJ$K!wo#>C?d-+7K|be-cp
ze1KcW!A@W2qlnkxhZ`PO-qZE=Y7L!th}S{7*G+uidtu+p5r?d<bH!e_b)LEIwfv;0
zwbMk+c5ptnu$w!5Yn1LI3qH@=r$c9`H-C%sUw)Z=%B^j+=Ur#0OZOiatFddcnCYWt
zemC#?jxRj*6J(jH57-qjlz81;%9@g!(7r8j@zs;9Efcbt*w%TU*!IG0`ip4?Lv>Vq
zCOtW2;@k9EXp`5)&jzz6z0~y$I2AfgdCf8>mq3xaO)`nKaWm#A#H3i-N1SL))QFg-
zx?<I?yRX0AQ~1hZ!)z?KUZOXrRny|K0*Btr{<%g@Hq#>fLo!~+?!TWuU9d|-<f#5_
zR`WM{7tU-kXJb0RI<Fx^bm5s34|{5keb?Y=oIW+}yKn1_b-q<mXTmKO*FT$j>i>Q3
dnIH8IFnn&_xw7(}P8+BU^mO%eS?83{1OQ=F?lS-Y

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_left_right.png b/core/res/res/drawable-mdpi/point_arrow_left_right.png
new file mode 100644
index 0000000000000000000000000000000000000000..203276595e7cfd7ce4640a275ea940f3d922d551
GIT binary patch
literal 1412
zcmeAS@N?(olHy`uVBq!ia0vp^G9b*s1|*Ak?@s|zk|nMYCBgY=CFO}lsSJ)O`AMk?
zp1FzXsX?iUDV2pMQ*9U+nA0*tB1$5BeXNr6bM+EIYV;~{3xK*A7;Nk-3KEmEQ%e+*
zQqwc@Y?a>c-mj#PnPRIHZt82`Ti~3Uk?B!Ylp0*+7m{3+ootz+WN)WnQ(*-(AUCxn
zQK2F?C$HG5!d3}vt`(3C64qBz04piUwpD^SD#ABF!8yMuRl!uxKsVXI%s|1+P|wiV
z#N6CmN5ROz&_Lh7NZ-&%*U;R`*vQJjKmiJrfVLH-q*(>IxIyg#@@$ndN=gc>^!3Zj
z%k|2Q_413-^$jg8EkR}&8R-I5=oVMzl_XZ^<`pZ$OmImpPA<wUD9OyvQvjKmn3P{y
zVygsnDZ~r81-`y;gY$}^0R;>){ffi_eM3D1{oGuTzrd=COM+4n&cLd=IHa;5RX-@T
zIKQ+g85kdF$}r8qu)}W=NFmTQR{lkqz(`5Vami0E%}vcK@pQ3O0?O#6WTse|nj09q
zIT>0QIU5<6Sr{5xm>aq|o4Xo1I$Ahen7SIl%)qAC(#6@>#m&OS(bCn~(9qSy(b3t|
z*~P-l&DGr5$<Wjdrq?sCxFj(zITdDaCeU7}UT3^|t(=Qe6HD@oLh|!-U@0IVBfliS
zI3vG6!8zDe!8b8EGY`ZEMGwTcE~!PCWvMA{Mftf3;PAD|#A3gxGa-LN^rny#X8J(K
z=z|gmQeuG#0aGA|2~YY!4m|Uu<^gj|5io1?IZrsnz`(f0)5S5Q;?|q6y<Ud{Byxjv
zwXz&Lx%gPq?;l#bB7jBxdS2@uN5vf$Wg2VsA82&EFfP%3dxgEAKy%5z78CpH#b3A#
zeP>OXw&(_TyZ7Yxb3WhIkKY#}=#=to=aklm^UY&sStYy9e9u|GccIm@IKB%{=VdAW
zlvz+LFD}A*_Vb?AQESz996yqB=qhL7mMv|wUhlfzme^5ar(bj5TyUCi;*3-s%O^p~
zmrPVPe9t`=t>VAygrfO1lL;#yS)5DV8ueG@43o*$+}j=5Qdc+WoHaQ+bMKSCb@s+G
zeB}}ERtT@V^7`xIxb@}BU;nzIx|D6}3eUG1heIDM2wE9aviq*PkcV4a{*JmyY(1*&
zF<AlKvm6gU$S7`LG|F0h`%2NyH%&FSUY5ue%q=aOd`u-du`Et&>bu!zpXDyTm=XM$
z-Ta2hC)M<DS+VY;o5NO@GJi6x6K{CSA|m0<xAV$`D9e?$R=1|Cx7^B;!?gQ=)qL9z
zEjzxqT-?U?hB^9x_6HsR=O@<n&RcqE%F=ri&QEn?K2piq7CBR+SNDPIv>+9}{LEEe
zf>J+~(oV7SxLYJ{{{OKuN<#0Sn%^Ef772!#mtLz)_14-8Di=Ln{an^LB{Ts50%ZPu

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_link.png b/core/res/res/drawable-mdpi/point_arrow_link.png
new file mode 100644
index 0000000000000000000000000000000000000000..6a6eee9e5ad2a95a49df27326fedc494d164bd51
GIT binary patch
literal 1747
zcmbVNYfuwc6pkRuLms8511he;s&ydQ&6|_}$!=0YfkKku4HA+CVn{Y_))JV~K~yZL
zSV2*WD1wZF15OKyz);6&E8>V1MXOW-m6ybd0=`hk=?1~}htnV3ncaKOz32PRd$uq#
z;&W$5FGmW6;w%k8WaPTi`r0odzqs?j0dnyq#Ib}NOCz$BI7$(!u~Zb0>XhlI3{|SL
zw{)Qa6pC${MiEQIhKKQ0n2x5j>d;I&1Bs?k0)k8irAmtuKq{K9(F>@L+b>W7jaopB
zVTXg^1{lrIgyi6;JSRe-%F(L))zqLsAi%^Y33Mo-1WdY2y^(JcP-l7h<lcHrrvkGo
zgjPU(=TvNXBmiSL3b1LQp9<uF00*K$Ocs~R^#vFp1kynU9b))FTt1V*2SH%&p_0~c
zbsArWNak#jl7N~)5C%S-o|TnF%VN?nJe>~t`}<ot7z{sB!_SzlCzK{Xz0qf$0YQx_
zTw@?Km>#e)DpRqogn&wV`Yr^WAw2v&vEDeBC^BVqlhQzkXdqpuv&J>6Z6svqKW=<b
z+o;GkpmZ5(#J1upvL0zZ^I$S}|82;sNP5Hn64#JLQD!2TYO4;_6H-J#C2weIjhfHq
zf=r1B;xS+b$l*Z{j|)j)t{4&uc`%PHX3TSZ2rJ|=VGdJ-h*^jTg2XHyB4mjrpb!zW
zK`xugp2te{Mnb7qq4Rb%q}@3z{GV7pjH5~d!xb2oIo|=185n^XGcW@H%h^D<Ql-&b
zWovofMT?-g<||Y!!7&{$n_s@>1NJ2dR{}v?7Ra588-`d20>YpOVT;5ZE_Dv8{y#aR
zlg`ks&GD~hnLi>s(7Ju!`lRrFcu+k#F*rFI+t6x|oH$!4B2<|An#+FEdI>!`(|`Yk
zvst^@eWQJYhde$<D#R}fb2i#_U4%b<RuUAvW*D&dF1jwi__XXEY*z=|>66<JS8s6G
z;U;=ZF=mwJvn=(6uU?tck~nP>UToV<hjXWgnwZn(ia#lNdu6=h_I`>@y|8CAI9E~`
zTHUsNZ+vgw+4x7Anx4FnwKguhV2@i}65Y@uoHu#Mzze&yg1X{t)Uho#>*E`4545)W
zfAnKhlTVRFUBj_3BdQ!4oelk8Cmk5*O^@|Hlge}fukj+Pgji&I|GG2XRe@E$HTv;A
zx64X=mpPd_l0(+IN74?}`4>;Q*!eEoEfl11?>&A2uY;Wmm<kUz+s#ez<mSW#&6h?i
zD)n4a;63>EZJ@d-E_TzV#rryao{u;0U*4GtWpFB3!-d}8bvDiDTK*Vu$iG;%Br!hT
zT^w9{uBAn((>afhjV&&UX>8(OEtJPD=eJG{4(9p!`d(hOuekWm$Vlzzq=%#3GW&&x
zZ*4|vW#jo{GoCE&>jfu&NTvcuo#6BbcOAmC)u)mhqPr5}I+D|4Vq&UKo$uGT23<oh
z)f;?HpW11Abho7;g;9<~l~-0i8i#|9yPwHVUg?r_HLXb>cG{*V;cn8>pB^6RYpy&P
zy0h}wu>pbGs{6eoc;U0|?(X)uYO0H_HE}}AuPoc1ty0<Q<t1Gwj^u(byW-NC^P+pT
zds<dcni2~nH9gx>>J*N9BsBq}!^6WB-cJH8o>z<}(@UdP`$a)xV`DyGpR0VjeO2rR
zkNlybp{r9<QweXrIZ@sh=^90k#M+K;|JE!x4_}Cmjt;#4!gy<U+rx8J=gTD>e+7>x
zW^yXl*~`lhH#>|@&zNf-EuGn6>95CEoAXF{;plazhUuT5Tg+y2*2$YQ5&2PG-z#!E
zH{u%Z(*;+GbHb#^*eBOZWOqC*t`<>fpTO1ZFcNz3<3ZO0wF|;Ezn116-POB`@gm5h
z<H401u6d)5uLFj<_D@J}B&_LAa;`JCyjh+?`E329s5J7ioAoy%6-OYAqLlo<0g$Gt
A00000

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-mdpi/point_arrow_up_down.png b/core/res/res/drawable-mdpi/point_arrow_up_down.png
new file mode 100644
index 0000000000000000000000000000000000000000..95dcf53377f2d3c9a99850fdae9c0fbae2163d63
GIT binary patch
literal 1463
zcmbVMdrZ`J9Iq@QW8iLqWkAR%g(=C7>*L;)6YD+34G-`DWhS7#yTTQ&?b(*yLB@Qb
z5~GC8ICVn^uxtx|Fi}w^K3Kr931eenk0@^FAL;-%+)!eIOV$F%_6KpvnzX;y=kxhK
ze?6F&^ICLdLL>kH(e^BhQyLTHHzHj6^3mf*r6FFl7K!;>sTd%63Lre3ivsNoSw=Z2
z(o?nb8kGS6&y>;yMPiX-6Yl016)9s>LB=n!0U#qY=qKG3lnA=0GMY6((-(UokoK6M
zty%}-@S7<womI_K`PDfE?&=D+(F0|!2Qz}WB*0K22?iM-E8syBG_Q+Gb9ozvz<G#R
zVS*N%Dstq3W{#&otqMtZBRT}sp(<3Z(d+d}5JOM|Mlcw~(osFG#&84y7avHn#(PR}
zr^U8tOIn#AuPFL)7!Cvis(@O>@ntY-G#X_M3`>^~=|UANlEHLVNC_!eD8bFsev#%_
zP*x;eT%~A&Bu^JYVEhipk}xYQCQ3>f93=fPszP9fk>i?23!;<y$BkvtLP3?Ef}NDW
zRq}4B9;GQEvXr~08<K&NH+U{jOGP1l7S3JCP^@UTm>}sy<)J;eR*$G{8&Lyh#t@wW
zMGbn?X4YF#f-sm3S}PXPSdOdFVi=*f>SQd6S~W(C4l!D#JtK+|TC+LCwX=dqvTiD5
zmzL}<a<xz8;%1&AMUF4vIA5p(^1PhL30}?*n)9`wgLKoZyq3$e5Uqvc={G5ljprC}
zKEF7<jD4-`zv5otdj3z&V96O+ZjOI7OK3~#KzX{<`qE<Q@=&aFV|eLmj2IhU0)Q3w
z>=vRRc;o)D%h~-K;s%6mnL4!GdX%+p_NS?uet!M)VsGn*`K|e<v(+!Iop4<&RJ7G*
z6FsxAx0_{kg^DkxHL2*8Q#apRZ5QfW4G;I%r3Q}A-TCFFDRA{Xvu9<pB?1edD@9*9
zY#dk}Rez$*@mb=YW`cUWvf;{~Uu%?N@i^u<d*qtO_r@`1=*-}QZz8$zn(*g4f10w!
zN6it*u|o%lnicWN#^G7=QeNf;SKL5*j873cajZ7%K>4{FC7+C5I71_f=L!qq?2nwW
zgCAGzzUsdH?Vi4t$`Pom<E*Y1jyckzo?X39{o{jek4uL7!fN)GoU{Rd*rqfi0malv
zThpXrSK?$Ljy0YCORW%G&f#_6_l`zA*<R5ItlhBd%iZMN=sPcryx(~4yPo~v@LcNg
zp$i`bP8W5x4)5G?w<B$k?H(&U*%Hy;v$0iiTg$<>l-`u4oTRR?-x`UuzE0)K4b%NI
z3El&%ex(@iSKEImf3#(^>(E>4b8mUyRaiH_liJ?AY0ax0Tc+NQotb@7_i*Sqv97&f
zvh%vHM4wPUQ>0u&T-RlZGoH-3<XTsqA!aL)t?9^ZS=G~c;?gRz*$s`MB@?FXq~B|k
tSfm?FNqqEd)4}^G(Wgu!^uElnC?L5w?%w6YkWc=V+O0X3PdDz^`!^1k5bOW|

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_back_hover.9.png b/core/res/res/drawable-xhdpi/window_frame_back_hover.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..5bfb04721d06d29605a6c84b48592a84c3bd4f14
GIT binary patch
literal 1596
zcmaJ>eM}Q)7(bP7Wt*BYWgA=$a5`=8qwV$DQAgWr1!Iw67r~j$>)llf^zM3hN=wur
z43!W?ql=nNm$^Bj2F)-I2~%L`BBGlcL4qHXkKva1)#)4}y6p<o`3LcmyZ3qD_xb&v
z@2kqmUKAgf7zY4Ad{!oztE`0b+GC=W@7|-!k15M+*_J0S<K1!zC9;5-;ax14<)v1$
zxh%y5eC=#H08A<LIP>H@#}XsWd(~7(NA33t3K{^?-}MU=UBt?ui(T#EOwhfiW(f2!
zCTO|Nfj9&!Tj0qo71?E_*-pB&h&C|Ly9>c|zfmFZvN8qwy~Uhl^qZhjUZWz1j$sHK
zRgsHK(3n$sjvUa+i!7*9BPtrf5fDe!s79;T>lc6+f+8@2!6>Fe^+pY5L=bTNffQ>Z
z<2L4!_HkRv&IA?6vS5Val9Cd2iAK$ft6|h&FoZZTOr>b3qyQ&VeibLBgc(RyqD7A&
zdw32EF;XsmjckGxPsc*=3J%9JVon-Ql#(*oPYE!pMqsZu6xXP>B<HgKyD_1*<O~Qb
zoXbl58j)7&;Z6yImE679P)Jen#<*1UC`F-)NuFNgWjQ&EG(pOZn(;73N{eAMqj#%Z
z7=oy@1`V#F7@SrSG=uBiT8ctxB+N4r9=B+%W}L9$xIu@aHk}zGQ4-PH2|Y$=P|^^_
zW^s~CaWosY?NMxxW62j{jaHGRWL|Xgd~vu7ate5vmkM|Rv@X+u4vO}0p?#=CV-b_A
z=vm7$c9Hjjqd7KuCa{m<78{CMFpU{QZ~{dM!itl64WZNH7QNZ3gT}GU1bNfxNrTpE
z)9Va&%UIl6(yAj+l0eKF3rRq*;tU*WkmnjEe57<?NPO1*%I4Vsv79nBqB0&^O7lAb
zU~)kgX?FUr+`iJ>;iG0n2dj6P>%n|xXS=KZ(adT1@h(>|C2e?bGF#s>?L1g<7Mxd+
z8r2Tvr!InK@A5bOc-8Qx=~P8u;Pbm9jYq4B`a0KN8+vHk7WdEPsSD@7`ee!aC#FBE
zPe+)6qz(q#m`K2rXKXKvNChXwW@e0uz4syy7evNB%8%b{4Gyn+B_?9k@t$Dh8(Zz$
zFS`5IHnsK%W!bfDFALb-j5#|u{{CRz(1L`i$t}a{UOMEAORCv?O=`N{J2cW0txlMl
znL0ygzA?DJW3ZgTViUJ+^7a;<cw8<S_w^q<+*R1~tF8N%?#zJCXWenWPsmX39)VBt
zkzB(ETS!Pa_2J<D>)dNT<GyWoB%$G|S({kdF$fJ6<FD^poObEf!{X$>{NGl#QAARW
z_*3Bt%NIF7MQh97sS5q+-V5&ICq?_0JD$E**HzfMp?UX>lsMm(-&_g%F1qg*T}!Jz
zd%zzM(c*zemG9I#{dXUZtl#j<$1Ca*W|r3{ZjI7@>e$eqi_D5R);)6hNcXKvT*ENX
z|Mm|qH0V#~pRTBjy3XycX{pZq%!JOHdt^nO<yiMX%Fnc=<*TwPbN(lbBcm!NB{wVx
z?rAww)^2X>y!jx2c1gaaQ9Fp0ba@UmePL2fPqd2?Gg9Zo9zwcmJ3V`{Yj02a1~K=Z
z+f-#S#Pr^i8&}>}5IZC0#0~zj>73YjAv*X`+tBd3o6&R6zLl;P23p^bue98F9O(ad
zMmhLhS=)iy_}FtXLEHRrIiIU6NT-?ZbQB$4{&e~(;9z9u_b0#Zs}23nvuxSqQOm0G
F{{X-%R$>4E

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_back_normal.9.png b/core/res/res/drawable-xhdpi/window_frame_back_normal.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..e430e505c4106195c18a777ad2d00c21cad36e67
GIT binary patch
literal 1528
zcmaJ>3ry5z950G5d_}j#7cO0yGP8U1ad+)?oUV5TM7i?@xA6#5O51}9z1Fte1Exbq
zd?t#TxtxiMk4&a8wk4S9n2*gwd?#i)CtHRHY|bGVXXYTotp}W27Gjh3`+wi}|NZ{&
zZt;3DrzXu!0svrY)>1l0UkUxqm^fblMw{|J)t5P1dcKw``Lz(E@Bqb0B|MlVGNpVD
z&v2177x**)7`s~V<!kxwY?75k6BE-hg+*CM13=o6u*|UKyatx=r9!{~^|hRaK!I~W
zc~&><mR)?Au(V3ybE`Z)wyK=9bI_8-U|N{e2}E9Fz_3^mP|2_Z8sa5&Id*J@z#$c_
z+yM<cmGAa~E=l1*s|hx;unh)nhzY?gIF1`Y6h>e(jG7VDh~OlKk}wR8Jdkcp;rwI{
zoiSod-#MT%O_NEpITQ++LYPTXO3jGfZjW)Gs8QE2s*!-kgpC0;CC)(eDys;xCP)D=
z#>kXNm6`+6Jsl1~l-=&9!~u0AQF_YEVMaD1CfF>BvABk`RV|1A*NsuNRbNEr%{ja(
zRVu7r4}VG=tmp38hGL4kH{=RM(2K%U&=OlI@&PT2c0l@#i4!=Iv7ji+;eKNY3d2T=
z9kUr3&c+%Emb2l03&S8R9OoGgZ-G%X9fqAYo85{a=~fD*5gNub2plCagto`ASpijJ
z0xTc5E$FsKu+%fLq)Xu$O;UW4R1xn2Z<(Y?YMCU1u3RhVW>_H*+s8^Y95Kx+LXhV&
z6iEb!a!d-N*hg&6bOdpt7=^+%0znAEWutM7u;Ml+PPwem2$mZqZ&sYPTU_b5)t=!T
zj@v@JtOP<6Foij30y68)m}3p{pN5Ga>0KBTpSHigc{)IRK%W{#ACE`VSKa}DF)wG)
zlrP-Y^ZnPEG?hHz!Q(c%{!PPjS}VM>4_a29(z4Z1c_g=fsdiNTA~2Y+h3wrr^NnS{
z*6r~u*9uDt_H6bvxK_3wX@7`8{4Wk{aNS>*2OMpSuY48l@2*}oqw4hJ_HC(89#wDr
zuw_OtvV9XU?v>XQlDsuzp5H$#K6rP`+tVMvHqc9)vP|3%nNoc|udCu%;ad6U`H4-N
z57cHu6Lywgtw7IoPx_#^J2kcDOgEhTQgwcR@(K1~_26c?bGE7OWaB&TzEzjHO!qQt
z<}E1N_5Q2p7o8=3Z%vdFHeyplI}CIU)<QFvijPx=^9$xrD7d|{aq->t^A7VD*6e6D
z9Qr02rEXup72K3u+&%Y7QOdoBz3oiVUfI=Hl<5KTLLH_r4|L3JHgukuW528RsM};~
z>HuX}Q8{?=vt8u%S)IKLXYL!IuK2O+`fu0%Nu0a5`{R=xx5VsIpLopI++0C}$OdnA
z?xmh<tu1_E)A@scl#T1_Y`W2!=sLQ+BQbjOMdR2=v7@eT^=|u(;CG>}nRWbc>!(CM
z64R1S09~IS3tbC(TfO_IZRq=P!R^w<-i6K4p8BgLbj!rc9Xn*9^6aI$MNa>z6Zd_M
zMF-oIwdY{>zHz7T_xzyE8l2Q0=|4Q}(ELTEHMPFu1~F~*TX~L2lYgS}2B?H{2~+s-
q|F4N&o@PVa-?xIt8Xhl6oDDo#9$k0b+w)%RU!0Zhp_`n=8~y>$t1>kJ

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_back_pushed.9.png b/core/res/res/drawable-xhdpi/window_frame_back_pushed.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..e0e35748e8dcb37a89cc57d385e1a49febc3d89a
GIT binary patch
literal 1595
zcmaJ>4NMbf7;aHJBoK`-K-lW-tQ)%i++EwdUPFbp*V-<WvC=6qE_&QuOM&*v^@LJE
zt<ESeMqpc%Fn?lHre^3g8u4fTR3pwfW*jq97iGz04pEFhOvJe>P`6~nOYXk!eZTj4
z-rw&UiVEkYBxNOuM4}YCjc^L9PI#?}65-p@zF@zwOy?~nd@<|hYe<d}8ELkZ0qj1~
z!#Ej|uC2Pr<cdTS%Dt`<zQj?Wr&ynojM*qdzJP!hiE{Ho0g|d<c%YQ=c>M<O!SPcd
z;H3@V0<8mb1k6mC*B0iO;&7ph3Rh4#4d%@SazlE7z{l_;5b{;}gZhvG9O2aq`<Pk<
z0wX4Tg#jE5s>D$Qm|2biv`R=pK_~>Euo6~lFbtCe2n0ha2vNa^0><=eL=Qp0*aHgQ
zINGgu64o(af@A>8cs`(4scLF!lr?H4%Xw5Vj^i;71W^bUieRmuCqoK<aAur=V1g9q
z4e(yp55ySBQg$hC0EI|LQ}6{Gj#tF~;8>xAlBq&uKm{uymCqN;Ys5OpJDGpO7}q-J
zstqtIClh3sa+J^y_slq0sNL%w#SDdL^dE9wp($h~!BR_ojGwm?22eOr(q39mY7m5?
zF}I==fgptjSECA&Mk$4kqEXDPAxW5m;ymNwQIp1OL~#T~aV-p6v_^!02?(?5Fhr+@
z2|SLq`-42`r<k~Jui$$O3%?etH**Zhvz&`%E8|m8RL1gbu#61==3*`2AStguCdXPd
znlZs}-fD)na;y&+sj=QWj(-?6Szy?NsEr7O>R?!>Gou8i)@d=+gc;3Ra12Y2Q#UO}
z;2N_9)8basXx<vatkuDU4l=4ugbq{*!Kh*b@}Gf;tAr_xZC{PQAiTOjj9<7loNzsU
zo?V?U5+!)-gwYkce((CJzN)IUHwJ>UR?|&%V=^+mQnDg)CU40B_)_UWt4vTMza-0%
z%;aWyb8@p0u{mv$2DW!@*U3-nmr0_7wL^7VgQ%x!alL<ASM7>p3B!9c>gFd5w+{V<
zKQu1xdy*BBw_cXaxqTwhmY*=KapgoAAf7zBeW@zi{-*4<N1L_b^n*b&l=<mpcQhlA
zD>d(Nt-8@KSsN7}`&F5D`Yu1`x2;`mH`Of#b)w!!cv{k=P_C5g`kjk(^-?pAmdJrk
zm(ILczG+!uTk4K0IbU~|ABpVi{xkcBo<P1leZmH7^r><^cBiGldb4Qf!5jUJHrd}v
z_vb}!^rt)bq%GRNpu=-`q2;Uj`<Ul%-R!S!ENtuHIyw!Xod?@@7q(H)w_iA<kZz1V
z41KZ8eQ0{~McE%u!bjd~xqA0;ibs=mzFU)-d~aiUe|7fL=O>4=KU!y&WgN<p-f{LQ
z8+3Jsj?5!f!)Lb?&&eH>tQO~aO}m_tYkl>7+Ez!|;f2HJcI5*i>Bin~u9a!FU%fjZ
zKKF6*+UV`-<F|&Mgx?OIl+K7`G&R|Xf~4>Fc9;M7VDOpk@#d+}>?Nf|^A9gv(-Y{t
z@Z}_F>gG%c&#Af2b;x&zmG|kX4N>j8iL<5^zn~Fv#=12Z#Z8-KJI}fn%hO4;_1h`u
z&Q6Tj6H?c3Q#*Sf9ayA%cJ%WzvPgpoKlaW+=bi!a@YR9(x!azJKX^F1_44}cDedJs
zX+u|DrY^s=<;2S9j{PZ<I}-;i@Bgo-LVKxM_5GJB_GWxHF;kS9{!@y@GVf^YcW$>7
K678lXtNsCn3QIx&

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_back_u.9.png b/core/res/res/drawable-xhdpi/window_frame_back_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..32e8429549279e8562cf775da0102d9f359653b0
GIT binary patch
literal 1457
zcmaJ>eN5D57_V@OkRidaMcrI#B{-vZ*Y@t(YxTst>me6*d>lmCB$3kgpkUjhSI2R2
zi^6nUrg)fT8xA+r;S>|tOy)$V;`l?{<_2a4hm$#jA7m(ynaNz#y$2lQ4`P$P@B6%c
ze!u6t@8xE%OH5dl06|cqJCpH(-3s1}xpTnU(7K@wYzsA4p_Z@sv?^8=AUm&=2(VjX
zO9ijM^3|0Wh1C!gTP_w9YK5LxX-<(0Y(&Qpl>7h<L95e)ewM2cG`K`46=fSTeEJ*$
zi@XilVDX?Hzf&j^GefG7AIdJ^LKPgvBk614)j=8%NP@<~L20ubpo2DKoR<dY$h8rH
z$5pfn8#3Wkp(hu1Dyjfm45*$%2^1zU17<RlB)JmCQ4BSrxDmtk7)hIO8b#sB2LaYp
z-bZ_xj7eKSvLR)f=BJIus;VkOmC2x}rACaRs0as+>w$(oP%Ue0P%j6TMj03(z^S5N
z6BQYbFtR1e7R`nLPbWf<{2tE~u^gC86iAsd$oh?#0X0feB(8DofaVqccVkBFKtZ)%
zFnWc6vPI=UJ$y@}V350K8;U3bZ|EFV1Vv#tGYYpw5@gNI*bwl=z>7T1nsJ=tNuRz1
zM^U|*G7)-~Cpf*8;|bDdW?76wqdYU=35VHfCn$m-C<}(UEOwm17?jMglDO4`F;o=m
zmIE3qb3)X%2y9PcEziW#PE}wvMJ-U2&CxE%EmJflP^S1{XTAmYu$(AI<VcAoB4z|t
zd_&+fR7HZvb4-gf*vANm3&R|^$&RCh6~nAnC&7>=tA!*Sq}^#jCb9esd9#oVWp=tq
z3zgxRh}+CKEmn-NqIQ#mu_8v`j4{$6(;6mv1-dYDoN9j{Obw7AgQ-!$c*xTEI0%|`
z-Obnwf_+1M*Ro>lDRV}?{^a`6FIVNgtxF!*`}~!sIjtp2Y!4RLTueCSw)fY+6Zh}v
zyqQ(=edF2KcX~$I$CaAzr*gyC?$oi312umzIm4#-p$vTff~1)E)bQGA%hP4up{v7p
zFYK)BL7(fzJ_v8>di_vO(DK(}ot)@gNYynu?tlCmzinf3<Jo&-a?ISKS)G-)_vLi0
z8s6TaXRWTfmcdef@$cu9HXv)~&vf0qJQ_L_C%@d;u<{krTz|!W<57Z6p4VAD=gx`R
zxhHel_LO&A%Dk2K%Yzq><C#U9wso|hxfeqnJ-pG|p466ft>f0|8-3pPs}3@c$v$@H
zs~dgm`<iP)za<y_z@)#s=ZjTuU20kW&9Jmj4CXC=m^J#QFO)QLu(|HZ3;%>0uEnXn
zy4;rF?yWz5t3d-Nb|f6`S}~ZSy%f`a%a$8%bsovO&~!*Qu=C+s`zh&Q+J5IEx!Jb2
zwO?s+tZ%OE?!v>z`eSDg&g-q$=07?$uYJgtyJW@Xyt}m>@!|K=?qAGYmh3J)P=6r4
z3FeM|zGmy4OVI2=|3}A1PPX*xc70m=lt}H4EB-EFekQzKH+^X;t$*_8&*d9F`!~55
Y>P*{J_2H5J$C00?+m+3<I*M!l1N1W#rT_o{

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_bk.9.png b/core/res/res/drawable-xhdpi/window_frame_bk.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..61b08f273259e348fa714f5d2867e98f6af729fd
GIT binary patch
literal 4133
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_bk_u.9.png b/core/res/res/drawable-xhdpi/window_frame_bk_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..29c6c667cb87aef801776232ff0c14aba39e5166
GIT binary patch
literal 2601
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_close_hover.9.png b/core/res/res/drawable-xhdpi/window_frame_close_hover.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..699d99d6b0491921358e948bd52f7bbb6caa593b
GIT binary patch
literal 1544
zcmaJ>4NMbf7_K6M5VH-P8I3dNX~tx>_tV}_&sHhD*4Ehyr3z-#dE8y0VteQHumzXR
zKcYZj8qEwtW3q`dU0^ylNmP`fsLQ59w>VKpA^t3M6Pz2Exah7xbxVks-1mL&cklDO
z|5usgS~xjHouX2yCOho3TiHqFwIxqf*1D$rW@Ss4tp#$P;FUv+#H-AlP{;!gKU2iJ
zd4?-ndyzM)R0*qno&veRxtL-Fzm|#VXv2O{L90~81!0k4OL!S5<coX(6WD*^Gzj=O
z6PS-VVW()}i+%QTiO(x{dD!w2*1&-a<^#qsr4aaenE}H7HGv=%Hi5&ulyZ(;Lm)7$
zBA1xJ5vK~AIe<lwcmUJF8WzT307tZlPEQcTTmXd;7=lp<K{W_L=}-!Wfzbz4tVx`g
za?`d^TZ&`?i)C4)ASe_HX+t`#AQeG~!C;7Spr}UC&;-i@G85JWg0tcbG#_LopD6o;
z01#tj3WZYH1S+16gy0vQ&S%7d;Ao<hltE!egb*zZ`TeoDhP8vTn}6=cnA$;4naD$K
zJ}8t*tWpo}tT<T7-HQ#y6cul%C6Z4m3bTe5*it_qkR7xMRK93AA4f5I6lFQWt0_cb
zSfe-Sa1F!ZtcGMcobc)y24Uei&scaXhS|(|499T;h9FkVjM4}V6E>1SNgYBP;#fx@
zC^G?;kK6VswnwoF_yt(XBJqqYNFG606YqkYVnG&y#exV}@-V>3u)aV{j+JO6Vw#tH
z>v+y434UNW$CPgj`v{(GMUZS%XGUS1L=cj+;54BlF#^vf%oYqB#d2fh4I^lS-eM&%
zgDra`Zar<mNQ5R~vo4z^K}c~1iZ#f88YX_FbYblHto;??*#PkYWojg4JRW~pM5$Ec
z^$yzX33vV8b>!{#tf><R`nBqY&D(a`*A76Ul$Mck>noDnwwVmg-D}-LpEc7r_awGm
z%$-i3yWZC3IQ#jkuDjna{cP9lMXRsOiw<?{nlThTwSK797BNjdTCt(-f^mr{cj=Jv
zFLqb$M>9L`nSqTH((KQd$kW7>CPh?NZ|r{mdfnc0XL`Y(u1--WCFNYce5*!BB!&3I
z%;X<`xn+(1dF7v!sv}5CNy+xSJkjfgJ%_*E$3LmKcdw_ZIibD%<%YD0`T2j?a}i2?
z>Hb^e&OQoz_jjDjDqlS3hlI_K*B{ersm}E6l`XJ(>(-vg#@DSK-M`wReVMgiEIVyI
z&^tKPNi8_uScTUQ9RH^GLS?1rcBtj<^}34l^p=yYE?eKJ)yccN4UIeM>o3|*Wmxu4
zn*QnhWB1E4cXxi9^4qdZ@xZ}(GolZXIV-9=?mX>xcP&z%dG*?%2EZAqidrq47~J`2
zhwGa09c0#-b>`(OUH%7MKbLa1h4EJp@kvMD{h+zYl=a=ph<f3|<bY5E@IB;;9G7cA
zJ#EGm`*Koy=;PLXRdVXhokufTF5fq%&&kM0wLD2_6ng7!H1FHq({N24iCl4qwuZNy
zJW)M!Z$)CY``F6<R!irFnwr<#WUVRdL*b>q2e0(qNqln2H8>beNH4|P+7muGcyL<x
z8*@`z58ISd3{Gfl+4R36#me>QJXn6?_<O?Nz0M8eR0X-Iop1I(oD};vJFG6cDSOqX
Fe*p;BKVSd=

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_close_normal.9.png b/core/res/res/drawable-xhdpi/window_frame_close_normal.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..ca28aa53ff64eda2adf0481c2576a14dc4792dcc
GIT binary patch
literal 1481
zcmaJ>eM}Q~7_K6q3?vf}rVuU%8<MT<-L=>2RXQlWQkqd@rG$@R;`QzdC$x87589HT
zLV~D(;}7@2k`dIIY||j>2xDd&7&lN8aSIzm3ELQ9xM?PtvcZh*3Y3|Jc**^~?tPy3
zeV_OJ-I0QPb5z8(2$@V4WyvLM(yW!<oQ+}9*wI~lPMTg2O(kL>=M=r9z{m_V=U@Pf
zi>zR53`zU<U1c(4vXH&3y+kar=IJQTr62<~3ZILY&@x#@rjIA7Dn<kxOa<%KgMVE5
z5(HRU4;G_V$jTd;N;bDnU<&K<?NnVAh0|c>t3ZZNClR<9kpz6MYPUz{(}PRAI%yp^
zR)WBiiCCovmxC&?763+0U;tDB$tg$!0UB5VtJD~Vy#gQ*3@IT*2_teC)2R?01OY1#
zD0vfTr_M&?toV|4dazOyd7V<}^?DUvm4Xv0lrWCt0S*L_OBQmE-z}0px!aQxWFQz1
zC9u56a&92NNIJM0Q4dOyE~nt)t=3gyw`WBtNiwC6<dv`jQo3A$yq2szqK)}4j5V!2
zc0bQ3ZH$Mj5h$r1&Xgcn((c)g0)|pFx?KV*6@{!OII70QxJ3)02c<6xnx%E58bK%;
zbIKhE1j*I7N+Ty}4JFr7v<7pkNfM@@AkSKO6N=^-)F`6S;3y26Py<511cc>iF+{6^
z2|S3kxIH52rkJ2_R`R`qg`bJl83l$EIl<0x)xj<(sN_V>Q_1mwu@D8UB*nS|`#_17
zGbR{;t!3yOfpY;%8td3K{KJ}T6AWh~Dgy#(v@opI8Z`u_(xR9q8#5SDa0N@Rp&N=3
zxY}sKP&_AlId3&#M71!Xg$$}}LJKOTV3dIdd8%Q8M^YCCmaFYAZB{Q3<CboXAYBjR
zgPZj-*}8`o!eIB^x;wth9A-!izdtUI{`_FtTzLvOA4R+~+kTQt2a~|llcwg;)8;<$
zn7R4z@yV<V@u+zCaQ;a8)cJaI%rEB;+^Vmwm>K^fbN`{zo%0tD>{n6xxtJ5fTRVGV
z`ny%J-?iP0kBeTvDYZT8so_al&u@cC`iAZyJ~J)c(9`OSUN}18?z_$5L!~B9<6UqJ
z&OfuGYb?CGVJ5V+aQDb?$JyN0i$`Yczb_6XoKnPgz)@*bqW|1a{(Z>a+2jk4qox#@
zUH!9n9;=YBG%B9*?oLNu9zL^i+O-8)*B3g`p(=`v|Fg-Nz8-(RId2ec=|0)?h!`|o
z=jOKHW1d+{T&H)twv>+e=e6U92t~rzanI!$u6=ZhOeoHPLfLJ_Hym%ob(*GonR0*C
z>rJg8*T#BZj5MWZ70KUpY{o`oZOOTNF5A0?J}8?T4Uc&D;BE8d4_S+0{DrQ>k1tb+
zceW3pML#d(WxYLbU3`fzt7$Xlzt!|$@ygZr|Mq|H-~4OahhGg;kDM@1t8d)<6!|83
zy5mZ3nm>Ln)mvU?+UYOe5rHQ+obBH*QE(}=KdJ2cXOF&Zm*0!iZ;fneag8-f@_rH>
sxv=4XN^eT#2d4h|ktp&$oa~c@$a=xS_iCTq4+;ESEv9^;J9|&#zrpMd#Q*>R

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_close_pushed.9.png b/core/res/res/drawable-xhdpi/window_frame_close_pushed.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..6014d1029df84169accfb23e84e1c1cce92d6d40
GIT binary patch
literal 1542
zcmaJ>3rrJd9It37kktic^F41@=cci}`>wsa_Ml4JqvK&2Lbc6w#^df<PH3-O4_Yds
zsAzPU=w8kkqbzF7G^ns;i8P|g98)Ko$rNF6Q^VYRFp>Ef&ONR`bxVks-1mL|@BY8v
z|9zW_3g6VEO-)m&RGPe8x>(sw%Iio;R@R-(?jy=JMb7caC8AdjGZL?|a$+eD<@p&O
zU(7RHP30LrOQjmSQgC@>k8>f#ihey4*U?A(K?SW+Wi5yV8Md64p;F!_1T65~wssg2
zI1B8?ov1Tt=gWlLsKl2<3teoqoHcXsg85KZgi;9nyv#rme?=ffMJ(_TFQuI0*9Z&^
zsmSFPc-SeAvk0<_5)a{eRL7zO3K2jL3`UY9=Rp_>Pz1#gfaw59888Y(p^*nxtVx`g
zDyAJHwiL+%m&tOFLXdDctPdOXqU1w>*=&w;V3<zP(1mIOG854SLfQla&4*Y?2+D#O
zfZ~iysaPdjV8zqn5d1->^C@v4G?FMKWk`exB0!HKet$f!A?=V{%s+EuRPB(fCdebj
zd`PU4Sfw6bZ33+1?)iq|ii$VXTaus@g{h!Lw#v^3<UHB}D_``Sz)_45!&r{=>Pj&b
z)fvqOLdS3ft2412L3)i016VY{GaBAux8p`&BMHKc1CWDTF&fY)=`fL)$pC0`0-F~I
z$xMLd6Sf7#_6U}EE|#)OJR^&eOB5>-T~Jge%3`QY3_|u29C9+O5Qxk15)DU8^O8`_
za}G)LLqj>Hgi-7R!j=Po4Kr9VlrRBcGT8~5G?;Lbu#r|f4v%2DQSye9wApCSA#t<A
zHXOH+w&Ny1n^3F4Mw?(naR!Mu$bT9paiw%&{P?u}72)Xs@d0IOBxO9>rmq@Msgkff
z+Ukn*-05k{A8XA>zPhF(viXb2i^gqV+aRv+y=F^06x*=Er~PPACQ_eqAf-l)G%SAm
zSbFNslFOG<#(?EoaJ%ztGCqZ8iOkLa+-y00bY|<S8w)s1?FXr0{^TBM^_~I8`CVlh
zS3D)%^Tr*IrOeuvos{})dD5P}J~J1p-<>+$v+T>r+=im8@c>+SLKPHzoMk@Mdm;Vt
zq?hlj^1u7~F_jbwJ#;oadbG=yykiGAer$|(@&;hsu>Et~x%L{`n7#L5n=jgf7hgZI
z{tn*IKhrZOqiBBSpVE0vOM2m@)s)6{C>mS8fA@^o@@3y^!{Igb+)A}Na>n~Wz`Xm{
zwe|Hyd%tO%FgWqI!TYXu_LGgVSViM!KQ3+$>N3^--Wy()gBk5#Cr_PeA}<{5e(&_*
z@snGsTgAG+&plXq>~eqQgQ;BuYj(IYZ>l?64<4{RuK#`ByZQUl-k8}nFj(W;<nJ!p
z=yrdYE>?&y!Wp*~?)`LWU32!Vb)fs5AJ%5{owRUR<owUI*0dv)ElpW7Ub!A9KR0P#
z|I}aPg4ShAwEXpZDRX-24^_EelBzEmdViW7EuRpc)?Q~n+vJ{hwf}5>$)<>A=eJ$2
zs#&o0tNk4v2PSUW+SqY>+pm2W)t>y>_o`QKz1647zjUpSs59rj-tB5`?ys#qeAn2t
z^xjfjDa%n^_WSW_jGOSkWyX@ut`k?Ni_`8Vy`buJYkE)r5nCMpGw0<L(#^IN>;44~
CNHcN(

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_close_u.9.png b/core/res/res/drawable-xhdpi/window_frame_close_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..5043386d4cc7d50e176c72784f3e8e96dec8af5b
GIT binary patch
literal 1445
zcmaJ>draJP94~^~LS%Exd~7<bo!RE&u8-r|UcCd4>mkQ>$T$`l!(gv1T!Cx5UXcS#
zVEBlSiH=~vFlE`y5Emd!9CJe#HDefE07E1LbWFi5D3078J{ElZ3LMjftVw^bem|e@
z_xt&Ne|;q@^T~wx&G8TfC3w==Y%tT{O<S`HjBj`5c7bV=?#|PFN|9c{X(Hql6u$_2
zf?TnfEpkHT{x3y41jUv}IeB`XcNfDeK{IFAn8QI8pdrYf5>`3BRMcU=SS-m7<oelj
z2rLN>B-iT2ysAqKNa<CY=&Q=i;j2n{n}DPw!}c%(2!f){!Qo(;9Ad%_WPz6fYvUM2
z-~|)C)PXDpmFLZZU5X~cRx@VeF%pAG+>Be2D2jRvCNLaBF#^R26HYM}g26C&=|O-u
zO(<fr*|a5JVCO&rx~?)PT2WD9uCSODtr*2^Hk-jg5GG(@3RTKF7dFYEtx*P64Dp(z
z>XIVE1|#QJ%5?_<B3(=&sCvE2#Byj!C?FXc=2R3nV`wmF<h5WO(zC^zVXSB!%BfUE
zG+PWQ<r)v_QM5G*2HM@)kzoj;VV=??P!z6=RrvCtDC-{9fq*Y&K@u1)i6D4^Dl+*A
z3^OI!EToAONZv&A0!bAmaU9NLQJ$6XlpCk5Rvafu8yMYIC&A(@My1gdL0fRv7R7qx
zkj}}x81*dy-%D8RmRQE6iJY!zIf_yi?Sia;qAQ_*qQWkp74~wxBpZ99M2i`-q9#2n
z3Tc`Wgcmesq!s+*WU3p-QwfWcz(^X$Y1&1yl!dlZWGdx!S&=2Iu!3$@inS%V+?3Up
zmb#dC66><kI7?$rODanvC<q2M8st9>6FmZ5Xe^i8A8eK{kSK#&qk-$8j&GTUpqOC~
z>&yv{{W3PV^9yX_>baiN9g|%xYu2)T50^N?L;pOm?vecUUHs%{t@pT9B)@RtzQzWj
zbab2aS8_NmfAbBgrKx8h+<)j*|N1r5?issp`1^F%a0I&Z2`DD+<}g=t+jwI5*y^F*
z^O~<t()HB)myXXL>GL!QIVW3_t=0bd7vDJJNj!Yn$+V}FjVBs^ZrtA25lCqnxj%CL
z*Q~@pA}{}@T|n=46LLzg?a1tb5bQ|n8kx9C4jvqt6ehASx1;W#8X~(7*vSVIXj}dD
zzV@R!kup-S<ISDS)W(USvl8<BbKk(#ooY?&nGfo(O--L?juw11Th(Tt&M3WWd)qr1
zHLEP}^!&Yh`}eFnT-WpZiQ?{ye53&17W{E$-)lr<?}ydzHK(-PK2`GZiA!7dm(P+L
z0?qL!yT5+)UHMq;@#&@?4t-R2hiOu9Zc?vw*Mrqd1>sK<2FCh@Kx|WcCo`4t^njXK
zaPC^9bd_+S?eWvTq78#^;l=?|Yi*&JyW^nU2fJEpN9Rw?c`Enlf4=3+OeQ|ry*BRi
zEB^6bL(=bJeG|_A32R7PmbdHg7lyv=y)l_v8v~u{=zXZ|;>@V=<Mg;Q+0N8w>iz{c
CCI^B5

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_drag_hover.9.png b/core/res/res/drawable-xhdpi/window_frame_drag_hover.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..1f09905e94c3c42abcff9dacb39ba2c0a4d02396
GIT binary patch
literal 1266
zcmaJ>TWB0r7@k}xOGuzlU(AD^Oil4NJJ+2XS+mJr>{>TTH%k)(V$RH*O{UqoI5V4_
zq!gkpLZI|QpQJuWz0e9qq-wE6YYA1Ns1%|PEm%vvBdsFU`XKepW;a#{9hjMO&ivo^
zfB$V3M}{8n>getu2%;;$JyXPQ8Q;0sCj5MHY3wchx;My<2cu3os6h`A1BRm^khkCz
zDk5miJ-dSX2%>GlER6@_g(p?rvEneYiHDYp(FD=gAG%PVK>^UvlxZi)8)wgvz%-KN
zSfaob+%%dtx6gZMbbhF$&(G+JLH0ie`a%^GSSWxXv?{i*hDox{tKxNZOp~B)63isY
zHBsY*5s-E~1QKzP(iu?#k`iYVk|aov0*+x5G{e(8Lvg$+Fsi_T#zkUpo>5kdnOwsc
z-X+QDAaGThuGMPs8XtGODVkLjg=RRK<0x!F`EzyvL(2BIHW@O=*FDn>OveThBh;K~
zkR-9vwGb?~P*^9n{YIj2%IFZfG#h7V%ZlQvTl+x~{U>8XYriz-BD#otr|Rjr9_6h~
zFwWiG9Yuy%jXLa^xG1oaarCN%>>!^>lK4y9Fbx$79H$#nnbJ6hp#+5&DQJi~CF_PL
zl?4b{ooVuHgjaZ8$t5IZK+G~Mn@tSJ0+W-nvdFN5oFpqvY~J<*XzQry+r+*bSoyA4
zHSHl7I9|zdD$On!nRWulpLSf39!-D()J;3uM<rT|ID<TM78yCuu|Pe?s=0xG9!D-F
zbR4W)<|#qoWJ+dn(KSsG7@jRNJj0R=ym3eF)_N45;27Md6qPGOjg=6h5KbG#vXV?`
zB2*{^8jul1L4XoZ(pVxLwap!E)I7qy87<d`0&mvG3fXv;JUlcp`5!#NEwOxNpcG#E
z_0rp2`%;~$om*Zzd;Ni3ux*=m@Yqke!Q-!Nlb<*Ox|e$w{-7?t-2OWwPCotBUmvVi
zlZ!n++%9>kiZYzMm_Kr#{vq(T{MfP?q!x&l*7jI^ar>Td_11Hpt?joC?D@Iv;I#*P
z_8;17UAEO-2X>xWI{Lc##nJP<_HgGic&PWv=@aD1^Ur+!?ZkI470z9mICX(P(RJab
ze%wf3Rbq$ZyAPq$r)GC>5%V|MFMqrKDb;bf`<=a?Jhi)GeSGcVeS7*>W?QPie1B$B
z_0_S~zdv6|-JCGx#pTI&dp>%Ec=NOUEC17mMTReg$KH7V^6H<PCyA@~S8upG#P_1V
NP(C}9SsI*t{$Cues&xPW

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_drag_normal.9.png b/core/res/res/drawable-xhdpi/window_frame_drag_normal.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..e7e4bf240cba627482aa0633a2220cd2f4678034
GIT binary patch
literal 1271
zcmaJ>ZD<>19KUpGOJ}4=JKHhzxH4qZ%RTp!d!w;y^Ri|vZA>E#Ws^R+d(s}s-Nn1>
zl5~pMK6Hp|%7)@VWgiq7gH3z^WzJQYV6jD~P;r~c93tpYhW5i`Y(Cc}bsx$O?w;rQ
zKmXtF|9&r}hj#|sH@6c65ljxnGI*8on`nCge~+IYJA;=VFP`&8?SfZ<4k8A0JCDeu
z2`5noLB00eJnAEe4Rs@%^Kz-(s%D!Z=<9^4W*MUiqOZSNhFTGMWFAc#R)qTN?0Jeb
z^awQ;PJvW8il&UA83&Ed3}>~OqNeCn|5IdNRmB7*@*r6?OO~rvBh(77iub;lp~w{#
zuNa|Loyw)sWYl&L84iiG21JRJln@)1Btd$T<NzCH0MGD%=6F>As=$$rhr-qzy`W}d
ziH0qFicnLYS5_IOQmKS0e8_et8CFpg25=0=(O83aYnBJAwB`0T8DhxQ9HZ<Rwnh4k
zFmF$L5ej>{8iH9)rPhcow~;8EGNua43>yNBY5H-kXuDnp{qM%Q+HSU1Mob2|_Ozqn
zdK7w_V4S;q8}b#gH|mIE;G)1%%+{t&WO>P0gu*u=-OyDiaGa(~1v<|GKnn^l(oh#Q
zTGn(?DhLp=8ffyYhgW!BNra{FfEWiX8xIf20!T=4Sp@7LC&@|^o3vaHS{iEFHn8mm
zR=6itjXDT=wv)B(QnL%vQ?_TjQ+An*j)ut;)C|i%`z2b9IEEZ!AJP+!ZIUZFR*iM+
z^Eh%btl?ng0#6G9C(|;Ei=NLb0^r#K-~mfD@cLc3TkTOS!7-GZuBcoA=2;0L8sW6j
zEGx-$UW5v*Kpg^66a*;o6oXx4{I<EPjhZ6doBnofDDYuztdNCg$-zUjc;)&|f(QhY
zv4L#$()G(1g9kxJ{p#CS&wW!0XrCM^emYy6>-?qoxLgD`;?!$LU;p~W`N*z+YrkC_
zEM3|1`*(wTjt@OM`S<Pg$@|Z~bv_qSt_3>C9d#nmB5YY)+UV^a>jX!7>Gp5?($75d
zp?7P%wd*6Ib9-CIiEStDh>Ld?_Aj{R+^aXn&4p9To6MWRKWlr&d*(;pIn~X*@bmuf
zN4@UZiOpXfestp3QQ@JUpJe)^Pyge~OYc|SjR#t8y?Jd(-&Osi>%pxDjxBFGcj0+G
zcj(N+-6Q`<QvdSN3k#QKcRyWkZQb5=Ut0$`7db$E@Wz*~+<syS-W0!hEK0Qa;vMzY
lBR^c;%6_)@*n7kVBE4_q@W<OWe(wK@lJVi#>A{JE{{h$Xtt|im

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_drag_pushed.9.png b/core/res/res/drawable-xhdpi/window_frame_drag_pushed.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..b9fc169633593e005aa5b21a3439f9251a38041f
GIT binary patch
literal 1272
zcmaJ>TWs4@7<Nk)wN=B4HlY?IuskM^nB!}FQ?oUV6PmGfC5_gCw2fo?q_rAfupN@N
z8Y&k}jG+xwZ5oUhCPASO1vbPOeOL>WY1#u10|pfjfW*rv^Z^7sO&q65=|eS3w$C~K
zzwiJ4n~x6;JQi)guN}j%XtrO?qql_aOlt%^-<Ti%0KK|{^hhw|6oU%zAeJ;74dPh~
zjKVww#>6w%U=N1fHEk9~f|1;QMR%+i2yJ3j%SC7m>)Bg%fj$lcT!W*gogmg0t`N9s
zB#7a7j?TF$IA-=wdT?lRprB8V>#{-Y-Gld36+~dc0N_=tWcx}rLDYB^v<{Cc0<W0_
z;|XG2)JSd+PdOgM<1vBMX+gwAImX0Akr#L4EX~9znxi<HWI2VW6`sZG7lFKaMp4PD
znYu5uOAup0;3^bVsZ?SWF6MZn6eG(rMY9yklE{MeC+q-JN!#DqU{Im2d!`$hj*W+m
zKy%7Lf<Q{wL$KUjZiCqN>xn`sqpHBAm>5l2Rv1^!+7I&Ze;Hd^`-KS?QhDe*Wlu--
zDDG^4QSR>SC^STBlmniLiULZiqn9mc2U#^ipf54QG!($ItZs-!Qe$bF<Yi7Efg$Lm
zq#J@*<N;uGy1}y*UgkJC6BpH_kfs?X9ZyO;oe|TLKr?-;D9H_M*7gHn>#*V5M850T
z)E%)(%7Y+qyn^GD8eK3r<^+yE=D2ujD30fVZrb5KEYW(zD)h`}p^@<%3$Nu^F}Lu~
zp~!`}j)Ikn9Le*nL`n=Qx~9oI%`ruqqZy)(H#X&Ny+_driotD2QP?8T7!g7eqO_3=
zBTA$u0GX750cb(sc_4BGg(Om8+iYs1#u4hxaJexQXtOa^&_=W5p`qFJ%SUfxSkv8E
zHCd>xtgb9YU!*&FpP0RMe28s+^usoPQCeN<?|%ON;eB%tJoV*rOMCgsJBR1){S}lJ
zUpc|-d-BZ8Biij#GuyT6%8kC+mp<<Lv+ebBUE8LyrskH`PQ16a_;+^k;#b>@PJD6n
z$A9+xB%RFfSiV{*A99p~t;v;7PS4HF&n)eVJ$wwjHve1c$oaNx^tp?Xo9EZ2zFoWY
z-Rd9R`=iT$S=!gfK0n%tA1XX}-JbpZ45I6u?m2Pz=O0c#z5|cHH+Aa9H{Y+kdbJSo
zk6gPjZQg>PMb5o@&)U(yiIZ=2e0p=>i)=?^A=-4id2k_jwqujLn$F>uFTMZf<pUQI
aEnQe&s(f(jGWSsUFUqC|)cL-rU-%D7Q>wE7

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_drag_u.9.png b/core/res/res/drawable-xhdpi/window_frame_drag_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..b5afad42b4526b860839e8889e5d0ad73aa637a4
GIT binary patch
literal 1283
zcmaJ>TWl0n7#;+*))uPLhc-$k)A+{h+-G(sUF){H0~_74Y*$$$O3%)m?T*{IFf(;`
zE5@dn7z~LalBf;A1f!55)kGqQjesbZ7eUZXiV*1=rZrGCzNpbN-QCJV!z453{OA1N
z|NYn5mFnNn+T7WUVOVQoV=Rr<FnZOd`_T8jsV$$NrNfVB{Q*1gmw*egsBY&Vo-n}>
zOhceowqJnV7`AfE$YlL&@@Yl0%@7E5LS@rIXbkJ_DLX(bLLbk;A;XFgx4t|{;D#O{
zwg^c&>GZ*Zv2oOe1Ec*JZM3M#I??k4-d$FZ0TcQFFPp=br<5baqFn{;gJX)o7ghXX
zgs3@{O{VZZ+l9Cg5=o5~C0vq2j37z8v>s<^Mxbbp;%JiP6rNUi7Oy`9VsrJpl8&i$
zE+j>Wg6}&DMU_gWP>BoK?hwVuvP{t|#j+&QAiav^gEDD(T@4E{=xMIu_=auafklwB
zNBjtZJgtRbI?3dcVauy03Z;xH1BYTlG-aAWT#MSCpN9Xtv8=Y2sW^~IL(d*@HB^s$
zR|AZ4cXy&d5qYC*at%}zFdVbB5ffT|A{HUgO-MI%1@J7Z=~AA|u{2HcGAEKi7d0}h
z>7tb90bn$`VP`qKsxlHAkMU74&M-_|h=zGumEvKMW_npEEH|(T%kzPy!3MX1xa(N%
zu2`kdg}}GnjBO7$x*%1secLP84&FB);7OnvRv-r@szn@wuJJO|Ro6E0#T+ZfGW?pD
z<3wGSNg#4LlIQXQDd#zc6lj5FM49Jd5PJ=;-;ujokD?P4gVS(DVe=rzNDz_`rHy15
zDNN=>Ad@oC0WFF=4<wGDkc(8%Hg~j9;|TR;uw5DoBrJ^;w9qWMXlTawil;DaMMokQ
z&6KasU){WVoNgJL{qgwgKQ-Mydvv<;!0pcc*k^CZA1p+*1JCdI{_o_Uy)E-k{Zj4t
z=6ctOpL?$<dxVQO=hanBZTOR8*ou3ug;MKI4cRlF|2oM{e3WQE?wwtEqpEGYKH2tr
zwfmvjcHzObY*X8fmlmFVt@+5rrmpF&bKEWA;P%dQ3;VuEuD?8a@3*fA#-ksfJkTm+
zqld*Ef1SzLQ*$R?oICwt#~;;Wy9OUSudey@w`Y!Ce1W_WkUkfG=glA9TCKO?!lBDE
zYu{gUW#-bsiIzN<9lwHoS1sP&do~W%eO2w8{%2by^X`U2!p`AGuz#`L2!Y^7_TB7x
r_0qt@JE-P*46Cw_r*<DJy6uD5nVs2!`gP{*;J1{B_s6Ds2gm;dsZ+Pg

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_head.9.png b/core/res/res/drawable-xhdpi/window_frame_head.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..68995af33cd6ca911849872b133e70bc6ae2a0ef
GIT binary patch
literal 1110
zcmbVLOK8+U7>+1XwN(*8tspT9BD%>;+TA?pT9TbzyXdZEyJ*D+rpdG$+GNsX>ZS!j
zL<PlD59&emA_xjzL@$COD55t}5CjiO5d}*xBA&#_cDH&cJs8N${4@Xe{qIZt<^3J2
zJ6CfY*HP?46}E3=|E{)`Y+W}}Tg$dBG(SiO$S|#2A?6H+3}L?LStGcDEoXB474G4<
z<-=}ukPem(>NfF2E71{SFJNen>*<XH%O1s)AHpN9pB3gFKNWb_$qGl(B~S`-xaRgv
zg?M19T(zf0ZOsvS_whZk&ImkAEk5?f{78?pLW5Ul=j2)v_=XA{%?k5Q4VL=(90@U>
z7D37e8Ng?t2)nu!McK>C00Iff5|mR=(Ys_F0KWMN%v$IS>lIXJ+G0{xs8Jf|l2otP
z#d?=W!Vw8-nwD_La*AoBqDh}xamtT&v=|VM?9dIUOME_Iw1&t8%?ixZ`4GIIR9YbR
zqh_L5%B0u|Bq##O^OCq4+7Yebziuq59aSd-ELCtsCPJIlV|Ygk%yPH1p+u2+qaO-g
zRupRt5qrYJJ}siGz+Obhb##zc0fb67P-Ku%AygGu$jdS+q>Vya(O`>XF>J0Is$CF4
zWN0}E^WB=JB2_g^WCBf-6{CeM`VqB!8@KGb%x)74mc;705L=XlRYJyE9nfDRlteWW
z@VS9BU$Si1PvoRL^U)$4x~H*I2#Lox@~gXx*f)@hG!5mU*^C>RrkY3TjG`5QR$#u*
zW1auWnZ%rtlIHlQSz1@D1C!%I>oZ|tc(BhVCS;@WaoY3PSY0e4qZ)tse)ZX^v!Fe{
zb<<bVd>^Ki^~YZ<`yoDGk=wnY=lbVwy}zzyCU?(NhQ7=g==X)~XJ&rf{xp7g=L6@h
zLEd!UOU>SRRQo)4FmwC$<(c-jhxM@wdtM%`_WgW!VtU|8?&|cnlbi2si;t~czWw}q
mv#qgwx@F$IHCuji;OsJPOR#44-OcmmWYUZIGP-Y`I`;=cE@a>U

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_head_u.9.png b/core/res/res/drawable-xhdpi/window_frame_head_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..6bf1a47d94618de84b5ca7ca2ff70617dbbacde0
GIT binary patch
literal 1132
zcmbVLOK1~Y7#<DQ($abb7b+r$5fQ}9%$a5~4;o{VlW4%ynnujVOD8iY$=J@rnNu_E
zMx)?kA>G}J;=+X>m5Zn=LBTGHD7X+`i|&QHxp;9QC;>gwCe=l8;lRxK|1<yh{qL*e
zV~2+Zb`CHMGgLf+%Jkeu-+ldk^t+|e9Hz$(lCP2pw@zBRkC}|=)-WjAdIOiSZqA;0
zfkzo8R<|luQY{_T4A<uL$c77TkD?i7G#z@nF@*`J;fCd;*pH8&vcNJ^>`AF4l)M~n
zT1V!5JTW&`G3KTW)nwBL!Dy&a0vi(@g!Z%(Xkm(7;nk=dUGpqhF(Feab~UJKX&mHS
z9|MUK;)akEKoW9rBq7W40U!!c;02L~VjRlah^Pqy=sqm<=9_h`j0#;}R7<f<LOhM<
zTdfw?8sS{O!9!J5BMwoFQ;T>o>kvJRJHehF1HysfTOP4o2Ski|&7C1BmPWdog6)+`
zYs5~_Efg&oAL<?tIf1wBD6bXkfRyo%FxIsWDzhHu%Q$dne1rC*zNZJKwfnWB$dE>(
z9rG>P6nz@G#*B>}QbZ}1{^3l^)C5TpAe0k=EDA{lLPds!yeOiAlqpEE3VR&uVRH$n
zj6fuzjGBWmpHNi=DM}`bvVy9La;AqZIswrg1NZz|)NdD?_$5}$`B*2eUvb^(-UN&{
zUE&5!*8{l;36ylhaw0uy&uX>^`_@@(7JSzREA`c^b^K?Lf>agdVYZt$%4U^3l9IAo
z5Yz&VeHCl|PR)243?B{0Ps7r?q7xX2Yokw<wdKJM-58&)27bT1pRU!-BFa?4<yz<4
zw{$GI`26{mQyT})f8GAzUwslK|9^Am*ylrc`>$MUS8r@chXYHE_M`dv`H$e`Rxj4R
zbb?tp+xO|v-dC@NAGOE-{%=#QE)I1Dmxeo?&gJX3HpaJYf5yBU6fbV5-{N8)7MW>~
zNPbzE1nGx^3w?#5U6S{9@p$a;58?Km_Wi#)=T2YW{Kq8o@}GUL>%0Ga677F6KZfpQ
HCog;lfIw^i

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_header_line.png b/core/res/res/drawable-xhdpi/window_frame_header_line.png
new file mode 100644
index 0000000000000000000000000000000000000000..ddf2f7fff374a6dc428e5b688ddd140104d8088c
GIT binary patch
literal 935
zcmaJ=J#W)M7`6aKRjV#YNWgS*mm)Pj+liCdim75dp_XtIrIE;(i+xF~)IM{*5GM-~
z8-IqW8v_$aY^<<#N8$&ta8Bctfne!;cdy>(dB2`}-|N0OK74v82*R;@;q>`_kFUoE
zCI0{R`|La4p0M_iU6Kh~B8r7pK*kuj5t`yYM#1X!SKJhY`={Yx$cEla!zYo1avv#+
z5{?#x=6RMNe~uX#<7pV1;;)aNL=Xn1_)7C+FR}3~yjW9wx$X}9_1xD3@%%YxW(FsS
zFhd}VuHw|lOmV|&@N;g4BG|aFxhdWzHS~JGCKLlrs+E1YRtI%mQnY%#T0aA-tY}cK
zz=~W}D@Ii|sw&uiB9BIciP3jD+gSW&iZjL%1H$EUDJ?4!p;M^nx(;O(s%n{gl+#tr
zP*#r9lY+s)sZYa%g(L<!BN~$hGew^1Z3$7bqm9#Tn|Q-uh7zbqa$Zv5=z0HljiQ}*
z%KG>&-+vOPgH?iIAE#tNeLlF!NggUOY>E*hbU?^e(Z$}3Fp|zl0&IKJHE`-7Ka6wZ
zvkl7g3^z_0ihb-lrpS4uFboXYQmRVDwi;STSCqD9>6T)38nt#^X|ya&F0c;q7ZHwG
zfer4k_Fil*h$!Ka9ZbVFIOtFkflc8?xIY(tFW(j$?9ZjO7YlhZFdy$<<1S2GL-}zh
zUVhohAIDttl#BZ)x_-+a#v|8h4YD8OU^J3T<I<O#&%%K$JnTHUxt{-=<xj_LcbyN`
G=-nSrwH=lK

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_max_hover.9.png b/core/res/res/drawable-xhdpi/window_frame_max_hover.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..dfdf52c3e5ca142c325611c99811b48f802116df
GIT binary patch
literal 1228
zcmaJ>TWB0r7#@3#!AP)ui0R8X5n4-U=bV|HE4wzkJG*A9n}*FwA}OUOGiQ@&G8bni
z?&U#ZLkL3cgF;k%D1!7wl2W12D%C0#^r;lZN(&{nNQJ~!BZ8MoJ(Jx{6+#DQ&h7uc
z|NH;*|MU7l|8pJf-R%@bb>#c>A{iC(=GwNA@4Jgbr^)bSm>muW-Evq#KBiKpJBsPN
zjmB^hBeVAM*Em5@n~z$h;c&R{f@ZjO3`I7vs_hXpMJ4uEJ!DMakRHWjmXl=ee)1VZ
zTV|3O5(}W<W$?JwSNHK?y}xACCk)kO_CHG}sv04%afs-uJ?R8mHOZ{;YGfX5a}2#^
z5>6zUhN$7f0G)AtOp7tV8bAWH1Y=N$%d)(W<^cp8;5o>%P}T%q1AuNm4DsfhWv!^^
zn!d;?$&81gr*T}RQi)ZBnCp*mP*v54gXdXd!3H%aL{-)adRh!R4h-M&Ld$jNh!Kst
zQ(=-JN*f{AUZJo~>;%n3k(6;&<Z&<tINOfmTC)zqB7PuaL+hYa^DtM$fji|J<UYzh
zEilR5!yQG2M2&XPx5%ZSN!>N3Z0v-2J;{)hm}!|Biu1f-%4K$x2Y`*Mg2W<IGFZhh
zCAl0&2pXWpvk^X>1H3Bcpd_gxgjq4g>re-BPLX*<fV$ek=A9r!j)7agE#kY01rNn)
z86Tt2^-Hch*{XtpaW`~>ao3|WgCbo(hUG--=!zN<>)5wm!Dh~PZF()onzey{D5bLy
zrg<U714)5UQ8JP)3yLU9X*rb<nI_iUAaA0qtMN=$7S&w35qDhAhzisdkP_0m!f-?k
z7Zu2V3Z}J1sxX?amp@soHxPD6*Z8D8=I2(^q_zIY>#0)p+RC*n9W(UK*&m+&=F#IT
zOFKrC%{$IbFDtJJ=VlMC^xkZbe;-oWqwn9ZZNKyOu0DECZTDAa_MG26w|snd+uaM_
zb}gJue6UJwY3rnWr>RFaMU#v7x9-*2I+yI)smBgqeesm_#O*`#H$Pr{3w2%U3hF2R
znf~?0oG`O+_9J`byT{{&p5GEDyWhJv`OdD&m)$F$_q;U!<D0d=KE1tj>;G7f-I*D>
zaqFigdD^~S=D^e&PcJDa{{C=i@zVKQ-OuFf(!Jk*x!!r?sf)ea8#*2c`eOCZpGTG#
c4qw>PMV+zsy?WU@z()U<e70X-OdmP+FZ5iQE&u=k

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_max_normal.9.png b/core/res/res/drawable-xhdpi/window_frame_max_normal.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..649210c1e386188a97374377800a32f153950cea
GIT binary patch
literal 1203
zcmaJ>U1%It6rMy{Z7^1<Xj2rY)3?&uxp!vgm#krTX4fn@N!VS;`cUlb%-zkH%#SlS
z-O0Wv6(9PdpbtTeKlmVx;EEO_YG|nhMDa~aOHmrI6iN+3ks?y4ce1-_A3_hz+<Wev
z?>j&DoH;!+^}^`Lp%IFrM$3~%g{%sBN{{R%@Ata1Uyx-C7wfnhG;!OC5S4d=2BOQJ
z)j}0yIZLnpgvKfAp;z2m9oNklH9PP!R%(+;ypW(NYJ4IIEqfkex`A4*pJV?1{yamw
zPL7!sO<;yPnsX;R5vq2kYIbMdRvl*Id3rq22!V&NMJL{ZA8SdD+2+;AK0W3bdfNog
z=a^nlb#sQ+g9y=L2Cz1e04>1`6tc1`AES8y0S9;v@+_1!f!6?_`@#@!k<-*FMyc<M
zXgOvM<51(ccDtQv3z;BlaZpv&l!ND4V!_5sKDH9pkB<x(3>4du8)7%`>6FoG1dBMw
zkVtzec%f<T5c_ezP^4sBVuc*c0M7H$ytb`lTtWB3*ws3&Erp1ypg35JY;qsXBLgt0
z-Gd#ah9nwoI&#USSPMpAFM7zwWh2LsFB!*mG%L&Vwj(#$1`hz6RRxK)9LZ)C+mYmE
z*0P`t20Xjr3njp-V$qN!RfMo8=6M4eKrSgVuL#gk2iUS7W6QVEz_&|$_p$l|v6>zs
z3kOjx2o?riFf$k6Af5|CTCa+<Y1yuy>gg5rGB!};o<vS53Ostd#+ti}e<&4-5EghL
z&jU$;P*HTrkOf7QrGlK-MW&B+cBz{v8){ZB%A#5-^zzOcx~M=y0ePWdC=5q};nD`V
zuVDs9qzlvSPWuyOXMm7TrY0ieQKUxlWVEi9jeIS+^4FCMqo=@=dp8@;41cq^aS^Rt
zIJ~kUu6G*y4y>IqH{N)7|It0GS3g=0nXTou!~4(tkb~>XM~}Vx_VqFS+tcsQB-GG-
za`%aP2mkZ>`46|q<d|otm#d#izuxJtzIFW4@u!A9U8!Cid-~&Nf4t0oUA#GV@};du
zo4<cDU2dUwX8*gfFnxRN4}19WdjejYP|$O&J+0x}!Y^OGd?1+=osH2y58h(VnN)Y^
r;OB!e?5&$W-}+Zr{jGcMyM2KA>diwZK6os=mi|V{#VMm(IC1KKwY`Mp

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_max_pushed.9.png b/core/res/res/drawable-xhdpi/window_frame_max_pushed.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..c1d37fa79525319a362ef6a08c9866ad4f7229ea
GIT binary patch
literal 1227
zcmaJ>U1%It6rMIxOG~QMs#q*sCPH62JO96Ct-CY3?P4~D%|em~V`pdXCX>y~-Ok*&
zlRQW?_@J~_d=P@QSQYglrh?jFt=JN<RbPaP+9E1ijYVm+AbC)TcQ(6GA#`Bo{+;hT
z-#Pc3dAhInK<BpI+bD|aEF82-WYox;-@1i-XXgh_k>MVk8^ryniW_zasf>#%5EOiS
z1eT!fP9FXQc2iWxm{%UegT)@hL4L|kY*MjbCuoZ5-XGU(rv@>oz!5J<)5{-xL<7%F
z(*tsmE7nao>K&X4VgFQb*_o<2x=ZhW0CdL&A@Cu#LF|tQkrAiqCa*!}$u>)arU|a4
z=`~S<#Xex75CS>HF%GA2K;cuoD5<Kt4+tF3v7Es20>i6@C>R_ES`SUUg>Ka-S^1VP
zvP#pV7}pJ!Z8RFGhL}R(2+Qlbo^S{PLoAqRGQf7s1W{L;!Ge(!dUfof03?id1x?^I
zO_Z*M;Ma@Ab>bjuC5ohsjqN(ir#RO4len7J5iY@hWo&32l_%?vEx`y)gbulnYF8Uf
za(8n_i6K#AJRExDQtWXHITJn%aKTE`<Rs;Ku3<}p;J9j)sR$g$NV=#nwyQXd=D3Pl
zm28`LxHiv5_?#@~Gm?~36kX=|oSYFX-s04}rV5(KTY4K?2qJ6;4s84Oi0>BGx+&H$
zLug|ZmJu3nS3%z>!YCR=bzt_(plCZ@kgSs{T8r3%q4yYc^C9v<GslLvfq!1f=6F6U
zh#7%XG@jQqQ?XQ0lT{_FW=xrGVciY#Caab%nK@O~^VzkyCCijG-qN^?n6)&TC1Tj5
zK>kxO?JZJ;$#lK^$zr{MU_iPiB<->1jn(U<wN?sNrW{}S?aKMi8L;c)KMq{l)N_1#
zX7B5VH~(<?<dHkHqkDJEeZNKe8dJHkldH=+&OSN}o_P7{OW?vQS5MqKFW$BL>`KXb
z_sbj4ecEw5cyOB9wE32;&B^NBZ~j6y7Jix);ztH%mxhi<L(lwrrg!eW$`L(%;qi0v
z^5X3IMegEhf9U?trK3HU@Ywi`ckJMsJ8N&>ddwYq;h~?e{dJ;$*Z)|zpSf*#^4P00
z-%+Ri7e74rh5Y>VkJ|N9!|(50dbal3eb+Ak{?#Hfr=Oxa_Ox`Y3)=qK(gJ#GVd~GF
Zhp4%(ec|8Vu3SuhFNIvMHJ?57<Udrvoeuy2

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_max_u.9.png b/core/res/res/drawable-xhdpi/window_frame_max_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..b20a1bef39c83084c7fa1599662f210e0faa2001
GIT binary patch
literal 1196
zcmaJ>U1%It6rPY0VoIr?LQ+aQOiBfDcJ7_o`6X-F-PuhS-85_#8f%NanYo)xlKFAw
zraOtKP^DC)`rw20#iA0#mTr|6`XJU4EHt9^Are~aLsg0oZE2J~6#Afdvb!-4p$BH}
zJ$KIcou7NoygNKJxTR-X55q89N_));T{Zd?ySwQ7<Hr7Tbm=37Q8MD!NF9Zk$=d!H
zW=k#_#}$n1+1D2F0K;@nI@M7!T7Jo}d^d#>n^f!u6wNRLd*T3DQ<$)0c--+a-2HF9
z<5<VeaQo#lC<l2w;q09Y@yOgz)tZ~Kber4r0y_{Jl)%LVv9UYtMMj+AR(TD&PmTqS
zT{R(78Lk=BXnB~;`ypoK6yPnO09Ju1D5X_ZeV!Eo1OgBRDDqG>B+&qXZ3#!cg?7!T
zn8lVas%5wdLIOh&>h*f6E~Wf%T!6Z+Cmf>4Qwu(t^$3c2FY0eIm^iXRCm@dRu?Zs@
z^JhqgqmedKaD#Grjo6D?g`y=BViX841q9bk@>;cyNCp2N#)j5WbvD341xNl&Xwmzq
z^|!&ac8_<I7}98reW61y1x=g2HREEBl*|lAzocx(Hc(m=EnBVeV<G^2T9*_a*^0$$
zmaV9@G(yk<ZJv$rY5{7p3}r>pWe5v$Ry3gr)S{+}ngmU~jV*Z*L7s)%z8&hjg-t&e
zYve<Wh#yvcf4bcT!xKL7qX|D?^CL1_Mwa6xdU8e0j7=OmN3dNCeV1LWvEgjsA1b*5
zggH^lia^mI)U>=}s*)zFN>0t@Wv+#_H>jJentD24P-VTCYv!Fc^Rfm_4P>R9sc`}g
zMo1cDUBk4GXcs2iwf3jV+5lmXPEAP1<Lar?pV85}UNW=Q_}9BPGd&BSx9e8*oyO6N
z!E+C`f3p1EFIQgae*fOnoy&z_<=GQwf8PA*$kM>BSAYNfLeItTR}P#W-tC{2j@{nf
zSXk)nUMCMvU7jBt-1_j&%Ws9zQu-#jG5_`Ag-b7P`=W8@+We8PemcJS&)?j|{sa4h
zA139KXS#NNIC*>J#B9aA|81dTo&2@5_097ioPYbNjz>={U;k*+j-_7lk7IxL{j=**
wnYq@{d#^oz&Gpug;lDTHFAu#j^UPu9@}s`jk3V_vWb*$g6^6`4?(ot7064shEC2ui

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_min_hover.9.png b/core/res/res/drawable-xhdpi/window_frame_min_hover.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..bdde0ec4c07a7b0e253b5baedca9f10aeb34da43
GIT binary patch
literal 1203
zcmaJ>U1%It6rQw2Vrxo#QB;J>v?x|*XYS0-uUX^n%&u9;rg5_&@u#&nGk23QnIC6v
z+}$V=Dl`^~=4nOSQ2L-)#R^J<QfP}${?wN~6k8}Qg;rWCeNdz{P`$I+jS8UyGxzU&
z-*?Wr=gj`$p%;2KKf0M=n4aQ*Ri>jx-$M6&^!w4Vv9IXx2+5C=k)TRyD8fwE2_`To
zdT0`tF>)Gj{DAuyX5;H_Wt@zc1`Rv#QYf)W)xD6S8K$ql9wK`h6EJ}%T|dL#I&q2x
zu9IQM<dRSdO+4ie%td%)Zm43<P20M|_CE*u>INn7FhQX1&G@lV&#*0CgU*v}o&_xv
zGM!;pof<C<12c#)kW&I@3yJ^~n1WJTRn=#JC_sT1L>`J9R1HZq1Oc=kma0Wg)hJtq
zwiaDw*eOCngXe3tTB;_cf@qS5x~?Z2qR3GTE^hb))j2=j)?u)4Y)5WL+`tD3Bbo?i
zNrt7Ku7==+rP3O)AGZ@lQ^wa($itMtdtMS(%Q_}y{I479TE~?}i1{*(gW1TY_fg%}
z0n^;wTPQK4-WWS0mtG2*u>yP6!#*im8J3=;9M>^WS`=+Zt#T8hAaH42QaI!&HmBK+
zqE^!gL0jnXtcRB*Gp|7<t0=k*VP4LP7PJJlpsAuJK}+voi+)UyZ{v=(OSRir{hnCE
zj4&cWR0)EaP8AGK1tf^4f)JP^GAJS2^^<jSMXM28IC9^_P9X|B(8{sluA>i?Tpq%l
zC}l-K(IC_`Q?XP@lT{_BW=)xGW1V&KCaad7HuI{i7jmm{r!7;~prr{}DQ9UcPo3eD
z0{KtDbhc;}CeyX@r;D`)!anVqh_=VUqet%2*1A-*vX%OUn-_lWc~^K~AA0h}rh%KM
zpZd+&@X(&6!Nu9=$F0q;b2~mW82QhIlb15h!`j1(OMPeYYlq%`;>60UkNy7nj<GY^
z`&X`B>FVwU&(AYm8#c8je{Ug!|J!JvoPPZHOItrIZ~tWb@;US1$DbCjHJZJ9kDvSN
zr{U3+rx)x4XJ3By>a_*5c<7s>`x*~^zw*cK+b=GcMw|G&f9JsUFPA@f@B03C-uh*9
xV|VZ6SLT=QZ|kiI_cwq2_SWdB8y9!YcQN1XV!t>Oodn5mq?jMFj^+03{Rhv&i^Tu{

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_min_normal.9.png b/core/res/res/drawable-xhdpi/window_frame_min_normal.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..4c526f81b2c37bc3a52e2abdc7a3fdced73917c9
GIT binary patch
literal 1175
zcmaJ>TWB0r7@imjr5Lr^f<_DDls;ITnR8}#uIx7K&g`0{ZW=ZVjo8wj%$!ZeWG>E}
zbZ1wgC?XUQp%2B<qF5A5h4w*hA6nWbRiT37i-HlW5>QCRzV=1%%w{)62>oH^T;~72
z|31ej#-AVFI<l2vnBnS}U8k!~pURdY`aX5xz(u+|Ny<}XGHj9-iZN4k!)eS`eKdpX
z7`g3NZs9z`48H6&rpQ$71=9(A0cAQu>PHmKF!|9mLe3l}>@=S7f&zE<%5{$Q+yZw%
zsexK#;aP926XVIwc*E(;Ifl!P?q&0-NeO&R5S#k*L1Lx_uFGrEeReH!Y*&TM6}UC0
zrfL(c6~>rV1i(8$1*{4MDCaaydybU=1R{_`DDhA;Wyu79?FmP%#ctEA+m)UzdMa?U
zghZw&wpuNrB@1CZBSOP4G7d@NsRp041A<aMNOtuZY@9f;7ZEQE*o+ZPhYO^@QBT)G
z@S|F7oj6E(iJ~bJQxu6%0HW__adov5Qpf+fv8i^_Xh&GA<0M>&9a@j(u0ELN?*4`{
zMe2>YKlW%*(7YWw3qB4=)h=-Ki{N^$iE@(UxLT8+mH^;$hOF|)RUKY;Tvco45P}Zq
z^K6EfWvi@1m5QN2SXPRX4Q-%RbWPG_Xd8WOHAn~w9Nf3<QQJMNa$l@z#Tbz=ZiL}{
zzY8X2LlP#lVZ>UK3R^>t7i8zGL~9Y-IQEWWw-Sdw+s(1*ZDJp)r80yiNiIr2)gjb%
zOSLswS2VSx6)lD9Vckvgrf9a2v&x!cR7z`c=WI*Sp{;|WT(Wgeq|S(0gKTJ+{uS-Q
zY`fn6^sqiaIG|G#)A4wH>3U2@>t@w1Hqzz4eqJ12Vz&<+0S|xpQndO5KC}4DnJ<;A
zoz*7}oh?3g=cjYKzqt3$t$q6+-J2G^{|M$!+<f&oI`!J;-#xutyZz?ZgIhMpy$^2u
zxKep!!%cUqAG`GHL*vix{AT6g`P1z~m+PNgyL<8N2lfdcAKjr|JN?IP@t3pCSAUNj
z`+aBr<j9`i-tvO>w!@bO1_tg7e)jl-|C56+zCZfZ<<6(?wg!fncb2z*J9g#I_p)C_
MwLETLC>?p@U#IYQ<^TWy

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_min_pushed.9.png b/core/res/res/drawable-xhdpi/window_frame_min_pushed.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..53d5bec5ccef038340da10ea32b05ddb39916786
GIT binary patch
literal 1201
zcmaJ>U1%It6dqHlB{Vdm57vskOdisQ&dj|tJHKXacXxK%g>H<Sr3uxC-krIdOq2O>
z=EmJ5SW8h$@egfZ3Pmd7Q~IYRU@f$YPnw59V|^%85quO1DismMJDZ)@htPqU`**(Y
zJLlYU=H%GuzJdOy`#FvqsP4DxY&6(g*|M2^&s?0i#D?v(JW0pH7H#90a0NGP5>WN=
z6sZ&J&cE_48R581N4&-)ova<OoX{6>Y9n_1h@m-dWKSo;&J3ZTNv6CY&)>Utg9o0Q
z=O@$}tVJa<?d@NP$@s!(!&#VdOqbvDJQ(R%jKC)pgN{ENBvvQScX=%~Pq!r=bWP|?
zo?mlnvNi@vVN8H3LcxI=1R4^NlGAm4H;^HM5|kw*3rM#V*@6)C9-gViZp*6Mm7W$`
z<@sq!BTJIn?Y7uf#4w(ckZGDJhb#-sLP+KViaSD(3}p;9Nu1b=s22txWyH;Jj^=sh
z=~@VWRI9BM2T3ncEM-y$M-mdD<ojt{UF(F_$^UL_Xq`0XBO=vF63)dAyN}jT24=Z?
zxKL`yys=)0J$5O0)()LHp9HjO=XrJ_x}Iy{oGd%8-V&NJghI|#Gy%JsBN&dW>8%{b
z$blKpM)(|*<uZhdrkN^2WwjvN$cB2w&}BnGwwYn8K|*ohkWAZS+C8lNP^?vo38rD(
z2*cT|3dW{G8Ya_W1WMy7sA0zo(sg=8YZ2Qd_Fg4!B@TVi&9UWeppUd-8KI)A6lACw
z2pL96vvtK#b*-ouN-E#Ox*Oz8)on9ZD(k9QDXztxvrDRhYy%dQqHXXJb4E%F<bi_8
zwpbOW)AjOai}eN~0qdHWwa1y`)@jyScdK@x(Yf>MozDio0fTS;Jmhi*&z)=TT3J3(
z+*&Sw-9Nk6-M9VN;o<jwzwy!PYtOuUVf?oPr>^h%YxK*%U*6$=`sCH-`Q`Z3+mC_0
z$GAuO9^Eq7o%}0}p~8b3*~xS9PV;R2!>2y^<!syk&KzFNo&59Y7eCxzxqSN8kLJkD
zE8id5c6Hu)=Z(R)j%=0sybIeF4=vt)wohF7{O%u*uf8;M?}Lwr7w%tP+B^updY{|z
pM5dStyuSOA|I^aZ+e;_7P27tU{Ng{$cxU<(sg_6Wi^apo{{zhRf&~Bo

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_min_u.9.png b/core/res/res/drawable-xhdpi/window_frame_min_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..e9e23c898f9f0905ec6e4cba1080ca956a972621
GIT binary patch
literal 1156
zcmaJ>U1$_n6rP|-B@pnnp{3Ii1jYIPA2OAly|c-J8^i8GQud*_nYo)xllgJx#+@t(
z(gwr_-+ZtTeA7~dL_tBRp!BU2OW%Y*MM<HJh(7oxg5F7XqlMssnRCyb^PT@Q7pEr2
zM}|j-DT*4YPJlY$26-xnhRFM;_2~`5KF971Zp3ZefhnR&emsZhY6$019YKHP%<pK7
zq7Hl?G-vQk?Ud!kAqNW`E)Nrerl_%#c>=vfgy}gnA4E3u>emMh9r!jgt=5EEQbr5G
zL^nl^?qt*JE_$ZVocx9!%PnFcL>SU}xD;hpZZkV}Epjfdd4}Fm!HYJt8`Ml~iY~_~
zqE${~JwelH-Q+}7*A@K)EeWE^3o<VYtR!2CU?~#aBZhcO{kByHm7Xsm*~|jQiN*7s
zPKWErT%6AHqG_7EAn}sK5)C$6i7?FBC_B=(08r+oL4t!gq6>>~E?&kqLn7TxAxvtu
zJ;PDfD-<aipTmR~Ie`zuBCj3o4A;?zF!t5Xnkxz7>nMwtQ;+nceWVX2wfnTALXkvc
zolXPN6u1OpZ#hH}t^%7OUpPPTEvQJ6=j&~DP7(xGF=dT~zUHxp=WBXffl%~>zMcK>
zz*Hnba~w^VO;L1J$I#sh0FF{pT~%^HA6tzw3?mQqeFwyM4_o>q)+(n6;y7)_@lt;Z
zrWRrxXA5ycmm4ZwgI*97a?zsQi~&l6v&gTcaY*mf*b4UXFY1mfijE|gND7818b(<I
zx@@Sr=IEue%Ji`QK6O)d5`Ed#RkPw0d6y&wlvP6nhES3nU@$xhhA#%>qk-vPktr;W
zd*e@py#+!M*_xEB$L6Ef*JQPBRzazmZ@$>PHS(Kqc<`_6_|e%*`MYCl>J{qv)}i6e
zr{Kze=eGZOiBDViZZ+=Ly;lA0(eEC8yLJDU^Z%ot2Z#FW@PR)antgoX>e}l&UuHM{
z`18lVTkN&VEk1d^lpN%q*#Fw2wF4W|qXTzucfUB_n!dey*Buxb_>Ag48$9?iz13&m
eT)rx7AA3kO#?M^8{?+Q?;=fRJC&9Wi`@?&2X>#EJ

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_restore_hover.9.png b/core/res/res/drawable-xhdpi/window_frame_restore_hover.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..347849ab9d15da6c559ee93daa11dfd0997ce957
GIT binary patch
literal 1265
zcmaJ>U1%It6rQfZ)TGfOHch34VdCF|J9F>s&d-j!ZFYBdo0aS)-QAE?knZfv-DH}~
zPiJPkn+Ud83`C!ND%KzR&;|q>DWw*wq96uZYelOBQV|hEk)RJn7Ha&tv)N632pyQY
z=iYn1?|kRnb7x^Jcd)PL(H?>z`ZB|E9*-h^)7$UI-#3;f-p9ipFIDmiR@JL34kF^3
zRY7FNP$p3xDcbDOt0+nk_Z`uTC9jknkyOi|72k($7&b-|MD#$zR@7<akrgzln=$H-
z4?m$uU5il@Toz>QB%0EP=Nwd+%N5nRX*Hrz2lkWEhJ*<W<SAssm@!?c5u;kX61M$i
zh9X-o-gJ!G5LL>Kkx9!zBu9gw3V1;BkcOeKAP7&BEP#LkECbmf6r>O<0YJ7N3P*Fa
zs+5=0?O1pgqozF1mKdg9uhaDqZ8?(+j6@<n2g?SrN6?)$J*5#e-N6onj9k^xZBMsM
z(q~jER?Ul1Sm{OzhMmoB5}R(jP`G4FL$Mi11I94?yjtF_mq&MHZ0YS5XKlpfk!#f)
z6`x0Sumi@myLTYp5v!3#9UUKvG9z1R%|ND?kz*9zp*3BTlrYPxnotc^SO9|INQe(A
z8m|ULRpW(fSW%z~Iy_t9BQV7!LITV45e{NI&dN{*LRu79F$CpE2b(cnPcc>0iLK+<
zZ7jSeR!TZZ@hqokSu>q37@M*@%bl`pGFjlrtfK0sKlhJlBV!pk`Z1)X9m^nFHJ0=(
z;zK@>f-u2`;w<1r2t_f;%R)%x1U@0elN{B?YFpHe6XZxZnG(22I<b*=SWa>xltmB^
zC1jCeuo%W~kpDGIX9;(qZ*I0fo@`zqWa3-n;Oi0nv-u=JY}=QS<Hg46+Ul2mC&7++
zrBDlWJ!4mTtK~p{xqGo3sFr(kYdaTq<<E_OH9mZO^v+AoQuNuAZ@)US|H4nFMs6%L
z-7DRfmIpErJ$Ehn@Iyl<h;4zc?K{bqv3|I`{9vG~@%%fdKR<<DKe`vauyRHkAJ44R
z@++5`tIgi!0hK#p+`9IGap=g;v-HjI?D<3g-U9vf+5SoJ*zIWddF%B2<)?;joT(gt
z?dxBP$LxXmDRKA27vFt!eKcG>e)GMnd%pd>4)5$W0_3M^{*ly`q5AH%zy6uKyl~MP
zd@GLi{Gj&7DvMgT8ffNr9bEao&nvw0CcOmSUGF)({>>A_UA<WNkNa-_y}Gja+lvnX
Y;^T9fp&g(7`ndlS%A|7gQlk9we|Y1h?EnA(

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_restore_normal.9.png b/core/res/res/drawable-xhdpi/window_frame_restore_normal.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..00c7097f38818da4a5f9cd66033366bd6672b811
GIT binary patch
literal 1232
zcmaJ>Z)n_P7|+}sbF6bHOezyX<_eDH^6&E3i|bu-x1D<JaXr@3=~ym#uT9(J&63nh
zZ^Byf%VdIzOsbz8OhlnAW8ie)K;5AJT|rPL+g$z7O~>Ytei%;l&GoMHLs=kspEr4a
z&+qp<@AKqHv3qyh#>Y2e7}l2GqnFSsp*y!>J$g<}_syWCJ<Rrpy|5bA3?E==3swN0
zcZ@+$0){nya1Nv}Z0)dJ?hpG5&nqT$5=QKkh#U{0F)Xz!@(gnXgm?uE+OA66I&+r5
zZA&Hk_yS$<G%#fEsr#U}-d#59Bc^N-yPm;Qk%9s^AT;pE8Fd3CQi(=f1=;ayiohE#
z;fP8si|Q{FaSi$a=Myw((gKYOOoHK(q9}IaEX~jq%~A|YGNQt<3Qgn9i$H9?RaHuQ
zuE~XVDlrs>o<dQzS}jrI63`!{7+IF%7%WR74>A~cLn9*HV0$Zq4g%A+z0ig(9!E4P
za4b{_q;xq2$14<80=q%8P^e^7WOx*lpee_R^J;hpVF}!mv8s1a9`^uM0s$QJO>`dB
z?JY2>-TjGTN2EsS@ojV{#;6X>F$cI|URMe9C1Kf?VkBACw8Sb|VQHF7%A7zNmSB>S
zX$fLAX&8)2x8kgZmzgY|;e@Op$UKAWG^;Z@E#@SVl{iM1TiCoCgobN^7PpPKn^^t6
zSVi-J5kkKV;b^N1ibF7j!4ULtt(V6OhH1O;K0c!5jCJ7KF99p(LkDlvSg}{(XM{|a
zVKOY2W@$lU7)jCuUF0NQ6f$C3<B2BLTBUBhsLM$$EAnzKvz&KQ*LaE1B|6Pzbcvvl
z7%Fa%|20hO73#v+Txox_Ss5VUqN(xGcvL?4`4k$hyLmlbjxOG~IN$aKzUBNudh_JI
zKY#3d=lZ72SD&1|`f*QZdSPpH<cY3B#cNCd?)d7H=MKO5$K?DO_}bsp<)yig7CXOp
zzn*J<xN8Di^T4_dTkwXF>bOupJ->FFx_IoId9?4&>2KbB`^5f}?o%fgi(PZt-Vcj|
z1H&)oemVYrjjR_Rz1}`^!&sWRdGw))t%qh8Uhe(j)4kNxz+VM*alo0sa6o*pKKs+Q
z7oNT~{H=U`UDw2WJNB*r9DMiXrH=ZQ+_f~KzWH0{XXmEgg0n0wM#oZ*c>B8_yVSGu
v?5l_GvK`nxVMyVxmls~Y^7}u#C)QxMH|@MVdFPF1<9|#(+pSM$4!rUo!X%<a

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_restore_pushed.9.png b/core/res/res/drawable-xhdpi/window_frame_restore_pushed.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..cd242f1b23a1d825f456b8ab8048730bf1c4b43c
GIT binary patch
literal 1264
zcmaJ>ZD<>19KUtL&PueiuIr?O<0`Tb=I(hexmTL4NiJyvP1dCu?S#=@?w&Na_U_`{
zbxGrg7Ny1F2N8r}71;+FQ(Q%48_bFNVTDc^_(q@;QHKm<Y>dGQT3?<^lg<xi2Y1ig
z|M&a<{x8oh4rTfSZO^t51QAFLC|Nv;_)YG941eEV9{Cs#`@O`dH*6QYvg#lrs@r))
zrc8ALWs$1SytImX31a6-BRA@erUzxsHfhzjp(|zyqY0w-aHXVblgK0UXu_}})ZNd%
zph!cHP$OI#q)TyBGzO{;8m?w?T6I#Bbn5USvbQ2*0uy;ESuv+9SFS{;I<Ji9{x(CA
zbrWwgLT!o~O%IWA+d(8pgP;a@K=P1=p|BtbFOV#NfB`H6*&r0;5Gw;fHXaIlbM%6o
zRgw)~com_Fo>!6?rd%%5<q&N<6AY9j$>(6%Ahrm)GnS`Tf|lFUWKfW+IY!AdY>V_6
z)x16JMJTLvGX%4gPHz!gZX;1RWlTjaF^~p~Y5H;1tz9pR9?IC(+Re?B5R*l&J?&_?
z9)+GJ80YTMj(kI`Mn2*gxG3tBVr$bTvb>ZMq3{W<8@jB9Syt19LNLz)5DZHpKB(%v
z78Es|7Ybojg&Jt`Y=@5}0V{C{iRUE_!UPv(6{r9qDGIC@f{N6{rYzS}Ee$n&8`yUP
zD?Sn{#~q}4wv)5%sb&`p6>ZOUi*|{O4|8N%)eOsD`z6|pSV4|)3h7D5HpzO9Wn&xv
zkdGxGjIp683wRMiQH=A75E40oj|tH@M>VkeHhJR&MGD6g0w*P7n{kJgI443y1kq4T
z5h(_XVf+U9U&A!Fa2NX1t@g)@tqX)Kd}|zhJ>1y`cL-ufcS?!oDr>jbJ`cPK+82K9
zxkd~O_C>FT2j|WmpFhyv0RnsHN5*&dXWo+82lsAX8N1u@Mz?$GwZTK5{C0Zq`r^8K
zx%I+IR|=xz*Wyn<)i+1%XxX*9ovcqb#>Q8kY}r+L@x7(1r_r0nl76CgMm}~db>m{T
zc42*O{fU(>jhj1BTfJx=J^A|#eN(KSKl<+t&`H1FIRT!#-`jfLURt<xu<!br{Os%B
z-pZXSbuARdeIsB0c;%ZT;lk|qAFb~H;Z7O;*=@FvUuxNB5|{hR`)>dBPxaE`r*_Y~
zQLN`@tuvB8tG8+`>zTd%wVwjs@ccXUGWcMlZEWMa=ZS}UvG89G-2Z#6cJ_~#9|y!&
Wds6bf4?Fxn8Iek4l;zm?EB^t`kfwY9

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_restore_u.9.png b/core/res/res/drawable-xhdpi/window_frame_restore_u.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..f0043c1373baf096ef7b0ad02c9c0f7cc26f12d3
GIT binary patch
literal 1222
zcmaJ>TWB0r7#?+vaitfq6kA0PQ+&`kmou|-HJiG-v)im@)38}cv;{MnIh!3fbLq?^
zJ6RNpAYzRa%u}@>whtAQ*kZLoK_3J`F^HyBjD<EDY(PP=ST!nmW|NHyp#wALKj-}a
z_x;y-ZlHhPmgMdvK@eMty;>QsGJXr49r$}}cIZvK><aV4;h<X$8@i8(jOmUdP_*?i
zR7Scvb?9T%O%OLdVO561;ZmP!xHhfFI&@@v*qR`^_eP#>)KLgV(U|3=$)Dc)fCQGA
zCWnL)Tk>+KX7x6GG}!E~7|pt&nB?9b&>g85z(%1CB758k)F@51a8)eF#|#NtDq%fM
zt~oVa8UQ)hM?j!i%3wtnh>(VSN|K}p0LMa>VL1kJ6qHn+Q&|?QKO|=J&8k|~3hP{W
zmnLgr=&20TXf)^sPrLpY0~JMyF*uIG8dNalgnC3d!JamPh62O4ywGwT5F_fN?nIa-
zv8QVx*j}l$0qg|piNYykBHd#k%`&zf$JNpf!ZP~TjZL+K%9MwgG78)Y-@x^#?r9t2
z++Ck2R>a<@`+W-+MIYB(W5PyGSk%%azM)OaRP_|c8KzXFMmd(HQVK6px+xlzY?z`{
zP3bx`*f!2)_6p1kSzgSDq9Q;nXE+UNtW=OCPUfMev~7z{5bBPB+T0fAmhw;*1SntE
zR?YcH4_&|Fy5sFG7^u0S8`NA6<OT&$(hbXr_i>5VBG!;^O(L`4yEbU$ShY6chhjDl
zVV2`F94pEY%5qNBBwiLIF)L+q0=aH$Zjv`a(v(y#F9}K^yB2p!%Ly{nWH!TRHJN0v
zGfdnd|7n=^5$?iR+-QHi*%%<?;HmNPc<h$uU%{jGOHs>IqQxH<GszFZ_GgyPBrfi3
zK0llI?DK_dWOd=dj(1aCU8!4YCvSh@?|XVDzkT-Dbawj57njf7Va=3&=;NF(iXGb?
zI!xSfW1@3AXbFGqzr3<k*mnB2zL#bmyh8tRX#Tr{@`bLW`#P7t{$}fHQhxNx&*}G1
zyz}e9^CLxn{^D)*-#;4K0fg5UFCF>w_?KH(kIbFuId${dWc|$fk=J|X-oA8UB{+NQ
zVWRQKUAyL%VWaVK?WsFo?ZA}L^jj-;k3Bqjnq%*O<KAnD<6kZ0ug-iTEggM)G4X$|
ix*z-W^10^Kog>7l@9$fs&E*5}pQV`Z*JiULPyYkok(!bK

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_frame_sepline.png b/core/res/res/drawable-xhdpi/window_frame_sepline.png
new file mode 100644
index 0000000000000000000000000000000000000000..d40254377b72a896cc5561d6e02fa064e51441ef
GIT binary patch
literal 999
zcmbVL%Wl&^6t$>?P^GSUNoa7l#GV;DamT8ulDMIfaEa1LWJf3VB(WNM%y>$itSUCp
zzu*fHdlpFSSh43P_yfc^i3^LWNLaGx;d{=x&&%HNvz_e++nT2BbdUVLTA_Mx-MOv4
zk3PM6td{%oa41jsSk9?nS~KD!2D%BIus);F;`KMSuW4K3crcX1;JF*}#Gs{(Q6!l{
zYuf%nk<svsNibrQIQ8_OpTFoJjy(NkJ%B;hX4Cj+DcH&Kcn~hnLK5i*Pr-iSDuRSb
z3W{Ww=5FEXD_&Ra%WG2yD-(I<>1(HkK@YUKV4!ZmS_m5uG?0NT+i{#H07C>#h)slR
z$Z;*~LI^gGuGB;{cKd#3qoq!sK9w?aO>;h<8*|IxVqzjfNXdb5O<C0PMJj1gOY_}|
z!Do3W;!MUo1tlXL@pI|v%F}fSNfrcG#A&`sluDUd(9A>zG?S!^Yh|6wKKtXwwbuDy
zkukH+a(*sCRgdv*1y;GcS*SEr-ncJBtcpTsJ`c|mmddX0>FSRW#gU8mEZf3Oge?pk
zdk7H(2|>hZ;fC#We7oYf4ofh$h=uA6LYfF2)>}5Rn^wo^SQc*ht$Ky+rn#hP$SU1f
z>29$0jaauW7?oTMIG<G=(3^6}^C{0j`=ky68pdgPF3Yoy)@LGq!=jGh30URVjjz$i
z<X>^GvC;qJ%v8>pWpn)1EY+3jz;b)l`s#2sJS<fcBh+Zjem(rI#_Dd@Zw`tdqv-S$
hj_-ZFxTNp5F0?JJ_d#>sv9wi=Uia|W|JXWx`x{)pE!hA7

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_pined.9.png b/core/res/res/drawable-xhdpi/window_pined.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..f79a2703986a1235e46145aa10939205c0d1d676
GIT binary patch
literal 1519
zcmaJ>3rrJd9KV7(1qsMQhh)p`RAfqfk3O!gRB3yyeOSTLjb@3C<9f9>=v}>DrLeI<
zC+bABN;U_IQ%R;S4uV6_AuOA2Va_Fz1vR=&lR1Zv>9WPSh>N=dWm`hL<nH@_-}nFh
z{_lIIc=gJZr1?nz0Hjzggi~DA;%lBcL;SXMly-_swqSA#C7f5NB6%9nd$@8MwED^Q
zw38-1)f>L13jiSTHOA!@+>TXRiu23Jn2s#$4~S?0C|D5=kW>XNfaUahhSfp$`#ys}
z#-oEul@7!aFw#E8Qp3|FHLG1zO$DX#Kr5Dm1!1j7;HL!=4ErnDpf;?7#(1@&96N>~
za7;z0&_Ux)xgEuzk>hDlDMO?bqC!9wDnsQ89LMuP3_%eX!C(}VqPSL$X%PgRcp%Xl
z@9}D#gn7c2xYI#CK?rDJxT>m3Rwb8l{CXJGXf!bn43ml)(qJ_!kYOnsTo7j<=pe;2
z0fFIIFvduhb0I+oiJp#!;14()lf-OrB2i+>;4m40Q5gdJ{js>lw1a|^{@0BuwS%te
z01Z3oAQ$2(u^!$9aj=-XryGhXir#38ct$J=SxInI$WOC^mC!-rjm*P%w4?&VC=c$H
zmSYGaRcPcYDd|yBQZ?mK;a&wvq7)M6nF_DR^eAFhnh7JWKv9!YgK6{{y<DSKAV$<|
zP{y%VHYkuRMaOM3qU{N+>8V()k*7(4<6RtA8SjE(A181@9~S_PB}&jiQVbj0$4WFF
zF+uapM%rWMIX^g-V=Xg<eH1sCP}G3Q^%$a3qo`VKR1vsbt;AIZTyGS8AIEy8$eR);
zGzy~$S8B|LSloI{K^T>4lu#pjxq(nau;>gNYmommO#Ddf!k9SO{^DkGfM`~n8eSZa
zhil$G3;+o^RzmLzU%A`bZ%fo?HdJNIn)!0i(e61=B#Niy6ZX$-UFn$%k2FQ{wv`vV
z67*{<?Wtw-&-R)1b-wnfEp1a72;RxwSLi-;yiYzV-=DlC`4f5HAHTM>EyK_D41C*l
zy2Wpz25#PR-)wC@J{wO+kJe3F2ufyI3dhCkPo^n;ICONR?cK`GTlQ{XaC)<3<$*>7
zY)?3Eg~55D<%2t}kJ``F7PjoTxoEWeP4--_{6-{W<A+OkAC0zOdgfuq*148t3z1!O
z&u%_G{lSx=+U##m9J@W#<3+kMe_7<dc&7NJ=p#UKX-3X()yY}W+Y*T?rT4pCNfCFk
zB~%CGY*|+Kd(ySi<ko~6ZP%Cwd6B&heM#ZHMI$plvJC@&rtMvu8HH-@NZ1W22Toni
zty#q;c0615;=Qky57`HI?>v~bz1DWln)_4NTNzi12xa|!WN}gcx?|f%hMS$T=L}5h
z-#L<js{zTJe)Obu=b0U8{k@kH&&|L8*B;pknZNUb)w$$Rwy)bhs#DbGr8N3Zbz}|w
zcp=5NbnE`ShUeD~f6+Kt0USB`Xj@*Vp}Zvf?1T62*&JW4`S^n5p$u<I&%Jhc_u@-8
z_>RrMyn@L4$MV*FK;P@z)Dz<7lPd$MpEjsMZN#D1l}9cfeB=AWOg8(t_XSBaFoHz>
pSBLSE<etB>;&JOM!&hHTm<{YZy{B+VlPMVc1zSz4i4H?q<R9Q88-V}-

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable-xhdpi/window_unpin.9.png b/core/res/res/drawable-xhdpi/window_unpin.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..59b6b9722a398316c428de75807dbeef713d32b5
GIT binary patch
literal 1516
zcmaJ>eNYr-7++3BK8Bi9QbBWBYXt3XKkj31cR1y4_fAj_uLJTxEtcIq+3;?+y~Vqu
zFR@T49hppxu|WqKnglJGBFGfK#?iFGiWxP<G)zSb%}N<{Y!5v155}F@_kEvtpWpBK
z-db1Q{G^1G1ONb%a<XZ+x|`M45f`hj^}7~-rfyReyGO|vy-JXgdBDnvr97D9W0v!7
zp5el;9^*3sV9YB*fk*K;b4gb8>6nO)F65I`Gyr7I3rP%H&MROkzg+NJpus&|5GZgK
zXtB|WI3<cN6S6C1KEE=rfUPWN2@aY!7t9QiDuItz7%=2p;SZ1@3pC72s^`cx41vQc
zO1T9ZamwR#fs`oopizftS;T~ZCRB&&4LFWJ4`K+4zz7DTm=?uJJw_r3_~3z5Ycl60
z-L&I@Emg8WWr`w^FdPg9bwRyOl$XOOK@brR4AZI_+CbQ^Fd?l!Ff+<P^8r>CBt;PY
zV1$t=6)O}Aq<T6Mf=_Zf9}@cm4-%!O3=T08jOq~B=ZnNOtQ}C?{Qqu@svRf@OFZo6
z17d~Ds`c>BjDpqNJ>F16QT2vgBnxU$m=(0hR`__ol0#b{^^1-ZIFd177|Y>aZ7GHz
zS_7dsX&KJMYRxQX!o3EDL0KfqGa8=I+ff7VKxhg#ps3wQV1$*h>It&}p-_j-7{%uJ
z0}A73`KWC{wLOBhJ06QADVb*!Q7#b0711tmm5GWNC=(@+$~S^eh86q~IZ~pLh-qFH
zR`Q%f7JcAwj!9t@`zUU+qo@tjTQS6BMp3hwGSRr+Y{X4A+)Amwk6^h`@@B+o!a&(^
zBjK<`;<jQ2nlhSE+KgEBHrfoqsxxq;K^|$C=#|=qk>kVmSA~ZI#QW8$k=5}4=6rA$
z05nr_Xlp^}%)seo^T)n0W&CwwPf=rwf6tDs>AMH;8l8K~$-=9%i`yn;xZnL^K}K84
zmFBrwGq%IKi#Px5JXuJ$Zhr2k`(>r;cAjY1629?PXqxx(ANUXT#AVNg*VkTqC-DM3
zaoM>~u6>Lz)x<wrm-Xn9tL;v61^R9dy|iS1F1@IIY+vL0MEkgDRKqV>j&aj&6xS}r
z!f8((xU<E6v+Bf<X>$3O#YXMmuM#k;sdUHtQ;+vtqi&`ij&plfA7iX<y4vgR-5=Pu
z?$65RmiH14A*YikXP(Ncp(@h8i>bO(m9#RPFg^QT)_!mI!0k1fO)h)?7>%jQJEN%k
z_BUsa3ZOW1oCaU}`+^&WZAVkNbH`&#ZtcF>nDuS{&N&}lOxZqk>WRNQI+F~1^{$Ss
zHJ_%;4nvC*)1GX(7?ZpaD?DC(wyXN=!oyr@&qnIdbS(Aa=Tw2H%}DHhyRM`8;A`c<
zw)Oq%o9Yw7AGY=`8K~+_8N9M#S<3YGz0ih@ZH?PDeV^AfUY<~xvZ*KG?u$qMZ5Fn7
zyDXiPD&tz8Zn)GDyPq$4x#&`IU!ok>^;OcHv(F^W${3Ocd*}Z)2|wSDO!fTpb>N&P
zZ|~}kqR!A8e;wJE*w=n_!<wGX^i|1X^}hI1O%uDMLW$rG)CRA2#cSf%#nj!uJ|P>d
m8vE!{^5d$5u#>5QV`72y8RyA`eYeg>{=Yf)JbIU{Wc7bK3n{Ds

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/chaozhuo_resolver_default_background.xml b/core/res/res/drawable/chaozhuo_resolver_default_background.xml
new file mode 100644
index 0000000..4fb43e1
--- /dev/null
+++ b/core/res/res/drawable/chaozhuo_resolver_default_background.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!--
+     Copyright (C) 2014 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+<corners android:radius="2dp" />
+<solid android:color="@color/chaozhuo_resolver_default_color" />
+</shape>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/chaozhuo_resolver_lastused_background.xml b/core/res/res/drawable/chaozhuo_resolver_lastused_background.xml
new file mode 100644
index 0000000..5e9dced
--- /dev/null
+++ b/core/res/res/drawable/chaozhuo_resolver_lastused_background.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!--
+     Copyright (C) 2014 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+<corners android:radius="2dp" />
+<solid android:color="@color/chaozhuo_resolver_lastused_color" />
+</shape>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/chaozhuo_resolver_list_item_background.xml b/core/res/res/drawable/chaozhuo_resolver_list_item_background.xml
new file mode 100644
index 0000000..20c25fd
--- /dev/null
+++ b/core/res/res/drawable/chaozhuo_resolver_list_item_background.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!-- Copyright (C) 2008 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+  
+          http://www.apache.org/licenses/LICENSE-2.0
+  
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:state_hovered="true" android:drawable="@color/chaozhuo_resolver_list_item_hovered" />
+    <item android:state_pressed="true" android:drawable="@color/chaozhuo_resolver_list_item_pressed" />
+    <item android:state_activated="true"  android:drawable="@color/chaozhuo_resolver_list_item_pressed" />
+    <item android:state_focused="true"  android:drawable="@color/chaozhuo_resolver_list_item_pressed" />
+    <item android:drawable="@android:color/transparent" />
+
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_drag.xml b/core/res/res/drawable/pointer_arrow_drag.xml
new file mode 100644
index 0000000..48f1150
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_drag.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_drag"
+    android:hotSpotX="14dp"
+    android:hotSpotY="14dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_input.xml b/core/res/res/drawable/pointer_arrow_input.xml
new file mode 100644
index 0000000..d36de05
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_input.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_input"
+    android:hotSpotX="14dp"
+    android:hotSpotY="14dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_lean14.xml b/core/res/res/drawable/pointer_arrow_lean14.xml
new file mode 100644
index 0000000..2fa061b
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_lean14.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_lean14"
+    android:hotSpotX="14dp"
+    android:hotSpotY="14dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_lean23.xml b/core/res/res/drawable/pointer_arrow_lean23.xml
new file mode 100644
index 0000000..0b1dc2d
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_lean23.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_lean23"
+    android:hotSpotX="14dp"
+    android:hotSpotY="14dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_leftright.xml b/core/res/res/drawable/pointer_arrow_leftright.xml
new file mode 100644
index 0000000..0220ac8
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_leftright.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_left_right"
+    android:hotSpotX="14dp"
+    android:hotSpotY="14dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_link.xml b/core/res/res/drawable/pointer_arrow_link.xml
new file mode 100644
index 0000000..3c6efcc
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_link.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_link"
+    android:hotSpotX="6dp"
+    android:hotSpotY="2dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/pointer_arrow_updown.xml b/core/res/res/drawable/pointer_arrow_updown.xml
new file mode 100644
index 0000000..687be27
--- /dev/null
+++ b/core/res/res/drawable/pointer_arrow_updown.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
+    android:bitmap="@drawable/point_arrow_up_down"
+    android:hotSpotX="14dp"
+    android:hotSpotY="14dp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/text_edit_context_menu_item_bg.xml b/core/res/res/drawable/text_edit_context_menu_item_bg.xml
new file mode 100644
index 0000000..1d6b1b1
--- /dev/null
+++ b/core/res/res/drawable/text_edit_context_menu_item_bg.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/context_item_bg_color_hover" android:state_hovered="true"/>
+    <item android:drawable="@color/context_item_bg_color_nomal" android:state_window_focused="true"/>
+
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_back.xml b/core/res/res/drawable/window_frame_back.xml
new file mode 100644
index 0000000..6fbcd48
--- /dev/null
+++ b/core/res/res/drawable/window_frame_back.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_focused="true"
+    android:drawable="@drawable/window_frame_back_hover" />
+  <item
+    android:state_hovered="true"
+    android:drawable="@drawable/window_frame_back_hover" />
+  <item
+    android:state_enabled="false"
+    android:drawable="@drawable/window_frame_back_u" />
+  <item
+    android:state_pressed="true"
+    android:drawable="@drawable/window_frame_back_pushed" />
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_back_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_back_normal" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_bg.xml b/core/res/res/drawable/window_frame_bg.xml
new file mode 100644
index 0000000..e553423
--- /dev/null
+++ b/core/res/res/drawable/window_frame_bg.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_bk_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_bk" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_close.xml b/core/res/res/drawable/window_frame_close.xml
new file mode 100644
index 0000000..4cfa733
--- /dev/null
+++ b/core/res/res/drawable/window_frame_close.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_focused="true"
+    android:drawable="@drawable/window_frame_close_hover" />
+  <item
+    android:state_hovered="true"
+    android:drawable="@drawable/window_frame_close_hover" />
+  <item
+    android:state_enabled="false"
+    android:drawable="@drawable/window_frame_close_u" />
+  <item
+    android:state_pressed="true"
+    android:drawable="@drawable/window_frame_close_pushed" />
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_close_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_close_normal" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_drag.xml b/core/res/res/drawable/window_frame_drag.xml
new file mode 100644
index 0000000..67e4af0
--- /dev/null
+++ b/core/res/res/drawable/window_frame_drag.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_focused="true"
+    android:drawable="@drawable/window_frame_drag_hover" />
+  <item
+    android:state_hovered="true"
+    android:drawable="@drawable/window_frame_drag_hover" />
+  <item
+    android:state_pressed="true"
+    android:drawable="@drawable/window_frame_drag_pushed" />
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_drag_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_drag_normal" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_header_back.xml b/core/res/res/drawable/window_frame_header_back.xml
new file mode 100644
index 0000000..e356fa1
--- /dev/null
+++ b/core/res/res/drawable/window_frame_header_back.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_head_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_head" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_maxmize.xml b/core/res/res/drawable/window_frame_maxmize.xml
new file mode 100644
index 0000000..4e97550
--- /dev/null
+++ b/core/res/res/drawable/window_frame_maxmize.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_focused="true"
+    android:drawable="@drawable/window_frame_max_hover" />
+  <item
+    android:state_hovered="true"
+    android:drawable="@drawable/window_frame_max_hover" />
+  <item
+    android:state_enabled="false"
+    android:drawable="@drawable/window_frame_max_u" />
+  <item
+    android:state_pressed="true"
+    android:drawable="@drawable/window_frame_max_pushed" />
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_max_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_max_normal" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_min.xml b/core/res/res/drawable/window_frame_min.xml
new file mode 100644
index 0000000..a3aa66b
--- /dev/null
+++ b/core/res/res/drawable/window_frame_min.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_focused="true"
+    android:drawable="@drawable/window_frame_min_hover" />
+  <item
+    android:state_hovered="true"
+    android:drawable="@drawable/window_frame_min_hover" />
+  <item
+    android:state_enabled="false"
+    android:drawable="@drawable/window_frame_min_u" />
+  <item
+    android:state_pressed="true"
+    android:drawable="@drawable/window_frame_min_pushed" />
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_min_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_min_normal" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/drawable/window_frame_restore.xml b/core/res/res/drawable/window_frame_restore.xml
new file mode 100644
index 0000000..60325ba
--- /dev/null
+++ b/core/res/res/drawable/window_frame_restore.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+    android:state_focused="true"
+    android:drawable="@drawable/window_frame_restore_hover" />
+  <item
+    android:state_hovered="true"
+    android:drawable="@drawable/window_frame_restore_hover" />
+  <item
+    android:state_enabled="false"
+    android:drawable="@drawable/window_frame_restore_u" />
+  <item
+    android:state_pressed="true"
+    android:drawable="@drawable/window_frame_restore_pushed" />
+  <item
+    android:state_window_focused="false"
+    android:drawable="@drawable/window_frame_restore_u" />
+  <item
+    android:state_window_focused="true"
+    android:drawable="@drawable/window_frame_restore_normal" />
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/layout/app_first_open_fullscreen_tips.xml b/core/res/res/layout/app_first_open_fullscreen_tips.xml
new file mode 100644
index 0000000..b9bd222
--- /dev/null
+++ b/core/res/res/layout/app_first_open_fullscreen_tips.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="260dp"
+        android:layout_height="140dp"
+        android:layout_gravity="center"
+        android:background="#595959"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tipsMsg"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="5dp"
+            android:padding="15dp"
+            android:text="@android:string/app_first_open_fullscreen_mode"
+            android:textColor="@android:color/white"
+            android:textSize="16sp" />
+
+        <TextView
+            android:id="@+id/app_first_open_got_it"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:ellipsize="end"
+            android:gravity="right"
+            android:paddingRight="15dp"
+            android:paddingBottom="15dp"
+            android:singleLine="true"
+            android:text="@android:string/app_first_open_got_it"
+            android:textColor="@android:color/white"
+            android:textSize="17sp" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/core/res/res/layout/app_first_open_window_tips.xml b/core/res/res/layout/app_first_open_window_tips.xml
new file mode 100644
index 0000000..31c87f7
--- /dev/null
+++ b/core/res/res/layout/app_first_open_window_tips.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="210dp"
+        android:layout_height="140dp"
+        android:layout_gravity="center"
+        android:background="#595959"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tipsMsg"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="5dp"
+            android:padding="15dp"
+            android:text="@android:string/app_first_open_window_mode"
+            android:textColor="@android:color/white"
+            android:textSize="16sp" />
+
+        <TextView
+            android:id="@+id/app_first_open_got_it"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:ellipsize="end"
+            android:gravity="right"
+            android:paddingRight="15dp"
+            android:paddingBottom="15dp"
+            android:singleLine="true"
+            android:text="@android:string/app_first_open_got_it"
+            android:textColor="@android:color/white"
+            android:textSize="17sp" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/core/res/res/layout/app_switch_to_window_nosupport.xml b/core/res/res/layout/app_switch_to_window_nosupport.xml
new file mode 100644
index 0000000..932f4a8
--- /dev/null
+++ b/core/res/res/layout/app_switch_to_window_nosupport.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="260dp"
+        android:layout_height="60dp"
+        android:layout_gravity="center"
+        android:background="#595959"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tipsMsg"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="5dp"
+            android:padding="15dp"
+            android:text="@android:string/app_no_support_for_window_mode"
+            android:textColor="@android:color/white"
+            android:textSize="16sp" />
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/core/res/res/layout/app_too_many_window_tips.xml b/core/res/res/layout/app_too_many_window_tips.xml
new file mode 100644
index 0000000..0f25f58
--- /dev/null
+++ b/core/res/res/layout/app_too_many_window_tips.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="350dp"
+        android:layout_height="120dp"
+        android:layout_gravity="center"
+        android:background="#595959"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tipsMsg"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:padding="20dp"
+            android:text="@android:string/too_many_window_opened"
+            android:textColor="@android:color/white"
+            android:textSize="16sp" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/core/res/res/layout/cz_notification_template_material_big_base.xml b/core/res/res/layout/cz_notification_template_material_big_base.xml
new file mode 100644
index 0000000..20ba354
--- /dev/null
+++ b/core/res/res/layout/cz_notification_template_material_big_base.xml
@@ -0,0 +1,239 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+-->
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:internal="http://schemas.android.com/apk/prv/res/android"
+    android:id="@+id/status_bar_latest_event_content"
+    android:layout_width="match_parent"
+    android:layout_height="128dp"
+    android:background="#ffffff"
+ >
+ <!--
+ @drawable/common_popup_bg
+    internal:layout_maxHeight="unbounded"
+    internal:layout_minHeight="180dp"
+    -->
+    <FrameLayout
+        android:id="@+id/icon_group"
+        android:layout_width="@dimen/notification_large_icon_width"
+        android:layout_height="@dimen/notification_large_icon_height" >
+
+        <ImageView
+            android:id="@+id/icon"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_marginBottom="12dp"
+            android:layout_marginEnd="12dp"
+            android:layout_marginStart="12dp"
+            android:layout_marginTop="12dp"
+            android:scaleType="centerInside" />
+
+        <ImageView
+            android:id="@+id/right_icon"
+            android:layout_width="16dp"
+            android:layout_height="16dp"
+            android:layout_gravity="end|bottom"
+            android:layout_marginBottom="8dp"
+            android:layout_marginEnd="8dp"
+            android:padding="3dp"
+            android:scaleType="centerInside"
+            android:visibility="gone" />
+    </FrameLayout>
+
+    <LinearLayout
+        android:id="@+id/notification_main_column"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="top"
+        android:layout_marginStart="@dimen/notification_large_icon_width"
+        android:minHeight="@dimen/notification_large_icon_height"
+        android:orientation="vertical" >
+
+        <LinearLayout
+            android:id="@+id/line1"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:orientation="horizontal" >
+
+            <TextView
+                android:id="@+id/title"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:ellipsize="marquee"
+                android:fadingEdge="horizontal"
+                android:singleLine="true"
+                android:textColor="#000000"
+                android:textAppearance="@style/TextAppearance.Material.Notification.Title"
+                android:textSize="16sp" />
+            <!-- android:textColor="#ffffff" -->
+
+            <ViewStub
+                android:id="@+id/time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="0"
+                android:layout="@layout/notification_template_part_time_phoenix"
+                android:visibility="gone" />
+
+            <ViewStub
+                android:id="@+id/chronometer"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="0"
+                android:layout="@layout/notification_template_part_chronometer"
+                android:visibility="gone" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:gravity="center_vertical"
+            android:orientation="horizontal" >
+
+            <TextView
+                android:id="@+id/text2"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="-1dp"
+                android:layout_marginTop="-1dp"
+                android:layout_weight="1"
+                android:ellipsize="marquee"
+                android:fadingEdge="horizontal"
+                android:singleLine="true"
+                android:textAppearance="@style/TextAppearance.Material.Notification.Line2"
+                android:textSize="14sp"
+                android:textColor="#F95D5D"
+                android:visibility="gone" />
+            <!-- android:textColor="#adadad" -->
+
+            <ImageView
+                android:id="@+id/profile_badge_line2"
+                android:layout_width="@dimen/notification_badge_size"
+                android:layout_height="@dimen/notification_badge_size"
+                android:layout_marginStart="4dp"
+                android:layout_weight="0"
+                android:scaleType="fitCenter"
+                android:visibility="gone" />
+        </LinearLayout>
+
+        <ViewStub
+            android:id="@android:id/progress"
+            android:layout_width="match_parent"
+            android:layout_height="15dp"
+            android:layout_marginEnd="8dp"
+            android:layout_weight="0"
+            android:layout="@layout/notification_template_progressbar"
+            android:visibility="gone" />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:gravity="top"
+            android:orientation="horizontal" >
+
+            <TextView
+                android:id="@+id/big_text"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:singleLine="false"
+                android:textAppearance="@style/TextAppearance.Material.Notification"
+                android:visibility="gone" />
+
+            <ImageView
+                android:id="@+id/profile_badge_large_template"
+                android:layout_width="@dimen/notification_badge_size"
+                android:layout_height="@dimen/notification_badge_size"
+                android:layout_marginStart="4dp"
+                android:layout_weight="0"
+                android:scaleType="fitCenter"
+                android:visibility="gone" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/line3"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:gravity="center_vertical"
+            android:orientation="horizontal" >
+
+            <TextView
+                android:id="@+id/text"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:layout_weight="1"
+                android:ellipsize="marquee"
+                android:fadingEdge="horizontal"
+                android:singleLine="true"
+                android:textAppearance="@style/TextAppearance.Material.Notification"
+                android:textSize="14sp" />
+            <!-- android:textColor="#adadad" -->
+
+            <TextView
+                android:id="@+id/info"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:layout_weight="0"
+                android:gravity="center"
+                android:paddingStart="8dp"
+                android:singleLine="true"
+                android:textAppearance="@style/TextAppearance.Material.Notification.Info"
+                android:textColor="#adadad"
+                android:textSize="14sp" />
+
+            <ImageView
+                android:id="@+id/profile_badge_line3"
+                android:layout_width="@dimen/notification_badge_size"
+                android:layout_height="@dimen/notification_badge_size"
+                android:layout_gravity="center"
+                android:layout_marginStart="4dp"
+                android:layout_weight="0"
+                android:scaleType="fitCenter"
+                android:visibility="gone" />
+        </LinearLayout>
+
+        <ImageView
+            android:id="@+id/action_divider"
+            android:layout_width="match_parent"
+            android:layout_height="1dp"
+            android:layout_marginTop="20dp"
+            android:background="@drawable/notification_template_divider"
+            android:visibility="gone" />
+
+        <LinearLayout
+            android:id="@+id/actions"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="8dp"
+            android:layout_marginStart="-8dp"
+            android:orientation="horizontal"
+             >
+
+            <!-- actions will be added here -->
+        </LinearLayout>
+    </LinearLayout>
+
+</FrameLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/layout/dialog_frame.xml b/core/res/res/layout/dialog_frame.xml
new file mode 100644
index 0000000..e7045f7
--- /dev/null
+++ b/core/res/res/layout/dialog_frame.xml
@@ -0,0 +1,123 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/window_frame"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:background="@drawable/window_frame_bg" >
+
+    <!-- android:background="@drawable/window_frame_bg" -->
+
+    <LinearLayout
+        android:id="@+id/mwDecorHeader"
+        android:layout_alignLeft="@+id/decor_container"
+        android:layout_alignRight="@id/decor_container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:background="@drawable/window_frame_header_back"
+        android:orientation="horizontal" >
+
+        <ImageButton
+            android:id="@+id/mwBackBtn"
+            android:layout_width="@dimen/frame_btn_width"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical"
+            android:layout_marginLeft="0dp"
+            android:background="@null"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_back" />
+
+        <ImageView
+            android:id="@+id/mwSep1"
+            android:layout_width="1dp"
+            android:layout_height="match_parent"
+            android:layout_gravity="center_vertical"
+            android:background="#eaeaea"/>
+
+        <LinearLayout
+            android:id="@+id/wmAppCustomized"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical"
+            android:layout_weight="1"
+            android:orientation="horizontal"
+            android:visibility="visible" >
+
+            <TextView
+                android:id="@+id/mwTitle"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:ellipsize="end"
+                android:gravity="center"
+                android:paddingLeft="8dp"
+                android:singleLine="true"
+                android:textColor="@android:color/black"
+                android:textSize="16sp" />
+        </LinearLayout>
+
+        <View
+            android:layout_width="0dp"
+            android:layout_height="@dimen/mw_header_height" />
+
+        <ImageButton
+            android:id="@+id/mwStretchBtn"
+            android:layout_width="@dimen/frame_btn_width"
+            android:layout_height="match_parent"
+            android:layout_gravity="center_vertical"
+            android:background="@null"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_drag" />
+
+        <ImageButton
+            android:id="@+id/mwMinBtn"
+            android:layout_width="@dimen/frame_btn_width"
+            android:layout_height="match_parent"
+            android:layout_gravity="center_vertical"
+            android:background="@null"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_min" />
+
+        <ImageButton
+            android:id="@+id/mwMaxBtn"
+            android:layout_width="@dimen/frame_btn_width"
+            android:layout_height="match_parent"
+            android:layout_gravity="center_vertical"
+            android:background="@null"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_maxmize" />
+
+        <ImageView
+            android:id="@+id/mwSep2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical"
+            android:visibility = "invisible"
+            android:src="@drawable/window_frame_header_line" />
+
+        <ImageButton
+            android:id="@+id/mwCloseBtn"
+            android:layout_width="@dimen/frame_btn_width"
+            android:layout_height="match_parent"
+            android:background="@null"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_close" />
+    </LinearLayout>
+
+    <FrameLayout
+        android:id="@+id/decor_container"
+        android:layout_below="@id/mwDecorHeader"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" >
+
+        <ImageView
+            android:id="@+id/mwSepLine"
+            android:layout_width="match_parent"
+            android:layout_height="1dp"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_sepline" />
+    </FrameLayout>
+
+</RelativeLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/layout/notification_template_part_time_phoenix.xml b/core/res/res/layout/notification_template_part_time_phoenix.xml
new file mode 100644
index 0000000..888b0a6
--- /dev/null
+++ b/core/res/res/layout/notification_template_part_time_phoenix.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<!-- CHAOZHUO START -->
+<DateTimeView android:id="@+id/time" xmlns:android="http://schemas.android.com/apk/res/android"
+    android:textAppearance="@style/TextAppearance.Material.Notification.Time"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:layout_weight="0"
+    android:singleLine="true"
+    android:gravity="center"
+    android:paddingStart="8dp"
+    android:textColor="#adadad"
+    />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/layout/text_edit_action_popup_text_phoenix.xml b/core/res/res/layout/text_edit_action_popup_text_phoenix.xml
new file mode 100644
index 0000000..ed906dd
--- /dev/null
+++ b/core/res/res/layout/text_edit_action_popup_text_phoenix.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<!-- CHAOZHUO START -->
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:paddingStart="17dip"
+    android:paddingEnd="17dip"
+    android:paddingTop="14dip"
+    android:paddingBottom="14dip"
+    android:gravity="center"
+    android:textAppearance="?android:attr/textAppearanceSmallInverse"
+    android:textColor="@android:color/edit_popup_text_color"
+    android:textAllCaps="true"
+/>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/layout/text_edit_context_menu_item.xml b/core/res/res/layout/text_edit_context_menu_item.xml
new file mode 100644
index 0000000..b95c6b5
--- /dev/null
+++ b/core/res/res/layout/text_edit_context_menu_item.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/context_menu_item_tv"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:paddingStart="21dip"
+    android:paddingEnd="21dip"
+    android:paddingTop="8dip"
+    android:paddingBottom="8dip"
+    android:minWidth="100dp"
+    android:gravity="left"
+    android:textAppearance="?android:attr/textAppearanceSmallInverse"
+    android:textColor="@android:color/edit_popup_text_color"
+    android:textAllCaps="true"
+/>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/layout/window_frame.xml b/core/res/res/layout/window_frame.xml
new file mode 100644
index 0000000..d9e495e
--- /dev/null
+++ b/core/res/res/layout/window_frame.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/window_frame"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@drawable/window_frame_bg"
+    android:orientation="vertical" >
+
+    <!-- android:background="@drawable/window_frame_bg" -->
+
+    <RelativeLayout
+        android:id="@+id/mwDecorHeader"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/mw_header_height"
+        android:layout_gravity="center"
+        android:background="@drawable/window_frame_header_back"
+        android:orientation="horizontal" >
+
+        <ImageButton
+            android:id="@+id/mwPin"
+            android:layout_width="@dimen/frame_btn_width"
+            android:layout_height="match_parent"
+            android:layout_alignParentRight="true"
+            android:background="@null"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_unpin" />
+        
+        <TextView
+            android:id="@+id/mwTitle"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_alignParentLeft="true"
+            android:gravity="left|center_vertical"
+            android:ellipsize="end"
+            android:paddingLeft="20dp"
+            android:singleLine="true"
+            android:textColor="@android:color/black"
+            android:textSize="16sp" />
+
+    </RelativeLayout>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" >
+
+        <FrameLayout
+            android:id="@+id/decor_container"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <ImageView
+            android:id="@+id/mwSepLine"
+            android:layout_width="match_parent"
+            android:layout_height="1dp"
+            android:scaleType="fitXY"
+            android:src="@drawable/window_frame_sepline" />
+    </FrameLayout>
+
+</LinearLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/values-zh-rCN/strings.xml b/core/res/res/values-zh-rCN/strings.xml
index 4bd0040..8601532 100644
--- a/core/res/res/values-zh-rCN/strings.xml
+++ b/core/res/res/values-zh-rCN/strings.xml
@@ -201,7 +201,9 @@
     <string name="shutdown_confirm_question" msgid="2906544768881136183">"您要关机吗？"</string>
     <string name="reboot_safemode_title" msgid="7054509914500140361">"重新启动并进入安全模式"</string>
     <string name="reboot_safemode_confirm" msgid="55293944502784668">"您要重新启动并进入安全模式吗？这样会停用您已安装的所有第三方应用。再次重新启动将恢复这些应用。"</string>
-    <string name="recent_tasks_title" msgid="3691764623638127888">"近期任务"</string>
+    <!-- CHAOZHUO START -->
+    <string name="recent_tasks_title" msgid="3691764623638127888">"最近任务"</string>
+    <!-- CHAOZHUO END -->
     <string name="no_recent_tasks" msgid="8794906658732193473">"最近没有运行任何应用"</string>
     <string name="global_actions" product="tablet" msgid="408477140088053665">"平板电脑选项"</string>
     <string name="global_actions" product="tv" msgid="7240386462508182976">"电视选项"</string>
@@ -1047,7 +1049,9 @@
     <string name="adb_active_notification_message" msgid="1016654627626476142">"触摸可停用USB调试。"</string>
     <string name="select_input_method" msgid="8547250819326693584">"更改键盘"</string>
     <string name="configure_input_methods" msgid="4769971288371946846">"选择键盘"</string>
-    <string name="show_ime" msgid="9157568568695230830">"显示输入法"</string>
+    <!-- CHAOZHUO START -->
+    <string name="show_ime" msgid="9157568568695230830">"显示软键盘"</string>
+    <!-- CHAOZHUO END -->
     <string name="hardware" msgid="7517821086888990278">"硬件"</string>
     <string name="select_keyboard_layout_notification_title" msgid="1407367017263030773">"选择键盘布局"</string>
     <string name="select_keyboard_layout_notification_message" msgid="4465907700449257063">"触摸可选择键盘布局。"</string>
diff --git a/core/res/res/values/attrs.xml b/core/res/res/values/attrs.xml
index 15a8b8c..a38ab47 100644
--- a/core/res/res/values/attrs.xml
+++ b/core/res/res/values/attrs.xml
@@ -551,6 +551,9 @@
              Activity Transition. Corresponds to
              {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}. -->
         <attr name="windowTransitionBackgroundFadeDuration" format="integer"/>
+	<!-- CHAOZHUO START -->
+        <attr name="windowWithWindowFrame" format="boolean" />
+	<!-- CHAOZHUO END -->
 
         <!-- ============ -->
         <!-- Floating toolbar styles -->
@@ -936,6 +939,9 @@ i
 
         <!-- Theme to use for dialogs spawned from this theme. -->
         <attr name="dialogTheme" format="reference" />
+	<!-- CHAOZHUO START -->
+        <attr name="dialogThemeWithFrame" format="reference" />
+	<!-- CHAOZHUO END -->
         <!-- Window decor layout to use in dialog mode with icons. -->
         <attr name="dialogTitleIconsDecorLayout" format="reference" />
         <!-- Window decor layout to use in dialog mode with custom titles. -->
@@ -1877,6 +1883,9 @@ i
         <attr name="windowContentTransitionManager" />
         <attr name="windowActionBarFullscreenDecorLayout" />
 
+        <!-- CHAOZHUO START -->
+        <attr name="windowWithWindowFrame" />
+	<!-- CHAOZHUO END -->
         <!-- The minimum width the window is allowed to be, along the major
              axis of the screen.  That is, when in landscape.  Can be either
              an absolute dimension or a fraction of the screen size in that
@@ -7600,6 +7609,22 @@ i
         <attr name="pointerIconSpotTouch" format="reference" />
         <!-- Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR -->
         <attr name="pointerIconSpotAnchor" format="reference" />
+	<!-- CHAOZHUO START -->
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowLeftRight" format="reference" />
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowUpDown" format="reference" />
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowTopLeft" format="reference" />
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowTopRight" format="reference" />
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowDrag" format="reference" />
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowInput" format="reference" />
+        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
+        <attr name="pointerIconArrowLink" format="reference" />
+	<!-- CHAOZHUO END -->
     </declare-styleable>
 
     <declare-styleable name="PointerIcon">
diff --git a/core/res/res/values/colors.xml b/core/res/res/values/colors.xml
index 7f8c460..dd7d22d 100644
--- a/core/res/res/values/colors.xml
+++ b/core/res/res/values/colors.xml
@@ -176,4 +176,22 @@
     <color name="Red_800">#ffb93221</color>
 
     <color name="chooser_service_row_background_color">#fff5f5f5</color>
+    
+    <!-- CHAOZHUO START -->
+    <!-- MW colors -->
+    <color name="mw_blue_decor">#76ceea</color>
+    <color name="mw_white_border">#FFFFFFFF</color>
+    <color name="mw_transparent_white">#B3FFFFFF</color>
+    
+    <color name="context_item_bg_color_hover">#FFEBEBEB</color>
+    <color name="context_item_bg_color_nomal">#FFFFFFFF</color>
+
+    <!-- CHAOZHUO WULIANG-->
+    <color name="edit_popup_text_color">#303030</color>
+    <color name="chaozhuo_resolver_default_color">#8adb7a</color>
+    <color name="chaozhuo_resolver_lastused_color">#88c1df</color>
+    <color name="chaozhuo_resolver_list_item_hovered">#33bababa</color>
+    <color name="chaozhuo_resolver_list_item_pressed">#4cbababa</color>
+    <!-- CHAOZHUO WULIANG END-->
+    <!-- CHAOZHUO END -->
 </resources>
diff --git a/core/res/res/values/dimens.xml b/core/res/res/values/dimens.xml
index 8635a4f..d5a565f 100644
--- a/core/res/res/values/dimens.xml
+++ b/core/res/res/values/dimens.xml
@@ -30,8 +30,12 @@
          showAsAction="ifRoom" items can fit. "always" items can override this. -->
     <integer name="max_action_buttons">2</integer>
     <dimen name="toast_y_offset">64dip</dimen>
+    <!-- CHAOZHUO START -->
     <!-- Height of the status bar -->
-    <dimen name="status_bar_height">24dp</dimen>
+    <dimen name="status_bar_height">25dp</dimen>
+    <dimen name="swipe_threshold">25dip</dimen>
+    <dimen name="navigation_bar_shadow_padding_outside">6.67dp</dimen>
+    <!-- CHAOZHUO END -->
     <!-- Height of the bottom navigation / system bar. -->
     <dimen name="navigation_bar_height">48dp</dimen>
     <!-- Height of the bottom navigation bar in portrait; often the same as @dimen/navigation_bar_height -->
@@ -405,4 +409,12 @@
 
     <item type="dimen" format="integer" name="time_picker_column_start_material">0</item>
     <item type="dimen" format="integer" name="time_picker_column_end_material">1</item>
+    <!-- CHAOZHUO START -->
+    <!-- width of ImmersiveModeConfirmation (-1 for match_parent) -->
+    <dimen name="ime_window_width">400dp</dimen>
+
+    <!-- ChaoZhuo Begin-->
+    <dimen name="edit_popup_padding">13dp</dimen>
+    <!-- ChaoZhuo End-->
+    <!-- CHAOZHUO END -->
 </resources>
diff --git a/core/res/res/values/mw_values.xml b/core/res/res/values/mw_values.xml
new file mode 100644
index 0000000..ec633e0
--- /dev/null
+++ b/core/res/res/values/mw_values.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<resources>
+    <dimen name="mw_header_height">34dip</dimen>
+    <dimen name="big_screen_width">1200dp</dimen>
+    <dimen name="big_screen_height">700dp</dimen>
+    <dimen name="big_screen_window_width">1100dp</dimen>
+    <dimen name="big_screen_window_height">620dp</dimen>
+    <dimen name="window_screen_margin">30dp</dimen>
+    <dimen name="window_resizing_border">4dp</dimen>
+    <dimen name="frame_btn_width">42dp</dimen>
+    <dimen name="window_resize_minsize">320dp</dimen>
+</resources>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/core/res/res/values/public.xml b/core/res/res/values/public.xml
index bc831da..02a9b3d 100644
--- a/core/res/res/values/public.xml
+++ b/core/res/res/values/public.xml
@@ -2083,7 +2083,6 @@
   <public type="attr" name="windowTranslucentStatus" id="0x010103ef" />
   <public type="attr" name="windowTranslucentNavigation" id="0x010103f0" />
   <public type="attr" name="advancedPrintOptionsActivity" id="0x10103f1"/>
-
   <public type="style" name="Theme.Holo.NoActionBar.TranslucentDecor" id="0x010301e1" />
   <public type="style" name="Theme.Holo.Light.NoActionBar.TranslucentDecor" id="0x010301e2" />
   <public type="style" name="Theme.DeviceDefault.NoActionBar.TranslucentDecor" id="0x010301e3" />
@@ -2100,6 +2099,7 @@
   <public type="attr" name="allowEmbedded" id="0x10103f5" />
   <public type="attr" name="setupActivity" id="0x10103f6"/>
 
+
 <!-- ===============================================================
      Resources added in version 21 of the platform
      =============================================================== -->
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 440f525..55f76b3 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -4132,4 +4132,12 @@
         <item quantity="one"><xliff:g id="count" example="1">%1$d</xliff:g> selected</item>
         <item quantity="other"><xliff:g id="count" example="3">%1$d</xliff:g> selected</item>
     </plurals>
+    <!-- CHAOZHUO START -->
+    <string name="app_first_open_window_mode">You can double tap the title bar to switch to full screen mode.</string>
+    <string name="app_first_open_fullscreen_mode">You can double tap the status bar to switch to multi-window mode.</string>
+    <string name="app_first_open_got_it">GOT IT</string>
+    <string name="too_many_window_opened">Too many windows are opened,if you want to open another,please close one of the opened windows</string>
+	<string name="app_no_support_for_window_mode">No support for Multi-Window mode</string>
+    <!-- CHAOZHUO END -->
+
 </resources>
diff --git a/core/res/res/values/styles.xml b/core/res/res/values/styles.xml
index 4bad16d..e48c8d6 100644
--- a/core/res/res/values/styles.xml
+++ b/core/res/res/values/styles.xml
@@ -1336,6 +1336,15 @@ please see styles_device_defaults.xml.
         <item name="pointerIconSpotHover">@drawable/pointer_spot_hover_icon</item>
         <item name="pointerIconSpotTouch">@drawable/pointer_spot_touch_icon</item>
         <item name="pointerIconSpotAnchor">@drawable/pointer_spot_anchor_icon</item>
+	<!-- CHAOZHUO START -->
+        <item name="android:pointerIconArrowLeftRight">@android:drawable/pointer_arrow_leftright</item>
+        <item name="android:pointerIconArrowUpDown">@android:drawable/pointer_arrow_updown</item>
+        <item name="android:pointerIconArrowTopLeft">@android:drawable/pointer_arrow_lean14</item>
+        <item name="android:pointerIconArrowTopRight">@android:drawable/pointer_arrow_lean23</item>
+        <item name="android:pointerIconArrowLink">@android:drawable/pointer_arrow_link</item>
+        <item name="android:pointerIconArrowDrag">@android:drawable/pointer_arrow_drag</item>
+        <item name="android:pointerIconArrowInput">@android:drawable/pointer_arrow_input</item>
+	<!-- CHAOZHUO END -->
     </style>
 
     <!-- Wifi dialog styles -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 8be5f60..b117656 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -2383,4 +2383,66 @@
 
   <java-symbol type="string" name="alternate_WifiCountryCode" />
   <!-- End -->
+
+   <!-- CHAOZHUO START -->
+   <!-- Multiwindow -->
+  <java-symbol type="dimen" name="navigation_bar_shadow_padding_outside" />
+  <java-symbol type="layout" name="text_edit_context_menu_item" />
+  <java-symbol type="id" name="window_frame" />
+  <java-symbol type="id" name="decor_container" />
+  <java-symbol type="id" name="mwCloseBtn" />
+  <java-symbol type="id" name="mwMaxBtn" />
+  <java-symbol type="id" name="mwMinBtn" />
+  <java-symbol type="id" name="mwStretchBtn" />
+  <java-symbol type="id" name="mwTitle" />
+  <java-symbol type="id" name="mwPin" />
+  <java-symbol type="id" name="mwSepLine" />
+  <java-symbol type="id" name="mwSep1" />
+  <java-symbol type="id" name="mwSep2" />
+  <java-symbol type="id" name="mwBackBtn" />
+  <java-symbol type="id" name="mwDecorHeader" />
+  <java-symbol type="id" name="wmAppCustomized" />
+  <java-symbol type="dimen" name="mw_header_height" />
+  <java-symbol type="dimen" name="big_screen_width" />
+  <java-symbol type="dimen" name="big_screen_height" />
+  <java-symbol type="dimen" name="big_screen_window_width" />
+  <java-symbol type="dimen" name="big_screen_window_height" />
+  <java-symbol type="dimen" name="window_screen_margin" />
+  <java-symbol type="dimen" name="window_resizing_border" />
+  <java-symbol type="dimen" name="frame_btn_width" />
+  <java-symbol type="dimen" name="window_resize_minsize" />
+  <java-symbol type="layout" name="window_frame" />
+  <java-symbol type="layout" name="dialog_frame" />
+
+  <java-symbol type="drawable" name="window_unpin" />
+  <java-symbol type="drawable" name="window_pined" />
+  <java-symbol type="drawable" name="window_frame_bk" />
+  <java-symbol type="drawable" name="window_frame_bk_u" />
+  <java-symbol type="drawable" name="window_frame_maxmize" />
+  <java-symbol type="drawable" name="window_frame_restore" />
+
+  <java-symbol type="drawable" name="context_menu_window_bg" />
+
+  <java-symbol type="id" name="context_menu_item_tv" />
+  <java-symbol type="dimen" name="ime_window_width" />
+  <java-symbol type="dimen" name="swipe_threshold" />
+  
+  <java-symbol type="layout" name="app_first_open_window_tips" />
+  <java-symbol type="layout" name="app_first_open_fullscreen_tips" />
+  <java-symbol type="layout" name="app_too_many_window_tips" />
+  <java-symbol type="layout" name="app_switch_to_window_nosupport" />
+  <java-symbol type="id" name="app_first_open_got_it" />
+
+  <!-- CHAOZHUO WULIANG-->
+  <java-symbol type="dimen" name="edit_popup_padding" />
+  <!-- CHAOZHUO WULIANG END-->
+
+  <!-- ChaoZhuo add by Shawn 20151113 Begin-->
+  <!-- In order to pass CTS, the items from public.xml move to symbols.xml -->
+  <java-symbol type="attr" name="windowWithWindowFrame" />
+  <java-symbol type="attr" name="dialogThemeWithFrame" />
+  <!-- ChaoZhuo add by Shawn 20151113 End -->
+  <java-symbol type="layout" name="text_edit_action_popup_text_phoenix" />
+
+  <!-- CHAOZHUO END -->
 </resources>
diff --git a/core/res/res/values/themes.xml b/core/res/res/values/themes.xml
index c230645..59c417c 100644
--- a/core/res/res/values/themes.xml
+++ b/core/res/res/values/themes.xml
@@ -199,6 +199,9 @@ please see themes_device_defaults.xml.
         <item name="windowActionBarFullscreenDecorLayout">@layout/screen_action_bar</item>
         <item name="windowContentTransitions">false</item>
         <item name="windowActivityTransitions">false</item>
+	<!-- CHAOZHUO START -->
+        <item name="windowWithWindowFrame">false</item>
+	<!-- CHAOZHUO END -->
 
         <!-- Define these here; ContextThemeWrappers around themes that define them should
              always clear these values. -->
@@ -209,6 +212,9 @@ please see themes_device_defaults.xml.
 
         <!-- Dialog attributes -->
         <item name="dialogTheme">@style/Theme.Dialog</item>
+	<!-- CHAOZHUO START -->
+        <item name="dialogThemeWithFrame">@android:style/Theme.Dialog.WithFrame</item>
+	<!-- CHAOZHUO END -->
         <item name="dialogTitleIconsDecorLayout">@layout/dialog_title_icons</item>
         <item name="dialogCustomTitleDecorLayout">@layout/dialog_custom_title</item>
         <item name="dialogTitleDecorLayout">@layout/dialog_title</item>
@@ -728,6 +734,13 @@ please see themes_device_defaults.xml.
         <item name="preferencePanelStyle">@style/PreferencePanel.Dialog</item>
     </style>
 
+    <!-- CHAOZHUO START -->
+    <style name="Theme.Dialog.WithFrame"  parent="Theme.Dialog">
+        <item name="android:windowBackground">@null</item>
+        <item name="android:windowCloseOnTouchOutside">false</item>
+        <item name="android:windowWithWindowFrame">true</item>
+    </style>
+    <!-- CHAOZHUO END -->
     <!-- Variant of {@link Theme_Dialog} that does not include a frame (or background).
          The view hierarchy of the dialog is responsible for drawing all of
          its pixels. -->
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index e964558..ae3d197 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -73,6 +73,9 @@
     <uses-permission android:name="android.permission.GET_DETAILED_TASKS" />
     <uses-permission android:name="android.permission.REORDER_TASKS" />
     <uses-permission android:name="android.permission.REMOVE_TASKS" />
+    <!-- CHAOZHUO START -->
+    <uses-permission android:name="android.permission.GET_TASKS" />
+    <!-- CHAOZHUO END -->
     <uses-permission android:name="android.permission.STOP_APP_SWITCHES" />
     <uses-permission android:name="android.permission.SET_SCREEN_COMPATIBILITY" />
     <uses-permission android:name="android.permission.START_ANY_ACTIVITY" />
@@ -82,6 +85,12 @@
     <uses-permission android:name="android.permission.MANAGE_ACTIVITY_STACKS" />
     <uses-permission android:name="android.permission.START_TASKS_FROM_RECENTS" />
 
+    <!-- CHAOZHUO START -->
+    <uses-permission android:name="android.permission.MANAGE_ACTIVITY_STACKS" />
+    <uses-permission android:name="android.permission.SET_WALLPAPER_HINTS" />
+    <uses-permission android:name="android.permission.FORCE_STOP_PACKAGES" />
+    <!-- CHAOZHUO END -->
+
     <!--Start Add by HuangLei Depiction:Need Uses-permission-->
     <uses-permission android:name="android.permission.FORCE_STOP_PACKAGES"/>
     <!--End-->
@@ -92,6 +101,9 @@
     <uses-permission android:name="android.permission.MANAGE_APP_TOKENS" />
     <uses-permission android:name="android.permission.SET_ORIENTATION" />
     <uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
+    <!-- CHAOZHUO START -->
+    <uses-permission android:name="android.Manifest.permission.CHANGE_CONFIGURATION" />
+    <!-- CHAOZHUO END -->
 
     <!-- DreamManager -->
     <uses-permission android:name="android.permission.READ_DREAM_STATE" />
diff --git a/packages/SystemUI/res/drawable-hdpi/dock_context_arrow.png b/packages/SystemUI/res/drawable-hdpi/dock_context_arrow.png
new file mode 100644
index 0000000000000000000000000000000000000000..4c5e9f76e9c251948f27ecb4a161b21ed57d400a
GIT binary patch
literal 1157
zcmbVMO=#0l91rU@%XHE?K{gLQQ}Lj-`RI38by?E7itT1saH61T^0tOGA4}eBwu4%|
zOhFJ)6i<GFco0N9Dd?f1j)5p5IxnIJ^&lc1oZ!KiZJi#5f`PpE{xARE@Bf|S{kiR}
zEuAd{L9}Li#XR0u;@9VG#_Ps2ISy|fC^d)%j3HE!EJ*N*QG_6)Ny9J?C1rf{3G5;W
z&yZReM1$F#oNQ=8$<+xunu*Z_(Y4JnC3yrQP=v#(o+Q8Ay-xyFNs_xGSvqS9u%z}*
zSa4t>SCA)0<b*<Q+X}iI4ijh)Nx;#{y3ILBa*mh7XZM;S!JG;jNs{wU4QBg+U|0}D
zf^<Npqcn&zK_(QA#bR3kOEWY@vlPPym>3sgIhqCw4~eZ=$`F?q(+jq+lq5?CnH)t`
zDwSX*6f~@1ib*6AE(gm7utvZh*OBA|blYEN5TPwws)<xX2QH&jG{#Vp#GcNFpqbh1
zBC&2SBnqdDawL;tf;6RRZd`NPHp;`_ZY-&77sgFU<)LkiSu(E2kiQPbx%;~zR}p)|
z^;s$|ic}U2c}#;k%7{r4e+eq8!U=pjEcC?qP@1KqafXTWQ8AuidP3=Rgr`}t&ao7h
zrP)-7=EDgw$}>zV98W}2f<UKIA|FqO_(UC>(QPE@GOXKGvE2o1=&x8#u%Lttt6&)A
zdI$8E3}o0P!vw-W1Y{*y)m_;w&wR8ZwA6!8Nn3^n=JLy_OW6N+-1AuFe{x1)XDGKh
z{%Dr^74AUyxY+twSR5Xx<B75GXcWHB+`?mZCnNF&XQntkH8u0_!GpIgwODm_weM-e
zJO7GCqP@`Wz3v&^;#=4J?ppVBU#~yvYpU(8zB*Po2|#P@P1V`x`*!MbTl4cHv#U;@
zn|$eQIMID?`Rjwl$mKUTb2rlGKW~2g%-gUZFFQ80T`m1=sztiXO|`x~lP^%m<dsX|
zUC+L*ncQ1_)wrkK`}TI*nUC);9wIkAsg^%^io(7N2RbYMA2R0~@r*LQ!;d~JJ3@E}
X(pkSbdG_pD_s5V)<;0sk2af&%Xbp8=

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/dock_context_menu_bk.9.png b/packages/SystemUI/res/drawable-hdpi/dock_context_menu_bk.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..650ec90d1dcae11f86333b0e34ed57bf431a3f07
GIT binary patch
literal 813
zcmV+|1JeA7P)<h;3K|Lk000e1NJLTq001%o001rs1^@s6YAZ@n0008?Nkl<Zc-rln
z&ufx#9LJse;cTwS62yebs70~d775RE71eE2hk}SU5<<L$2ML)64;~Vf4j#m7bc_z2
zgJ9raFgyufyLD*`Q@6)~eLnCO9v;8ycg*5>==s9?Ft+FOeZBnt5I)arHu=%j<Zq9$
z%{5KAOj)DcHb~aMG%YJJ<M;bFYqi=3RaJj<4KkR8nV5|kWkme-di`V9po7_%ag@Xa
zWxdns{4}ZvvoRxB2TIs^KXwg1aAxcxnV!UyiA1JEGW^3N#bF{52blXr*wASr5hs`@
zwBI*&Txl*7iMYUQ*NgB{&6`MM9?U|K1rv!Zh(!3%%$iVS7VMUYC1Q#EPa<7Q#1gSY
ztXs<xu|zD9evyy~L_#tmiU~v%8Idg$h-}G-+)-8a(5Mp3#*8u|8wUpmpNuL}tyVu1
z<1L+tO(e49@pvB717D7hj}6lUW)@~*Hew76647>1e3VtnJ<2xakuFcd;c%i-seBzb
z?Ee1#H$_pBJcnT3Z7{8ZQQJkaiTYYz$`wiw*Ia~hSC<ErXQ@=`{mIEm>%0QZX7eZ(
zi@oETsI8wb0+t}yyt=-YP1I@h@b;oyNBcg6>uyt!hlxZYdmb5<*xA`hQ?2_0=1{<}
z4yFJYwVg&`@7Il`TgHPy6xqNb(<hQlCNp%KG|wv0YPAld(db*iifV6Q?jTr}!RFTW
zeudq5HeJL6OIXSk%C#X`Pp8wVv&hil{S}YL-vDx0?G-Qtz_bX)f!+At`;nfE8%yX#
z0UusQ4$9SRHk;^lI=@Fr&{jO6Eg8cnJgjDKUN2bO8i^^Hmpu+FoePI*K{CEVp%5P?
z!(V87dwaWpldU@s7Uw7lz04&3cm@wTaA(WpQn6TkeR_J@5J_Y*nHTtEW$X3kp8?b4
zC<(31ghtA)k(15Ea=H9UE5k1_^ZER9`rX_aYiSv@Z2xS`l}e?T?RNWnqtU46a=EA2
r8m1f<C^soLuuZHnj(=(~V*17(|4ovhYV`-j00000NkvXXu0mjf<5_-P

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/dock_panel.9.png b/packages/SystemUI/res/drawable-hdpi/dock_panel.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..a7a7d211062bb83d6d5c534b0bc0e111287ec3c5
GIT binary patch
literal 1743
zcmbVNYfuwc6pkpMD2Qm4DwHK?OGJ|01W2+PFv*6O1kw-zL8VKwK!9Y!W<!Ed${_fl
z>I^CcN&ziRtwXV5tq(+@RMA33siPoRMEih_sGwG<M(GB@_J`w-?#%8z_ulh;=RLb!
z78&B`u-Jh{qdA6!B64b7Prb~UcGTBwo41=<-X<k+WHg>k8c_nH2~~I!283zQ6ikkx
zs_e`ku~jtM^klUnj*OE=z)D=hM6EhZlSW6OX|z>ACLO9w$4DRvOHpeD^!ulp>3~`#
zpvU@4L8(rRrK&?W5m@x5NQH7!x{|M=2L%GFOfW^D!AKM^X)?5W*d(A&@WPaAJ!a8?
z2^BJ3K!52}oKyygaRLMUnV_!{3;=-uhzW80xLocEfDJ+*3uLn(wlBnmIcyjNfyswX
zStC@*up9}Vv_<U%^i-16!7P^1Xk;2WOq@tzL3}>n%E4y)QX0PcY%PhJe6@P7DFy`7
zD+#rZRO4E}%7`Z622wz$Jbf90MkkfNBG&3B6Gf$rWkPi<hzYVZ8f#n=+Imus{p-eS
zwe^Z@9mbMldfY%Lsd^-PO@XQ0z1fgek@5zPBGgn-&<q4u8Z?-e3_}ET>V~OOt6(sI
z2SO0n59G2b5rTNa07Q&{5L?WbaJa$2Qyj0u@*oi53Hd@0;!sG5KOYgYB|<-*AIN44
zITFznHcYE0QLPf2va6=-PGb3Q#KK|%LrI)a;CRMV2gp)!64$5VIzSxl4@gm^T5H`~
z%kwf?1S8a0m@1gSHNZrEVfAb5`-}KOo<!{DC!CC14EYJURO}!mVROU~eG;qsKRIJj
z&akY_@t<ayI-)wzD!yucYV&G%FfBDP1T`AM`CUdD&1O6d5h_f*!<7j{E$A#UU>eWs
z1y9O~etMBSd(U_-pWIlDlw7U%DRfU26|-dl!69Yh4(Gx<5iYqAanGG%A8e>|oRwz^
z>TzAa&g-l1-pdZVKu8DTTmu6f<iP_<T2}g!0KyKW6<I#pVUx1DR-b**sjTyN?TFw&
z(=jI^;Zg;W-s5|sUXu}Wxh4H@*U3)u_Rm!<Ph+O{ecPG3E$y(a(_1a6P2Ys@yCaU5
z#vfc=+V;$Q$hB|-bMw#)pV97ooPn&#&{P!RqNu91#kRcuo4*KXyvF6Nk{2&>axD)V
zc~yP!t;lHFJ?6y|siMkxnGp;@woM*fwQKOP<kt)aS~oKPVEMw~Azfib)HoWo<=8&&
z;UyNtyRc~IKpD&)S@9^XJ;zP^ePDB|C$V=HF616SzC2|Yxb^fR^9<WY#n{^D>I<JX
zDb_eX_8c>`C-hZc()jLQ)0OtVt3%y_i`{=)vQ~H1%g(G0^0`$RSHF~f)&J_*_F@0q
z4K{jtnvQcfVx8-b*~x((ZYwSOb^skmD`9l6&F6lWf_vSJ2G{<wIpJgMSVr$m&Ncb2
zk<r1AxoIuS`nD9uD@IBzqchLCRh1RZ+5Bz?QYC}OPI#GrW7N#KTwc3Cx=hHJceBjh
zXBlf;Hnh|`a8ccjY1g}(!*3bnjyk+F$(WyLK76Kaz4?*T!zVKH*(AmFaBk0Xb7@w`
zos9?1^;W~}qV#R!ndj~A$3`Z8k=b>PaTG7EV?^zA0cSk>BXczGxJ$~tLR)3|_{n!F
zaL(@j9CLr8{A-WD;=6;=2CgioeYmpR-P>%?Cx7xo&Vcy7eWJm$JMYjwkEf5_V;E@U
zkq{T{I}2~v=VpW-pWVtD<%c&^2bT^QcY|X!bF*8`^P8TB9!lB6xtkcuNP09jxWW0n
zsG++0Zb40QK6C#f`{|d$OJpB`HFh4`=f=-HxV7X;dhOz_&Ii4B&JFH4;^o}mIBaN+
z>~iUUUZYjFsm<;!8{Im`EHT*Wg!&b2e@gPF(RyN@EL9F39kl*p!X%N%A<+i~{{XQp
BqZa@G

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/dock_panel_full.9.png b/packages/SystemUI/res/drawable-hdpi/dock_panel_full.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..0d5bf22ce4b0a815633a0a9c8d674e99d6d1c383
GIT binary patch
literal 1250
zcmbVMZD`zN9M4*7>q*CuqHLTtrpR`4cX_#&<kGusxg_VV^y+av^w5D#lc#O$<)umL
z<%(>2T8c3IFp5$(XK|kFQ_DUS1{JkThFX*<Dq1Ua)ell%DyX0XU!Jsg)emJK3?$Fn
z|M&a--=4gX>wBo(cff}rNPFglkcZ<*_=ehUhu>Pusk3m{?}$aG-xzYrk_8Y>F$Mve
z(WGIJ2a-}5dmkhaq<Kg!6rEzWmz51IBzZO=S2H0RK@!JYQ<6u4gARgWRZn7@i*IA7
zswA;Tqgf(r@?b<gF=2uJiN1n7F)GIu?ATE>;j)lG1CE5cT1mHAH;HZWvT*Kg;~2VS
z;*2J-ZKsOa9LgIOK%*fdC=)RPjgcWT9HD9Y2ucwoffE!?QbCet!xT#pX#K&Unxzb}
zc_Cfbf~zDp;y5OY<K=QWR1Sv>YZxcv@wmr9Q9)=Cv@5zJxk26TYA^`EmMztER6|ES
zMrqI(caj+NbUOsi%w~6pb-SJ@m@?dzOq>i6xTbk=ZCTq+9{lUZuGV&;Vgfu5Y-8M#
zVLgVr8eo{aTMK!H&>Qw)ONB*|N`fJeYe080LK1@~Aw^YKBE}FTNk<5pf>V-YxR}5T
z1WEC6F-)h^4UXNg3`qzK7Z(XK43T0qE^w5{MVJUdQCwI|HLw}ob|hT}4P6!L*0E6O
z7Fd?IfaDlf!7xgV4#<rdj$w}&Cd&6m(X1q^y0`YqvmLDfEcGd%q%A{3xAM!XyXZ$#
zagGuBNQA4$&65$1hOrZ*NQHS4t7Db_lQSGTgL}>KpJr)n!4CAMJFO2FJC_IO@Wxp1
zYD^jSUIf{5S4Q9p?#d769``**>=VOh^(B37@%xR9rkmZ9zS<j=-Xk-q<UP+1R67s8
zd~vp?c=1_Rczpp$FTNI>O%8l{Ti5F9O53}e(aWt@erqcAo?fQyk1ySQ{Hw?2CgTf8
z>#5U=wa;#r*B<zy>DR-hK<SxpuLVppvE*O)<H^MQ%!j|{KA7IK`pKE=KW#8A^MRiW
z!OyRC-tpEWAJwi$_b=c1Y30KFcka{rvQ>#CF09|{KRR=K?c94`Z??X}y_o;&%^My5
zsc+2c)iLHW>t8?AQrkCO&A0V%fkTs5==0U?ZhvjIV>*@d_1q5+XFJy0Ptu(a+Go0(
xj339Cy$72Q^ew&e>eU--FRlDNsUVwENHg+8B5>a_^UI&!Une8>33I7|>Oagsrp*8V

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/dock_startback.9.png b/packages/SystemUI/res/drawable-hdpi/dock_startback.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..0fa3c0f818ee68e445c655aa9f279acef03114f8
GIT binary patch
literal 1206
zcmeAS@N?(olHy`uVBq!ia0vp^9zd+i!3Gk!qPq@ANtU=qlmzFem6RtIr7}3C<R_&n
zc;+Uirv{}arc@T5OtoQPU{=Zui71Ki^|4CM&(%u=snM&*Edc6fV6d^TC`e4sPAySL
zN=?tqvsHS(d%u!GW{Ry+xT&v!Z-H}aMy5wqQEG6NUr2IQcCuxPlD(aRO@$TEfZWuQ
zM1_jnoV;SI3R@+xxmG|nNLXJ<0j#7X+g1tUs0iNx1?T*tR0UH#1Knf;GXn)PLp?)d
z6LWKO9R(u;Lj!#SBYi_7T|;v#V<RgA0|h8h0@_xTl4cd;;s&(~$g@?-C@Cqh($_C9
zFV`zK*2^zS*Eh7Zv;>)9WTXpJp<7&;SCUwvn^&w1Gr=XbIJqdZpd>RtPXT0NVp4u-
ziLDaQr4TRV7Ql_oD~1LWFu?RH5)1SV^$b8>f+_U%#ji9s7p}UvBq$Z(UaSTehg24%
z>IbD3=a&{G10ya?8Dv#~m2**QVo82cNPd0}EEEGW@=NlIGx7@*oP$jjd=ry1^FVyC
zdS72F&%EN2#JuEGPZwJypb2`JnJHE#rp}fw7Ou`tjwTj{hOR)u+0fC*&Be{p+11?A
z%n7E~B|o_|H#M&WrZ)wl*9E6uP*TV(0NU)5T9jFqn&MWJpQ`}&vQ;K-w>aW752`l>
zw_BWW>eUB2MjsThND&Pa0;V1i6P|2=9C*S{%>$<PB4D!KZ6~3|z`&^G>EaktaqG?P
z-Fb%`1X>f{OL;8tXl$ACy?&R+#GoY{<!0$h`jNeznL&pCC$<U3&H8I%ruQbq>t&Ev
zY;W!Ni@$z6V0NkY&71#tZ}o!x6O^8?1u(vln^1cr>hD>GkS3<k_9E^VQJ*Z?SzodD
zXICy*^NO{EgKJB`=7&2f7T7S%d=TRh@7NfYb)4~JjGpd<hi5{#8Ee^Cs{%J~ejcK}
zlId${Rmgd!UqCHkw@rgf@*3-wxo;J@P#v(K_tv(#i^NVWd+xba=t6YBf^gH_|K7b8
zdHU_&@}K72v!1-?+#IcPPRU=_t!*Zg5(6WPfCHFdQD|Ub;(!oLP%#EZ7Y3#m@{NBk
zKfC*0d4pi^GPM;3`pMlQFYos3)_S~o<!`YBhK|iSZdpk?TtOv?r>mdKI;Vst0G@)F
A9RL6T

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/dockarrow_left.png b/packages/SystemUI/res/drawable-hdpi/dockarrow_left.png
new file mode 100644
index 0000000000000000000000000000000000000000..93bbdf5fb993b3d5bf1da84faa7d9f8a9f68c23d
GIT binary patch
literal 1227
zcmbVMZD`zN98cL>DXSKDA7%$GOL55TU7jS(<t{c`bC;YuHT8Bq=qZdXO`i5bn>;be
zdFg@D6{_=P;HJzmU6p~K6d6<4hs_Pe3BHV#f?W}Z^OMR7u2w<Zhxw$}tA42aU`X;j
z|0n<7@Bf~c3jL3^w{^A=1ks+~s}%7{Mo;TT{Pyeh-|=#Ppq7IHG#u1)4-&G8h9H@@
z^$}Qvx;g&Lm#~*0)(u;wa!}Tu5DjD}^hhTW+Ac;DMDL!^)s0aYkVA09awO{4^Oq>n
zG9_w|*MR0`Va3{8_uxRizhu-$jkHPa*-iF_A||k5pp&6J=J;YLQOmp{-bcqYMJ}rZ
zqY~9{s;m{rEb<`9CqUc)NkAr<1jF?Rg3wK}fB`gMX@-q6g2=HV0OZO=VQZc_EEbjA
ziY+WjR3!*pk)~_4TB61!kT*gz>2x~cVA(j<i2LJCpoekC?`kqA&^J8G4J_o45u-kY
zs)0mdPa7fFuBNRLJN`<daLVXVcWEX8XxonBTGsZ1BK*gVHMRZHxC`kb^ikC_a6N{*
znqZu}yBmrWu{YwAo`s8|k15Eg+RzE|ibUZr3DYuhic)}KgdQNUAemyAl)&V&3frTy
zAjJWNZE~!IO{OwgmKT63@B+iAJjQaFGyqwi;Zkx&ZDR9|ALxz&n|3X1w}DOO?ur$&
z9@GQml@J<hc0i$m0_0baOJ)anQqv8~iR7p}jc66<S<gZ<=OLS1&aY^#VLvScKEn$t
zqx@Ig4XpWpaz<lk=%_jV)hx{;+=0<{we_*EIy}(96XW60u;+iv;jy}%SL9Oo-NJFX
z?K9A!ZhQS@b^WIgm*^Xd--ny8&TKhc>lnPe|Cg^$6?V;@Zm({<?{H`9{J|u5OK0CX
zcFjEb#vjjZpL%s)EY&(eM0ekbbzjW?uyd~VT6M$O?zcX+&mS#L7fu*g-n^rpesA(x
z^^>W^%dxqcr5l&7eErSMvMtY6uOIby3-XWJt{tCuE**N_a1Nd6er)s3k3NXa4Rzi5
z7QKBy-WR)l_35XMZ#r=C{Y}RnRHlD=q%zI5E%j)FKabx!B~2V*H^lomc)f3MX8(~F
z|D0WD**5XQ)|=8)IQhU|`n?yokPC8b;h}pLU+F)$qosprxv+jK(X~DG?&E%}5dB{A
LYQOSf=HTStD2kdR

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/dockarrow_right.png b/packages/SystemUI/res/drawable-hdpi/dockarrow_right.png
new file mode 100644
index 0000000000000000000000000000000000000000..a921d81066a947604a5333113246f651c41eaa09
GIT binary patch
literal 1226
zcmbVMO>Em#9QW3-jc65<S_EvDH&+Z0OZ;rdabjw^Bz9>g+;wTBc1Tm}*sqP%+Rw9J
ziJJrJ5SsuoAqJ`tsNGH+*u;mBIDj;?X`u2U(Q#l<K;l$DD_YSInzqAuZkxiP?0{wa
zz5nz7_xpeQg}&Y=S`)hx48ydRdbBcKLHumrO5b6l@h4p#Ao?Kb$0MX}28hYqxQal@
zHAhhynfBz-&rv7Cw2U~FK{9AOsaV)enXyhPa(#+sn9i=qH?1*5KoyNTp2}YP_!Aa5
zw#p7j1~mL4syRK40QEO|D^_F7%Gqq!<DfHAD1nQJ2_kpg3zbM^S9le=kB>PPtf-JN
zm0fje(C7n293UX2VA6sa2r_(%7t^vV?*jtlAqNGH7m~cJh=KwkSi4wiEwD$Fvevz3
zi%Ke6Bg9uYu3oRF>S789qa2^h<zfy&NK%btIO!2HN_t^OlR-nF6*xX|um@sBvx+B(
z%2H2PLvVe=SSR+vwM5aBagphBd<t@|8^^Vx9g;Ho$BhlO!^)(OxH1ayL}1Z+jC3@?
zG<SD46f071l!Jjoi(-yz*qU&WM@pK?(l067v1y93kmuzzlm(c{@_bh2yNjBT)&-aq
zp(ZprHo|7Ig`yzIX<e3Np4TOc6$?2CixMwp^98+$EqNg^JqtDMI@InOR=gutDF(<S
zIH+Je-t2(B8YVcbVILIxC19AA<Hd4Zp4DhI6gW>KyF0)xSjn&AY+yf^hf+b3bzb|g
zxL2|E|H&Cgo#Eo<_*b(uk7x(R+x6C`!us$ak4{WLN8`ZnuU(>Jb+e@9E78KzbUtwr
z?$md``l7z&!lM=L=Rbaoc6>eG_I!Qkz^6xk`(g&%>s&sewA`(=ZW*s-#AQ=Bed>z6
z@Z7|a`;NbKs6D%Viiz+2ueW^m-EiAgaqgqdho_A<-uk}hk%JF^_5R|QxA$BwUpV{r
z!o?fa#MrNs%Uz3T@#wh^f%C&(bGg%Ro>|^2@42+=`s_2VckI1=2X^fJ;9UE+)sEX&
z-kllBA8NmK?Wx1l+lJ1c-FE6hZT6SPYO`YEdfFJEOf%}#N#U;Kei8kYADAzmymjN7
zrA@o1PTYT0JsusKy=mTaz6~tBT$>vv$%mNDU}~Pho3=8!;p|NBnOBD5ze`E))!r!#
GKl?W=ZJId%

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/dock_start_icon.jpg b/packages/SystemUI/res/drawable-mdpi/dock_start_icon.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..389672d8d5073ba266a2b9ab0f672b7347dd33a4
GIT binary patch
literal 13052
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
JqGVnd{}%{}E~fwh

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/dockmask_left_area.png b/packages/SystemUI/res/drawable-mdpi/dockmask_left_area.png
new file mode 100644
index 0000000000000000000000000000000000000000..bb81c86d2b4f81bd7eece8099b20a45d486c72f1
GIT binary patch
literal 1605
zcmbVMdrT8|9RIZxC{UO|XPA%dtinL0_h@VB*-lCy(rTqEB&)B%aXrcjy(`zNv?@|2
z3}@mt=6p=ZR-9Ag=5)+N<2J2vCOX-~tkH?{H7C)8;GCk_oO4&OZhsh;?2`Nae&64H
zzMt>=-gGROo0&c#9RQGNEj2lXy;yj0X^OCdzRHlWzQCJZd^uagHxe8L3~siXf~;P`
zLpdqJ9cnm9=>SNop(|Xx%RV0`S+9bKV-!KJFHQn<bAmpCtfP3Sn)1+$UViJ#BXWp#
z>*cSi?TFoHq-yEX6&zK*VnGGDqK?$M<#S$!bU|Do@KQVh1-<o*9}nu~BfPk9j$gxa
zXavI7>E)wNx$F+e$Z`~<Rv?8WG7Eubp$b%~(r7d@Aq+tg7{Oo^D?~N862lP$di=-*
zYn;0VcbY7ZZ3&WIUd!`79EKYk8x@U81<QG0RIAm-IWVkHKot5z3{M0L8UNG-gNgE!
z9PQ(2mVx4oL^T`W^>V?}(Ga{oyZs3<<A0neA!Tro@WH48fxX^%Tq9^d@1*{5<EdzW
zMaW0NPRh>)I8vxb&D4alkh^CaiUS32@G_1TibB+zSTf+H7~X2q%Y`orH|@qPW{m|!
zH7Z1dA+w55v`B+mj3!KF#*iW<V!{#}Pt(PUv>0kqBWOv98AZ)%gUVtyVHS0f%3{EZ
z%q0n3E92)0hNKd9X~FKOuFCREUEIh~1kZ96EL)%G07os$v;JDv2N}!NkewiDCN9Uz
zGa9Xl;^^g++rqJ4Xe7Tl{S^EE9rviN`~Tz&7My|O&GD~hNn8mX7(YH~eL;9KJQO2L
z3@406>mqeF0OEkvWT*)C|FYFP?-(+!Z38oX!%4^OHEY*C>c5<KBef&bH0gWo`LlUD
z6i3J0xs=82Z82W!yBgw#?2Bw^Q@RG<IFx<LbGU9$clV2}%I?|S@AtLGoVB^bx%)Tu
zOTBFq3i3W)dA<pKbmz?JU8SKl=@-*8+fshpJz(3Ix9s-^H(rs0ZK51}{)}s}EiW1K
zpO3C5ucu~7V`7miJheMxk7P-~E^htitjOeZZ%Jh0w1^8V32m#Shc6c-=O!JLefrhj
zREG@Ym5|2{J|{le;=sV-^xaWKc(<g#Vd%!6kG7>v2ZtXX;c|AmKv(Ec^Ui_P<S1R0
zv3==E!%fgX_Nw)pOJ#m`oh>!u9OM7%v`r)dWZ8jR`;$vV$oX^QrODBTsPA5U&-dLs
z;B7f`K|T$re*Wq09*L!6M%m|^qK4Lmo%FiQVs=NjC?{oTnBEMxgQ(}AQYr;mN?Cb*
zTB%j~ZT62B!XSMA?(8a2{bWn%#p1|&psed7ThyXF@c_%(BdH%~g84{tbgaxj6P!%}
zojv716!o+=#B%%c!nwtzwj>ESbs`&b&8sr3u52b-RFRo2W|O$5*C_gRd<Uq$D^|@V
zhL`W6yUg3caqX3hJ%98jiI$FCwb9bqw51(XF<UfK_9<?+gDb~Hkpp}7xxo^#Be!qb
zU`jsdz1|dNE}hHh8OpGwAV2hKT3&nSqHJCY63Ah7l#tI4T9*|pPIqXIZq$j}ZQ;Pe
zhwqAX6F;e(4Mo15xGDx>9pCj0`y`XX_daZv#+qSI*eRNSy*z@8#78T{_ucpNS9MCK
e%t*d0mVt3M0|ToEPZ!63>{jyv(`O}Bum25q4>dOc

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/dockmask_right_area.png b/packages/SystemUI/res/drawable-mdpi/dockmask_right_area.png
new file mode 100644
index 0000000000000000000000000000000000000000..3ae580e933194a13440805ab515a888c29a8470b
GIT binary patch
literal 1552
zcmaJ>dr%a09N)V`JUs{_vT$VFS(+h{yM4g1cN-`7*u5Y;J&rRW9d)_e<96hB&%H(N
zh_MAPfgUqBqoqXzrsY`Tqa+<1AET8zj(}4{T7#8YSd5O3R4i=|IO`8`XZE+h@9+2d
ze!lN*aV~s5dHSsB001Nx7m+UcYnER^ohYwB--?L5ri)a$SjPLrT3TQLi<hrtz~TU1
z#kd&S8(DpdDF6VKk9C)e<&Fh}hY#rJ7)BQk1Y;yXL18#ZdsZ<bSjkkeoC&(xa|8le
zuL)YBcOZ_Sjq$TZbplgXx6tjWTjeo&p~CrKL70#U0*pw5;XpMPBElwUjF*u2v11ql
z#~|V=6EyBrxx)$Cc!2@+Iz;P1@)0l})uFk0IF9Fl7=j`&g25=JMR6h*BM=0fcp%xD
z;PnwM(mr8JmQ0Xe6oUi|*VfkRYIAkGPz9q#qcO&TVOklX4MjMS4r{qkW}Ja!LLPw)
ziY(88F-E$QuMtg<?CE$2fuO_jkeCZiBuY*h9HxUXszcyFAQsmcIwZQ7f8CfA9dbv4
z4D4b;e2w6d>*33cE6cfiw4oSK_J&v_uyRr8YLfTV1Q<>%CQXohqw}&}!cO6K6vgup
z97FOAC~Ck_yN$&1C=4;=A|w{)m`oSPEx6upx1v@XhN6_-l4qw#%&s@&*)5oXvc`3b
zxsXV69wu&=mF-UGS{|uO*aU_adBM%|)$tB+`gxHL`S~DdE7OAx+QV`&IaZ$WXh}w3
z*DzkYzz4vw{1WUW_KhT>x9V{UCI2t(ab52uIl~M_3?=mlYPC|6#tqBPz_I4|PqW02
z<PMB&AGW?MJRBZ|lP5-yM<dAZo(}*@b1`XghtFTyytG7x&UiI<nA-T()-ReM=<nM5
zKFb_3JFPTro*!PVs%W8w3tgK{$+Poc=jg*{wk$Ze<b{?#aO;ZQo3@qq`kid~@X6l}
zoNMXdac<E6;_&(Ul7XuSZw$U%-G2SAEhQW9=E&PgX}b=Wn%>VHdT_5bd0p1LaHY8@
z@x-z;gLfU@yaCo!152I-4&<nJ9bVi1?r2{GNINC9XQ^~lr>*<5(au>NH4T6S>A{WD
zKJ8MeM~*DJ_UE$O$|u|!r*-tHp3zrI6O4{hpml2Wjhm{nZAt1UZ9`meeYGNe+VZNS
zbCtk#srgpI&#vc=ey9gU?=M%({T~kvRDjzahorV$!Nx=h!_4n2?L4cxwmge!%nF$j
z*@nTpl2hSKQ04%qqosvYPtGjbJLMUvuj}GKbbdB)y6t#IQ&~e&|I#1Nrp$e;{tuOT
z|INbp6dkD#e7)c9NbkUY-J_Q@<rOzz639+Hl&tttnXPKJCbXvJe6&c^oG^bf1GrN#
zN3*tRv*NW#%5cUv%Fe}~-&+5@db@hMBpiZMv5V<@Q`Fm!Xns1b-j{N*aR{xWuBz&1
zbYH$34bQ$@-^)nruQmD_zSizZ+*1$@v}z7@AKiDUNAX?XZRprNeRT1ue7{TO+WBCh
zKXc!dHD|8$fHRxi2_u_^p8nwjMk?BIzq`F;M16rs7LM_4IbpLgsU<qnyI&f}*g3^o
zvC?)xyLZmuS4t@J&YK4_Uh42lr<2wO#IjiuuSf*86fOFlliJ#1|L9_BA=zbJ+4v8%
C(<<Bm

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_startup_icon.png b/packages/SystemUI/res/drawable-xhdpi/dock_startup_icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..09961fa0da20bf56005dc5da7c04770f11bde742
GIT binary patch
literal 2854
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
OS09Qm`GRL;>c0WQ+N&G@

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_startup_line.png b/packages/SystemUI/res/drawable-xhdpi/dock_startup_line.png
new file mode 100644
index 0000000000000000000000000000000000000000..008c32fba7bd887983d0b77c462bb44a0919c54d
GIT binary patch
literal 955
zcmaJ=J#W)M7&fA+P(^<LOec3~CF1i(V#iiY)cO)?sg6o&i7cQv_9d|r`;2`dP6i|x
zkoYrfObjrVu`5DiVed}}=QJM-1fQ&X@AN*;`}N$%%ht2QgU1IP#~s?|sLl30_P=_t
zUs%6C-?HryZFJ}r>C>r~V(v5`Jq+x~8{jtfg4yfuxW;k!k3+XZJI;mSlSuFiA0dwt
zhUU0hJx@G;gemCZK^U9-?U%1S2m_OUQE@~kvG6cFpQre0-g5o<$kzkD{uI=5gAqiS
zdLWO+ac1NuzvMNTU0g#REM4fx<nNN|IG4a8DFzimE%~CV0ZkXAil&vdCqNdZ3KSKn
zh$UGu%A!%0!Rq5#v^3}&ZPZ-FVkeUyQkobLPN!30st6<<KuOniD9TWlOU$E`&0^~1
zr8qlUGa#J#X_(NE#GqjGdSpUPo@IJhLX>Q1<80L?)-afR36un}C~58JIRAHzqK$V(
z+jyJrKZ!GUmSEV%8JVO$8(jaW2$dLCiaknFmyq$gi<d(}Nj4-2u&ia*z_H``VO(6E
zEK!bQ*l|X^*vB?9dB!7zVPL3gRkN&WqpBlGk{Xq&DxEbIz1l1*4TO-o#v<ZRA{^5-
zHrQgDJF$fzqJ%|8I1S(6pqY{gEDJZn-MLsh`BvCqcP?lr7P4euG2Xw%y}n`^D$I>|
z*<mAp95c<QOx(}wZwKsQoY?5p&42WQZdcszeON3OzwX^!JREl2?c!c?;2Sr7w|6c7
Rytyu(lig^cPiNite*pUpCx!q3

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_status_keyboard.png b/packages/SystemUI/res/drawable-xhdpi/dock_status_keyboard.png
new file mode 100644
index 0000000000000000000000000000000000000000..4a6d3395f950e9683f15e49122e9ab18e0fbd655
GIT binary patch
literal 1744
zcmaJ?c~BEq7!QZYA)tV5QPj8@MG%tR+{q+Z$R-eLFdPDkql9EbVn{Y_76`G{LbZj8
zmI??CR4p)!)~XER2okk{j)K&qULfj_PVqoIk%9-7ZV+t$pzh4>d*6HC@B4k{Y@s|h
z+S_xECy7Mzmd3#G#7cI&?ry}_WU&kpOCT;z!4pt5o}<7JQltt^N61pWA_Iv>6sp{f
z9f*KLa#3p&Q}7ho3ceE6Qxy&!s#$L&&?J&znc1jN>JXfqj$~*JLf~o38Gx)+34vsm
z43rr~h(;S@!H@(?Y@*VlQ}R^6vIw%k%qI-!5nMqw>oW}|zF7#2+vO8`$1x2ckE`H1
zA@I(r6q%eXLNSEQqO!x45CoAqJSxQEGU%)@G983iG>}Jwz;F=aLm;0Hk|!R3V8c{u
zempFh;36a;puuq?pGM2c$)V;js3?{}gLph14W!fP^l(BW+>~p;73Oe*i85&cModaf
zYs9svf$XrTNJq19AwYQgE(E<%CVOw#V46r2kusWDVWdG+kfzr=;u_aB;ql17ZcM3d
zO3XDPw0OjXW?@RA9%{-Yn8@9Si5!ZAH~f{DmMDrM6GoL;dc=TBVIe@=P*qwLpT~(3
zLku>T4%0z47lODPNFrgf*&GHWfw>&|q>ZVt5Rb`ZMu}mVPNzeVm=(!|IZ>i05GKx;
zFqb`vl^RUA!k|PZd9?)Z1XlDxEMJ5n3LM1}Q8aV11LPVMM@<^kNERiq$TEdeYjDVp
z^1O={MlfwQqLN^!o;;pkzIF<JE?WYEFbwfP3B%!gl$gnm6iZl4A_z8zEdeI5swr|d
zfu;X1mPR;3b2P_)nq~5c=s?Hzed`m#`{6+h#Kd64XuPR=zMGghk`#_iH23^mo?0M_
z`{dlnO;eTDhazGq3u-_#y1!x&>>IY{^+hC<ES84+*s*<3VuflottDG$1m?!gFWuEC
ztzJ9-c5C3Z;?LAYd;T1|zNM={{rK4M<3sCp`;K?<2T})G4*w8Z-WhUkV^8GVihFR$
zcXmOO`}s$=E@lUey1unfTXN9<>RM}OVQ}@!b<}L>ru+GYwSiWr6Sm@!2B96;;!@P_
z4yr#&@uu%}mhJZFwfWThjW!hNJ)8D)?7z;)ll47tJJ9Y@U)$PUI(WM+J4i#C2Cm9o
zHeDdKc`VqlrNK*Z{q+}Dn;X`QMHyoTQtdTWRl}jO!i*ydyIJn#);tiFbJ_i;o1Aut
zwJ>N^P~(Bh-&FZ+nU}sSN%QLd^>l)rnG$`}cj>;y-s6UCwz<ulRzF*+d__OtTuBL|
zM%1qwIJ7*q>gZP&8y8&5Lj^kmX9X+?{dTmxAXFOM<nkm0vN9yCb85Eg_Q(hQz6LHS
z)fcKC7S;LB^ew+^bu#?E=|$o&WE%ZkeJp8lS$nV|KFxRbGx`m7{a$HZdF-o#n6cB`
zd*Gt#<QZpXryaDpwyo&Mz4uK$;PIICz%3ZgJ6()4EldxnP@U-hYi+x9M=W-wEa~Bi
z(!2dm07aQQHf_{yO6q)jvM;D&KdEYFcda<E(xs-%t!0Jhwyisd=26;_YgSgkerVAZ
zsl0IM5Ejz$qPuG@oL5`gbUqsrbti-tJ8vv|ka5Ro)~z{vzZ`q<ys~sSq;ltlY`5mK
zjp27Kvt$b|Q3Ttpy&grH%^8%iBR%}KfK!nktJgDP7MH$`koK1VL$+PZvjWqszR4BA
zbrm{(-Y%P~q5aNC$o2&)%-=^dD_xLhY1Dc9EK<MB>@Mqfy&*5$u&#GQ=`DQTnfx`s
zY%X!WLY;mryyemJxU_;17xa6to;U0-R>q{C^m-`sRGDoRexEvZ7#RNNtDXu|$DF!e
z{h=vQdL*?OSiS{*oLr8kE_o%$?TfqX75Z_FI%s<I-yR_8@TvKhM){K_$3I3Yj)jjz
HrRDzvNSdER

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_status_more.png b/packages/SystemUI/res/drawable-xhdpi/dock_status_more.png
new file mode 100644
index 0000000000000000000000000000000000000000..56d5a525d46f9e1b254e7d52153c69a0b3877a1c
GIT binary patch
literal 1135
zcmaJ>Nodqi7>>B0LfsEm3w@*>EI5-)X6wX`GD#+#K~w5DYEciS$(uH`$&1OWGt+`d
zT~H9wqxB%gA|ABjf=a8@T5&n3s0iYMxSXtD@uCQVFVjx-Pz@ySy`TU4{_kI2jx;qk
zRLoy7pQ5OWbV|yQl_qc1+&SbsD{5Agr4lEb@n)36dDVebLPsqSq)oLIW}vDUcRz&n
z6g6|Tk!{A!%0^y8reF1Z`~}k{Xo{*|U$9lJ9b(V|TMa8te;pd8fuYCgZDEB~Y!S8@
zsV)a@?rO|xUF}*-r`N9o^#z^~m=LR=V0Kt8Ux?EsUY_hdGed)t3vQ3o6QY`xCLkgQ
zg0Mg0)7VH9L}UIyI2sK_*8q+Ugc&x-1X&*!<U=eU;=trXlW2~f<1>;x8H=3abQ{Jt
z&oKFX-k%Tpk<-cqVzC&*atz1$h=<QDT39XkEVri2AVF7i3>zEB0v@B<f;w@WCQ2t#
zFzqQ?%bhF}DHu~wZ6@Gny_Cw1it>L~)12~laR&a;J1w!BE!vRDKo@m78fjdv#tUWh
zq61ZooGd~e<tjF{A&lHMWCKwwRSm3GRL!tFV{HkgD16#-v1(~BEyZcV<2MYQ7ZP$(
z2(Vl<C<Oz7WVlWUg@jl#QYVN>F`Qt_SP5yJCbV!FtN+0U|B3Ym!n8?b2|C6esLKvA
zK`C+Gm_~~z3w3fNDic0#dMy)JeHtwj*gE!~ScZsUy!QUp?y`x@khh&0UUHZke`t}J
zcgS#``L>cF7vpVON@NSKzHHmEpod+wGqv#j$I-Eu?vMJu@0*t0=-G5`ZEpDJyx0AY
zzCBeAjVE69JwIuUE$V5#Ix@gszc?;P8!lfMI9trlrn_a7`Y`e`ws&U^R6I)d3ZIz8
zPxc)YTds1~9!E~P{o46Z_2B8@RBy$lXH^G^p9eR{C-x+d*NlDW6?D469zQDIe)Dec
ztf6l8Cb+e9t9YpD$iq{Vacs%`{fk%VmHo8?wbI$c9dPvK(laM6z4-NDi?ga><-XS=
wa`(?W!jp~Cz2(N^C08!qy%A{KPFK&ELyh)x?t{MlmEJEPooti_gk3$q0qALg6aWAK

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_status_more_dot.png b/packages/SystemUI/res/drawable-xhdpi/dock_status_more_dot.png
new file mode 100644
index 0000000000000000000000000000000000000000..685ff6758a6a9f9a0dfe26c4c0237b65a85fdefd
GIT binary patch
literal 1072
zcmaJ=Pe>F|7#~}*GzBkZnbc#fuxNMw?9RF~xarK!nhUMTy3`Uv&CWdCN#{>9&vq0d
z4HP{Db}NXq5b6*TT{?KE$bzU-UCdiuIuw+*4ne(HceR5#@aDbu@%w$>@B8y+dV5aS
z*EZD>1W}*rmNR&-^VjZb{69C+{}pcsP%?-5tN~P197u?om4_f@D1$Hq6>ap&Ti8wz
zfmS`6L%H-BLA8vK;$uRdVPiHyw0C&6q7Fd>@^DZ$<K&N}=OoazIC-8+(`h>a3wrmM
z1N+8$vg+87%4=lDDbVf-*nt6&0z6~bbOkR?mi!9%?3*bPlpts*POgi}rF%ibav<PB
z(V)sO3~1v+3>OQt+)2RF3`fyC#n3^T5g1xvX;A)19L>=NgpAx(j)iY=vVf2+P*ky4
z3>Cv6%Ne8?p64l=rC2tI5kYs<M2Z(Q-Ij_68M>;Y+eo)e;Coc^)(DD|Sm}BShMi7t
zI5ypKp>WA4Pq8T`L{o<0=T$<xC<8ZTY>9TWqc)^6(6vS!758JHr9#HF+dhyF#A*cD
zQb!DEqLdsbu_dJGn!qR7HYpO5WR?{fCdr90xlKw)v@9j%h#ZSnxGB>`imAd1SKs7{
z+j5130~KUBS<4!(bg#EyA<HdTHb^8&-2$y?Mb%B;c-${=Sub?-t5EB5ECZA(B<NeH
zkVPpPlelmj&*3>pa#EDzMNW=JIGUx|Btw?D+7{WDxsm^JDJ+Ka+xt(uD<(Wc{&8b?
z@nvKDp^0bS!Na{e`SbyP823`LnDtikztzhxh@HcocdM3fbv_R4UD~nyZo;c>__L#i
zmbmV~+CDJ#tt-$tzOrk2juq2y9^S4x@oew(C$Z^6P3u(EHP92#r}N;DJQ3M{YyRcz
z%tYkp!G+JwHBF1O`07sXN%Mkotl{DjY3=Cjh1sdO&hPa%oBIiEzOg&_{^Qw+mFDR^
o<G<<}u1|gm_cGx}P1WN>fOuUv?A||8ob%ssD%m41N|$c@1!^x+>Hq)$

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_tablet_mode_bg.9.png b/packages/SystemUI/res/drawable-xhdpi/dock_tablet_mode_bg.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..f53b1edeacb3490b92ce5a0a48a19e1047a5f829
GIT binary patch
literal 1034
zcmbVLJ#W)M7`9YERiz^FHI(V(E)2vzJ9biAbxZ1VXap%G2_hR@>`P*`_PO?zxSa|^
zC8Y8bnAs{ZLxqqKf(cmp1#C!6Fokmx7lx`xc({At^ZPvS_tW*Yo3k@lX9Pi*t*xR4
zzcYDe`W!!>sh^JcHOHJbYtk+o;Ft&%k9G*C1-M5V1baJMAIYL1Om+QMo3-n=O_v4|
z&TOPKh&Wmh7MIfqyBmao4(a)!C4PVPMg+cRiTCw7tVcHK`>VS#Y3{DI+}#b=@WkaM
zu$Y>hARr8bG}sIiGquDKugT@?Sr);_gl$;jIH-1g9oRG`K$l>_g(V0|ilh{^a=CmR
zs8E42RAogiC}p##nh=7?CvtDG*EJicI`PFdOYAcinX)_>45UF(qH#}F48zDcRJFh@
z3dv5$a9RkH`J4ff#Et!k`7{I>Bks^`W{Et~aSB0HuOAbK$)r%cWO9llS&^U|1X*4q
z>x4DPpD<3ePFgz=ksBnT+p)|0(Vfr1ymqHM$_#ll=AGE*O~IRpy4wK>Sq)ht|08+6
zXX?-?mrzmFG!>Q>6va@WQH8355Yo^>+0Hpm!fFe;0Tlz;4zd-+(JQc8ww+?7Qbn2r
zoobG)g$cu<OLD(H_dCJbr(#VzCYaH<Md@Zf0qcFrXws(<u$wxlW7iKeJ!{W6TSQ|2
z5%H=q4Zx_rrhkHeUHw<yW32Z-HIsQTayA@)4NLySComI_N1rRl%R@rGF)?3_yYHXB
z<7;KsP^FcA?RYoN4!`_7xOOlc4sY4N9(=z1WABQhF5wQi2=UAFFIM&+H$SZ2yEM0T
dM%y>{gel?e;q-;q`$ylh?W{R#=y2uXli&7_LQDVv

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/dock_yeti_delete_icon.png b/packages/SystemUI/res/drawable-xhdpi/dock_yeti_delete_icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..83f5f5f367def18bb9f649b9153f4265d7c0f26f
GIT binary patch
literal 2523
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
UE*DB1H-5L=UG_WIIEAJD1-qgm?f?J)

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_allapps.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_allapps.png
new file mode 100644
index 0000000000000000000000000000000000000000..05a3dd112b25b2645af830e9e6c2c6e9d208a4a6
GIT binary patch
literal 1246
zcmaJ>O=uid9G`5hwu^;g>p?*or<W+s_t(yJH`(mW#;m$=yV+t|L4EV)O?F6T-gIW-
zZsNh9R20F3P+L&2cnyYPLD8bYV!>!7B7#t{^dL&K*pqtj5Z`QeV-BJ7XXd^4fB%o)
z|7%`vOg?rXe}A5$r~|bLyGhoFyc7HGBwudr)Ei{EFRf0eQ`k#8AV$=fiycJQ0x*M`
z2)GNU)=-h6_Ppx1rqk*AlP1Ig2QnG18)T*^syNz>0GvfB?VuSyEHSq(tunOlmYAp2
zx=@cS)b=M9V>Gom*@BC+&~Ta25xUqliGcv6fbIr!VPbYmOwX=K_8FUJ=$=SATVl3A
zP1hT=g=0jkoW?>y(`nt{L{--n{ZU#HM3on0UKUtMHWk5CB)b1F#9QooX44+;`y!_j
z(@xXK<oQmg!*yg1$1}WW7zQs$yd<$if=w2}6m;1zIWn+dqXfo&l=?WNGmF5%^J$48
zNVh@=qI!MXaG3NHMN-ChLBxxkzz0DVS5G=go9KTSyGkdmg$VIYl;HUol6rVY2FfIN
zw|A5Y5;W#hu}_Ku=4=e-0~Dq;yTp(i&h=dr>Z&6k&0$qR1FWMffCU<KSx0sR*HsiK
zyWYUgZu+7nD3&^2tyIQUQLL&3xnfuqQ7_1rP^pf|1KnDfq#%T7;M*s@`?~gRbxkWq
zAjNSD<GDc>G}<`DNgGGBW%a5~57z<o!;JZGR;aDGZ4~=2Aa^{*0o}{A>F<I<F31H}
zLprNyKw=fgFj!FV6jqZxUDW_284{SjzPlrXTb)WcB$8+V$P`rtdaejqPXPuil0>it
zi5PcfsK~k|NFr1jo<QWY=GoCq0~YDfY`Z-g<gh(lC?pdVlhN7udH;K4?Eb9TW3BGB
zo7cpAPCQsX_9JuGcTYSME*@R~?b(MW=`$x^yL{n`e?a-|*2vY%H@-i4w0-@}&vQ$;
z;U#KsgW7xWJe5CB<qnsJ4wo}#ZeN31UH<Zib1z=iM$Z0n@!#dm52CkD{4`7Um)=3|
zZ=U}9xvw@hPHbLz_t5&MmA_V(KGxS))@DB2^U}F{rr<~7eDRy&9}f)QDi7T;y!7GY
z7yFc){`!$`dsJU(WLLTN8Lvmb=I<>pD;a%KA&7<uoIJe~PM`VvD-Y)Gri}gg?C4GL
Qc=pGsRVVG0%JVP(2Oij(8UO$Q

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_back.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_back.png
new file mode 100644
index 0000000000000000000000000000000000000000..145fa7c0dfa03c1e09884b7d6c03bc3068f94822
GIT binary patch
literal 1637
zcmaJ?c~BE)6c30tLvf1r7{L~IR<s1&>~1!juqzRBpu`f6a9SN<ufPJ?4V#4oj~SyD
zM<_b&$aqydT5+sYYp0dAIz_BKG_}>L9ju_8dX$b;Y^#V$)oy@T|4?^k_xry0z2o<O
z@4eYIIazZ@N5@C2RI1VT44YF~J<6M*9;JM>$EzEaB~DH+mh(iH?4u-3WoAX11MF_9
zjB|1nTUULYOI4{x)bshpa<L<mWJI@?3h8M5?vN{$DmBgTp_oce257E~7fj&ILx(|t
zXH8%c?m!$KD_72EES9*u#aa2x;!1{K!L(UGs-ILGxH*{u{O&5jOZrXVpkGqihr}=l
z464YLCU6K;u_FhtiV_FlS_8x&1|wi3v?y*g>Wwo19fIO8g25O9=`d1{ka`_3{D4X{
ziFJ`q+nnK8%E<(l%d&@rVV}>Z^<i33DuYpiAYeoX>vWK!0eR~Lnesz|cS_iUjq@@R
z?~!>?074!qTC9;xpn`NL1-HlHc<fm44ilwN2Ky-wjA{|s?GEKNsO^=V-2X71s_o6M
z^Kh_}^NKYRqtwGSC2Xv4_xwO1MFkC+E%8cGs4APt)VMi8w%bgga-(H=mSl`Ljc^7U
z!Vv=n(MCN5Q3i&EXpBZ!R<CC;))n^iG<(!yHsYw!Y_ZJ2Q8XP-!7PN;f*MmWD`H7E
zV_{pn;FT$X;li<bCHAl_@myQdDshx7O8KH#74CwZa#0q&<)R0$S_i8RBsnOC7eYc!
zs8B<B+c=4@<=8or=mrLvCi$nJpc$Ib(KHS*1{Q<#2F?Z12&#h!9HVKL&>1)*2M*h_
zPcS&tsft9&#1jTYqPU)Mu_y((^b`T13K39>jx$0m#^^Dl0nwoh4#EmVIMh5(G*eil
zbZBV%cr=v5<Kf~2Wuhcybi``;m`W8{W4D>}{pYW5KKy!f?!@m(Ae$z`7X2!CtiJoJ
zQGCNL=la<dl{xX<$+jdkF>!q3f`@NJZSOepX!h2HT{~v;wYj^Gn5*sLuSb`y+OV=H
z4{q=Aq)onisV^`9_FpD?h;@ZmZrzKz)Djs`M@2<Oj!{2*Y4n<ZX}qy|-`5MAt(lsc
z!TQt3qu=V;@Y&qBf@^twj+Tf3b*7@VSNQnk$N(id;&KnJdwX0{heV8kli}u)HutWP
zdz07wVL5uWUH86zNloYenB<c6%ch>35I>=_`K4gqNA2#ucfXva3IuXmZfiyaujXI4
z@OS(9JzXhRmZ@WwuMX~%zHfy$ojow+Vq-_l7u%OQ6PEPd3{K+irELpz#O%(!-`siU
zVDZX#03?;H`uW1``1NRIPHpzx)TnJ^9l^2|Q^7#%3C+z0eUdt6Rl=b&1@G-Qn@fSt
zm3z<5@5eNmMTPTj|C==OTm8JQTiT0F!5ce~Y10?bW6!mG*wx?Hw)Nrufs*+zGh;8e
zor;**Uop==K^o;c)%5#yGPgk(7l`|5SLVi3pLD-4W@Gj0YtwW>RjsDL*VD4)^bG%s
z*ojHK*%_0YUt9EG%Rj+(5Q$7keDhHqe<un$*RXJI>D|u<etYriUTJE9uWZMpZ<@MF
z6&}u%j{X75J~5fg*mR(Gd?4V>-c;D@@52wJX+dOZ_mvNd;tH>=y}vMaqCtr1UsSj4
zm04M~(!@{CwVmI*=Rx5<5J~8+__J;8fgkH5ZaurQgH;D(W7X<ad4FXuk5IKW6NLai
RJ@orf+0(OZ`z)m^{sUt!OcwwE

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_bg.9.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_bg.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..f2a7ad49c931c673e2ce56179a5722b0082dca82
GIT binary patch
literal 1901
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_home.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_home.png
new file mode 100644
index 0000000000000000000000000000000000000000..ac14059450914cd09231f9b5625aa8d8239aa74d
GIT binary patch
literal 1846
zcmaJ?c~BE)6c30BR0gkVQDoMrBdD9rW^<58RB~`s6OcruY6tfUY$4gOSxf>dAczHv
zIt47s6z}_Pyrl*4)>^NQwP-E%K<l7Vm7%pB{Q|`LhvUxd``*6qoxk_qY-zGFJ|uWZ
zus|RPNlehCfYT1%guq^aiq2*)0Y@0GPvuRlg?Hi{Er_L9f`$^UcsiXz<CHu5EFB{d
z^eAD>seGzoii%{dBHXJZa#_8u1cI1}E;~+U(mX`a>5NS+d~&p22r-meI74O-8|+#-
zgGtEcXj87yOy*{iN=i6!0u<v?0S8u^$03(B%jQtI)WS}`D!_Zih!E;j;WO33uB1{8
z$&i-iXh<fK!=zZQfD}p*DpM$=igA!cjLHx(hG1e?f~llpl~e+CKSB_Vqb#ZvU0io8
z@TC@J@Vs4xAWo-K<itcQmyV!Hr4kWK5Qzi^8nDA{<8c>kbByqL(9sT(W9&S`+90n-
zoM3Z!wGd?5Rf5%SFuZkab94g*AVXZZ9YIB6#A@}{)v4{^Q|SNGc(1m@?6%WL3hiKX
zI1=>3GQwvJu={WzuOi4smBcZiDR`ESC3CE_jZf66h2Ta+F_el_$OthlCt#Uaj>CjP
zio>{^q+kLg#1ti!k{D(2`FWo`s)<#|P=#KjiIbtIUKWjMlv)j{h{m*HjXoCh*(TZ?
zJZ>XtUu*`%?zYu^&{n18Xq;y`Gs|ZArXV?k<yl7tYlpPj&aOj|2ApJUUSX8CQC)TG
zXpWgnQ*j(?g*uT|G4IKOAPJ>}AY?Epr!ZJ5r!6ocMkTOPh7km%l*nlXE$p_Z-a)Wy
zQh@|iV)rGaLS<6YLZLWpk>W}i1wg>j5?TRM7%9aRa<K#@WkLj`h<JzRoni8cz=V3)
zx2pj@-Yyqy0~^JG)tMMtH3n>CT%s=4>}qPQL8lCi9au8BZ=`bl9Fq3W$RyU4Hbs^4
zgEBVnO=&1vy7YT&P*Y?;bZewOSe0<XXc+g^ipE%io?;wD1jYUIW|8yev&JEzmgR?E
z=08nOPj}ubdL{9A4tjD<66m_dX==pJFC`$MAJj$l1zuiXFwn1mCk0o4_bSXO|1&u-
zpOV)YVg{Yg-g-UIdF-2JtSu;d<LPV7%i3oB-ScJm>(BIA{?8)|rGXudJA>|rn^qTH
zZBw}XBc>h-*SuMLNxO^mj67N2a3e8(|AntlHTOMov3bazu%ajC@N>saZIg#dewl()
z4R06D8!&;%Z84pwcyaU-WB%UWk3;KL2D`@E4=!{E))#)%cI3#K9Imyp_9)Rbc}G~e
zp`dnD$Ik7RiJO~SwttE4wsM<{#M1t2e!t}msaY_qXUDOcqk#vvS|6D`Nsi(X|HyBz
z8DDYsjJ)UIGFqKoO<p-s6&`iL-8?KMv@(8?97ZyqWN%zh9>y#^mMr@8b0}@J?AYob
z*K3?r9d-GaKXw_<r~PrKt=E%68~<y=`MiP|tFGVOe{-8sS(+WVXG7F7cUG&&pWl3S
z)5|8Zc1Dmg$iD2M_#VB?-Fkff_|fR&eY*yPP4%2UtFLG&lg49t0P0JjCfi@tn@0^F
z?bnNAzeqZhSdjPgc+(Hf=tZ|_K~llveRIw!Vp<MYEwAt-_x2pW*w*j2`$^33_J%C^
z*umUQv$|wxc-rE4fPqq3tg5U#^NNUQJw5Eyik`-AH+7V^p^fvA%66DB<qVCO+c!6r
ztg5^=JK%xeZR`<zW7?6l`txt*Ysjn)-QDVzqPnz@29G7}T9N4C$PKH4&aXQFGt<fV
zfCmQ$pSw~Y;ksgWKIrqbM@+!#@&mVaD7M|$XG^%aa>?tLg|mtF;zK*cXL8o&uFbm>
zy`p{f`l;@%i^he`OV&rO92in8&nlTvJahR~RbE~1-P14g({Au3eUR%Bsl!*I=dLvT
zd->Wd-kq2B;?TW4wa?UJ@^5~(=GK<NH|pv%V#~~MO_cx0No4{b-4M7O@PG;@b<r|G
j5a7!MTZcWLRp2L>S{dA+eRVs|`zK4(8+E%ha~A#wm3F>%

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_keyboard.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_keyboard.png
new file mode 100644
index 0000000000000000000000000000000000000000..df5e4ea785274fad518b07769cca075ebf718d27
GIT binary patch
literal 1643
zcmaJ>drT8|9IuF#u%P&g2y;76(1E*Guh(*w;%Ey>9H>|npLnmrQQ9ll!xqpPRKN!$
zQvv65(-|KToet(>sF2}CU?jRMK@fCK)-B6W91y2NbXTCxKZuvyeSeSd_w)UHU$=8<
z^1`6N&_IPk5tO*dlp;%q{4NSm%3ruCXSXb7NbzaXa={|GD3Mddu>#Eji8d;OOW`Os
zFQ<u%Q7Fb1^X4=uE$L$&BiLZds{^}jUMPhkW`Wy5F;-3jXfA`d>%pGdIuPJlJ-Cuc
zLX#XuE|XuBFLKNClg&)Nl_6PhK`apC*2w@iPND#}E!*zYx%J=>u1;Qij}Z_UQjx5B
zaF|qD(o(=Eh#Ww`8i+wPT0l#}7@^gwwI2d16eAE6M{pEU;W{;{Q>%cH2b8^utVNe%
zN*M7a@AP1%Bsp{l;&QoQ7Y++z27-|!iJ&S(rGjJ)$eCxCC^uwx&h{agI42|W4v81+
zfESUXg<MGw%1nntusM>FUIW{mBZ-nzhPWvQg25<avw7nh(soKI-2XI2)pnZm92}Cu
zIfY!2k?UcZ?K75h_jX5KMVXCmiO9=Ep|VW^lWXJbQld!@$~Q2}vpPmg&?u*&Ap+G<
z5Uo{H5T#*Qh{kD@Wz}j1XDvRQ(d;oJsx}e{8iOH$z_55C8aI$e1E!6}ji@0$4)@t6
z+MN<*XE>j4UiLj=OT5)qXB0U~5=65gWc#{cX{I0v&P>4p7>z?!2R=xm7~bwZjPw?2
zIBpXs@*6oeK@@DjP^NYKC@g4(CRH>|K#YdPA+?6HKs1V}Ad<jonk7{lPRoHK_Us!O
z9PU*4M2^JaBc#I!HDh5h3bLpv62jy}K+!5r3$Zw(#<dz$g)sz($P^K8^Sseaz9YFq
zz0235A#Yv}7iX6zN|Z<E@wv7Rg~G2O(G+KP-|ap)-#T?!NO5&kr0MU_i1n9xTeIrx
z0Qd((@V4V+wDl~wqihRUWT>B7NoRL=hX+rl_ZzN-e|!ISN>Eq9gP9@4EeG$FRv&HZ
zt6yBakHp*io*a4SP{Q8uvB5}Kh@Zco-<ZMx|F??DA34w2z0v{UaTrk+`eF_B>E$mQ
zZ^S)Jj=E4cwQ1no;nef}x2G4r8gr|BZu53kLuknR6U#R@TRgM;x*k^dny;QXylhUz
z=K-Z9=C;rJnhcXde(KLNlgDbxAKA~&Je2k9faN+*p6`@8U?D3us^CohOULR}E$`l(
zpPK%lwzuuMhxy)A^2wjh>4Wfu-iRs6jnM;_GnBCrRR!bAPpXda=_{VjtF3tcBBbic
z;fS6MXX+=<Snp{^veV$-?rNj{s8~r}wB}8p))tW%=c%cfm0s7UbD7!?*1p=^yP7=R
zozpRq>qtMkWZcWHptg8V*;fty<kwrTNwe|2d;V!%SXyIfziDncy(M<#gn4%=ic<U6
zJh@&H<54Ehx{&`~q^lgdf30+0<J#2fagDpNU+~AV$9kY1b60p(;hqyaE{Vn&EuCSl
zPb+)B<F7)4gI^5P%#YFT%GsGWW#8PYZLZC&Yv3z$t8#x`+*uHtC3QZ)idHQCx#St?
zS)2S(gUxy4)T;dx*PRM%=}Wo#=&yn1CVQi@aB$j{-!D>uMa>f$mLX&Jq-v%G1h9eY
z8V`j<U07Hdwdu}y|H@n6>{33xE>=X=Y&xj~|2<w2=<g2(2M5U29z~b{z<alL|BFc*
Z6nDnmJ2uDK((L{HC&nk6&Kovt{ST4oTX_Hg

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_note.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_note.png
new file mode 100644
index 0000000000000000000000000000000000000000..9510cdec03b53b30159bd588d7960638a682b928
GIT binary patch
literal 1230
zcma)6TWB0r7@ovd;zBirVzHu(la~}dbH8MU-8Q>3iCJ*tvRP=bAUSi+*<?uO(wUR)
zBqBr~D#gpI4}GwG6j79@5K6K3r36G!P|z0N1d&3Dg+6#cv)PS#2*rV!bIyPM|NFoH
zHW!<-&mSqBC~+Kjq(0-d*qX3+X5?Y^6}Qj5$(ASR)I6PwJG2W^!c}qX6TTk8MbaV=
zubtZ_WsZC3LeQS4^NklA6o(=#bi_O?pg694I!_>4CY1NdVh~k?ovU96e1I#$8KWUL
z5|=CmGwUgtTc2&C^<`vZ;q)oKoI4C4Boy*_xDsVfUJ-h@4%-)EN#J`bbh#qzlA3Qc
zc{ff8Z-^#9vT5;_Eh>g(>DF_+Dl3L0Ymz1dRdaON(N(_x2+UiGJ5I}+?)ze=im*g!
z;z&}r+ZDT-7^jPpV%xSPtCFe$rUA0Gh{7C1+1LQVBN<AAga&cM7l_c0S7}9HOm{;F
zlSX3?ILi8oVkwhym`I8!OJP{V)zi*si~L99K<%u(mJq2$vUoK`tR9`QficV7gB=x$
zjE(bR8nB|k6)#4sA&F?+s|f5y!~u4YW%x2NePGBY1iqz108NB}ulX{@x{fs58Q>gb
zuhd-6t$IeSHf<=%lrf>zY`3OZ6Phd6rmEV&wjN~^Mu-f22h4ZhR)3(a<E8}CIBm!A
z%AgCHOEHbJr8wbTw^wz3ya7=V6~dE6p?2f;NE)0ccsh+kzL#kyIDmzZd|UN>10WM?
zKsQMT__Cq`+t7R;+p0+{BJ}O?z6|bmDwD8Ck^vz{F?7_y3IrV;+CX86023;)0M?MM
zS*ENi$Pgq(Q7W2eUo#CvtV4_K-e|DH-f)qKO;pN8=hl12&$F@nsqR(V`Hy#QRZBPI
z(aCSVKl{tu<u_iw_TAaHj=nVV?ayuX?y0Xne`F26`}I-f{YabK7#`o?4mY{OqnEkT
zWp4P`<j}F6aCoFSwtDj8o3C8@tU))AU)+qAw_e+R^|AZEU)_0B-aK>Z$?Lb@G4sb4
z{s}j@q2WU#qx|Im+HC!G5AOW2@ZpsY?tc3B)>C(W0O8YfpZs~dRqhcPVk}C0!D8sp
g_&#<QejU5cefg|_f4lO`iQ*4apPKbPsx7?!FZ0WW3IG5A

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_pen.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_pen.png
new file mode 100644
index 0000000000000000000000000000000000000000..fd714dd066049b5191eac5a211b12a9968d06b1a
GIT binary patch
literal 1798
zcmaJ?c~BE~6plz+YKw@rwW7ss@IcBYo9rfG0|}CZXsqD~DZ&&T_5vbFHYAHATs=_{
z6tO9Use+6s>ZnlAp;#EJBQl_4)uL7usCEErsmy?yKOC_e4(lJ*o!NcAef!?`zIV+Q
z$HlDiof9yJ!{PX9)~a-@w6OPDpEubjuPdvB6^oeYBqo7QV{$Mn#fc(moB}i^ES=I(
z80pCBq9Qn)*;@_zBqm9_UP{m=9_F#(*-aiO4ksegZo!C5iUDvc-C&k+M}I!U1q`H&
zyFsLdv=$|mVOX1Mr4n*u^h9nZfs))vIS^r&vH&KE!2r9-Xtqi1GVUa<ls$XYd@e9)
z!eq+0Q>2o#ae$JxQh<mj1_?+k0VF6-Ad*NBNhlzM1R_2J^I-@S!cqj1B0^yL;<C}K
zWSUf`QcuTX-(=hjhOtQb{G6N|UJlHot?7ILilTf-$QKGh)&jIS%nW7+&9<N!1Qlf?
ztOg5Xpv`~>5yR<hM#g2CPNiV7XtghZ&9>=6u_fc%F$-V7gZL(sC$C9s8>6HCqwz{>
zo8Doe_&Ul)XIlxjA8A1|&TQ>oAIM|KvXRDG4Qx{|qlzZ7O_Z6@sAOFB3y(CAQbHoa
zAxeycB1nvZxCFsKOiYj<4&x9>A_xJKX)`#l@)sx}L@827DHLjvKoBhogB7S!A&`W@
zN=OkM1<&|u%r*uy6Vyy>0~>qV7k#a-RB5F!hPLWy+Bh=>aTzp2+cIbipj1wF9SGK9
zgu(1luJSZ$DsL5KHEf|swUssjla-blUcmw<a8!unB9IW1Fo=k$G!TabLJ$?fI8LHM
zF(sk6)Bfa36`Yz>R>NjunIR+<h!7%;6kuQ)f}x;*Ed&@Qq$D5-69_C3LqY)|;__LF
ze9!Q_G)yxpc0xVJ7puX(yjU*E%x;vGU7dwxqdVD+{6M3M(%XASe$Z~$#&bGHgM!xA
z8q{)Ku(L=f7q8oq+!$4BbQVDul6Dt4i&S0f<^75uJI?htC$4ig6m5T_TrxgZzUQia
zqCRI6ysy8&Hd^(xzwN+4!$b+{uD0d5CByx;hcd|qUS*I^<q|J{A0KaT?!0;bFB++;
zL(C_iJ5P1%s9k+ew2u0S#K2(p_mMtE-_knyVB@u_#>=~{+P_+?{$ZMtQ}c%$H=g5z
z1L{;;)zOsrxm3@lP3X~5pb;H=7!nSf-PKLuNO6MKNWrt}v5Amj=k;#!U{Q15Np!WJ
zF*I+5<;>~*djrPZUW3Pl2QCymp6j(3?#(~WIC=^ij_C@~!7}ILnB@3m|L*%p-KQBf
z^%2TgUx#VSiTl^6vS`0c^K4C#hg`$0-+Z@G)EyhVka+NJNQo26O%)p-JKgXh37B}f
z=g3V%S=Vwz`IUU{XY%u<<n7KQw|D+BlJsZ%aO?YnO&f1r-A`EkN^4zX^EVgvs0V8k
z<Oz-=p_(ff{_uWN`)KvHTdUk>l9knW8HGdMS@+hByDc9Tuc#%5vzFKA9~=vf4o~xz
z?hADJ4kV1^HEnH6(K}N6ZtN$xmL>hm?);h}rmqJN)EhTn5%{~lT)B#O>f&DExX;5q
zoq`%J6h7x|_w8eCJ3?ZUj*hpDS0Ct7_^ez}x5iN8+~xWwa^&P)SJS`*QJ84{y*$15
z3w_{0suV5X@V9Yk(*pPG?$d|IDzHMmBV}lOal<x%Ul*9vUfIzeBW$<T!Vi#=iu{Tc
zSAR>yy=>i(YeDbgW>W<`OL8y2GUbta)^YtiS=!Q8XJA(MC256k_u0c^>h`{7({Gu1
z3hAQI%>hNxS}lIQ`hNaa(~#1+aI@c%lGc>DstMY6$Cd|Y&-H5p_XW1NJ9d4Wz3xe2
z4vHHJF2+6ksiUpEq419Iruk{W&cZvo#zhlL3z3@2k3EB@0)W?ulkYwE{*c2w2`OIo
T>>m5i;&3$4F{%@a)UW>q7zC@j

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/ic_sys_recent.png b/packages/SystemUI/res/drawable-xhdpi/ic_sys_recent.png
new file mode 100644
index 0000000000000000000000000000000000000000..bf2cb8b02387da5884a91ff2ac7a8f2f22f58351
GIT binary patch
literal 1249
zcmah}TWB0r7@lm}8UmFnd1)v(op_1h+;5p7o6F85W~m#O?NYb2l$<$pHal+Sl9`k2
zW<g996cyVC6)L_I3W5*%B(^AM=u4?qLlG=g)GGR9A&M12Up%wfiG2ulVCJ0jpa1{<
z@4w9}<@qP~4-OAf6t%xNXIID?k#}xjANg`umtP~xK|E8#N5eX9ff!NKZs;Jo=z~R6
zLBL&GzKX^vs{bXgTEn%{Qzi_34x~C<+fSh=YJ9RC0oX*CcF>|1<e9BcK4WOl%`?xa
zC7~2qsNv0ZVsx}KUxl3}G+btKf*x<11i(ia&~1MyNX&Mg>EfDXpNe^g?yBHsp4lc<
zE0t+0j1jGJ8VdzYr*(r9Rb5x~Cum6!RbG&JSzsmER0LCz=-$H+Z?Ri9EB0*97dhpb
z2F8)e^Q~5kYsp*~FY=;c7`!0ylEe}XHdzZWXtO~wk|EeAfw321FAV4u5jf!r&NGDR
zb_jk{D(wIVNiR_(Wqcb%yvPZ>@27EfwG&)H|Iyf0JE^Wkh_9d|T!|s6M|~tSCb_$}
zqg0WwF`te-QWUUchj7J50WR8khTL$j=bBJg9RX<$s|p%m9bEw|(4fmYvLm>zqCnZL
zXE?jriv`QJrY*Zrm{mn_Mjew2hE)*tG1(FdGt+WrTMQBm0*Er-9`W6?weD$aS}_7R
zjH_X|lyyP55#lgugb{67-Kx{0B>=r36+WI8YCCQl#oj7%XXDVPyO}n<U068KF(k)P
zS*W=(t7xdsI)W&%hAKObYe*W>5!17G@5<nIrxFQ?B+3YxqN>2UD+0Ez0D~1tBG@qr
z>8vY5Mb<Sz5~0fQgd(3d&t1)wiAaa0+nv!Mhn?X<0hy?njLuJwefvHcyWflUbhUl+
z_RYihUlxYe!K>%)`|8TU^1~-jFKlcsPi(-?o6_m2)h~xXom~4{{pZ+?H<MHE{qW$_
zdTw-`+FPdf9ym`8o~Lp{Q+-2SVQ!#&<k|18AAkAWiEAT|ZYrDJm0SD1*&0q7AO3nM
z$<;2#e|+@%>Razz>aShgdhy*eEo#re0eWhk>dXDlX5*2ckN<eK(|P;3@KW>kFBk6M
z{x6chj$E6l%U_?lap%Gz_<hQ#kI)&UQ#yTnMl+gS;jQQYd|-h(`^MpqSAKh_k^Xdw
MGxPQbg@qUX1!FFeA^-pY

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/recents_remove_all_normal.png b/packages/SystemUI/res/drawable-xhdpi/recents_remove_all_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..bbbcc99099aabbd44cdba925d11673e935273045
GIT binary patch
literal 4483
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/recents_remove_all_pressed.png b/packages/SystemUI/res/drawable-xhdpi/recents_remove_all_pressed.png
new file mode 100644
index 0000000000000000000000000000000000000000..25744a4f39431f092eb6c3ec6c4b9eaea867d606
GIT binary patch
literal 4526
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/tablet_mode_back.png b/packages/SystemUI/res/drawable-xhdpi/tablet_mode_back.png
new file mode 100644
index 0000000000000000000000000000000000000000..2add3423bce11fef8d551eac32c6aee33037f137
GIT binary patch
literal 1201
zcmeAS@N?(olHy`uVBq!ia0vp^N+8U^1|+TAxeoy;$r9IylHmNblJdl&R0hYC{G?O`
z&)mfH)S%SFl*+=BsWuD@%o>>?5hW46K32*3xq68pHF_1f1wh>l3^w)^1&PVosU-?Y
zsp*+{wo31J?^jaDOtDo8H}y5}EpSfF$n>ZxN)4{^3rViZPPR-@vbR&PsjvbXkegbP
zs8ErclUHn2VXFi-*9yo63F|8<fR&VF+bTgE72zA8;GAESs$i;TrkiYNXsBRrsb^?v
zVQgfoqhMrUXsT~usc&eYYhY+)XkcYzpa2C*K--E^(yW49+@N*=dA3R!B_#z``ugSN
z<$C4Ddih1^`i7R4mih)p`bI{&Koz>hm3bwJ6}oxF$}kgLQj3#|G7CyF^YauyCMG83
zmzLNn0bL65LT&-v*t}wBFaZNhzap_f-%!s0<RzFwUtj!6b93RUi%Wu15$?rmaB)aw
zL8^XGYH@yPQ8F;%(v(3~6<9eJr6!i-7lq{K=fFZSAS1sdzc?emK*8A=9BK+0zKO}1
zc_2Yeur6O;E6=>*lEl2^R8JRMC7?NanVBh8E(RtRMlMd~POfI=hK8=D78Z^!ZU$~H
zj;?N|hUUf=FugAM$)&lec_lEtDG0q5IQ4=OL~a4lW|!2W%(B!Jx1#)91+d4hGO@VD
z*~rDn&Ct{cr+HAlDY)HYhEuOT&@uX;=tYWdm=G`xftc{b3*^9)e`+2u%@+X^cbk&>
zTLuP3c~2L|kcwMpu6uJGG7w;U5VEJid%beguA;|>)c2J|@jsT_(_;RSq3My+cDoGe
z{~ZaMy}q+NZ#C8jzMRs(WD?)wImX_RO5smBOg6vU-g-kp@c&iC)yogPIPJczL;Sby
zsW(b-oc0@q7QOR0{Pfxh0o|$pf)rLLWCydby0m4ywp%U2A<Utvq~9Vlk$sbwqm7T?
zE`e+g*^bZ_t&}`z#YeR!|6jLVNxH7Tr2CDgzt_~u-)HVvr&RjMI6CoWmB)k|vp(!j
zJ@eFB$!JUO#hsSC!U2gT(r()fDrc=p_+)m<!1%hrL_^hMUsRP32mJY(GGk>n2WMN+
zoEb9`R<P?xrUe{%GrP@F-0=6i39Le5mcNf(cGo+>`7)qJ!g3{-w&z|}35It+4?T>w
S-Zu+Wh<LjCxvX<aXaWG!>6+vK

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/tablet_mode_close.png b/packages/SystemUI/res/drawable-xhdpi/tablet_mode_close.png
new file mode 100644
index 0000000000000000000000000000000000000000..f3c63a52ff478585d9e90761d4d5d94b3d8db1c5
GIT binary patch
literal 1201
zcmeAS@N?(olHy`uVBq!ia0vp^N+8U^1|+TAxeoy;$r9IylHmNblJdl&R0hYC{G?O`
z&)mfH)S%SFl*+=BsWuD@%o>>?5hW46K32*3xq68pHF_1f1wh>l3^w)^1&PVosU-?Y
zsp*+{wo31J?^jaDOtDo8H}y5}EpSfF$n>ZxN)4{^3rViZPPR-@vbR&PsjvbXkegbP
zs8ErclUHn2VXFi-*9yo63F|8<fR&VF+bTgE72zA8;GAESs$i;TrkiYNXsBRrsb^?v
zVQgfoqhMrUXsT~usc&eYYhY+)XkcYzpa2C*K--E^(yW49+@N*=dA3R!B_#z``ugSN
z<$C4Ddih1^`i7R4mih)p`bI{&Koz>hm3bwJ6}oxF$}kgLQj3#|G7CyF^YauyCMG83
zmzLNn0bL65LT&-v*t}wBFaZNhzap_f-%!s0<RzFwUtj!6b93RUi%Wu15$?rmaB)aw
zL8^XGYH@yPQ8F;%(v(3~6<9eJr6!i-7lq{K=fFZSAS1sdzc?emK*8A=9BK+0zKO}1
zc_2Yeur6O;E6=>*lEl2^R8JRMC7?NanVBh8&PFaqZiXfnPOfI=hK8=D78Z^!ZU$~H
zj;?N|hUUf=FugAM$)&lec_lEtDG0rmIQ4=OL~a4lW|!2W%(B!Jx1#)91+d4hGO@VD
z*wWd=$<oycXr2Lfw?Oo!U~vmnuQN`)`as9%gQ6EHx?w`VGz4P86EBbhPyVTSz%*Y3
zOx%mV{%c}jV3hZCaSW-r_2z~nSCfMX+k-8!>MwcjDr5yq>KW}yzrc8lbt~5`(J*t4
zrkA`LH=o$dHQ)c>5c~h68J_!HzbtPIT6MjRvs!m1-yz4eDeS6CU3l+gJ6Z;mO?h~K
z-M>v~m8;(G(Oi9KUcT8))6X|&rFV7j{v|7N%;m++;t8oI*}qsZD#uOXWWN~6Y-o05
z&zqW?tO641ExeDq3*8C?G~HTOH0?+_(qT1WmxR7ctcU0^>4!`Y4eoJ-ckn*$o#0^6
zBe77J>A%$%P3A&#=DKZ)cUxZYd6+BiQg%!TV13r>C^kc!?e3x^o;|KhB}|-pGMN+)
ziHHjd1h#fso?z{HV4%rvY1XhIF;6DN#WL{R6itDN>gVJht(&rOr+mqK_nw~|1`PMC
VGd}KTPm2Q;BA%{(F6*2UngC%fl8OKT

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/tablet_mode_home.png b/packages/SystemUI/res/drawable-xhdpi/tablet_mode_home.png
new file mode 100644
index 0000000000000000000000000000000000000000..333c3533176ad1e189d3caea3f8c5b87856a9399
GIT binary patch
literal 1525
zcmeAS@N?(olHy`uVBq!ia0vp^N+8U^1|+TAxeoy;$r9IylHmNblJdl&R0hYC{G?O`
z&)mfH)S%SFl*+=BsWuD@%o>>?5hW46K32*3xq68pHF_1f1wh>l3^w)^1&PVosU-?Y
zsp*+{wo31J?^jaDOtDo8H}y5}EpSfF$n>ZxN)4{^3rViZPPR-@vbR&PsjvbXkegbP
zs8ErclUHn2VXFi-*9yo63F|8<fR&VF+bTgE72zA8;GAESs$i;TrkiYNXsBRrsb^?v
zVQgfoqhMrUXsT~usc&eYYhY+)XkcYzpa2C*K--E^(yW49+@N*=dA3R!B_#z``ugSN
z<$C4Ddih1^`i7R4mih)p`bI{&Koz>hm3bwJ6}oxF$}kgLQj3#|G7CyF^YauyCMG83
zmzLNn0bL65LT&-v*t}wBFaZNhzap_f-%!s0<RzFwUtj!6b93RUi%Wu15$?rmaB)aw
zL8^XGYH@yPQ8F;%(v(3~6<9eJr6!i-7lq{K=fFZSAS1sdzc?emK*8A=9BK+0zKO}1
zc_2Yeur6O;E6=>*lEl2^R8JRMC7?NanVBh8&PFaqZic1?POfI=hK8=D78Z^!ZU$~H
zj;?N|hUUf=FugAM$)&lec_lEtDG0rWIQ4=OL~a4lW|!2W%(B!Jx1#)91+d4hGI6@a
z#1*G`P`xQQ-D2W~Q?EYIG5VnBMT%~i5HJmanDE34<iL}EY927n7XcIZ$Lq-@3=B-k
zo-U3d6}R@xu=baB6gb|`&BfZNw#j-!@FDhw2P&<~#s3&?JY=3BrBR_Nuh2C~%~Q5Y
zNqL20$wNiQ$qFn>D?K{O8C{w@IzP|P@QdQzeNMK#TKVsi+k5ZM+<)!)-I=+ouD|x<
z@Mh$<VZXaTc+1D#+8g+{9W;tyI_@ZI&MGpAdGP{<S<Juw@$PHlPcU6IL8pSh%g-d5
z;c>!uJ14IPi#L4<eA^YiRm$yz2r%e(Fg`mVb%Xi(o&Ovu4*C)dwrxN258SritKwq7
zrf2HI>~DOp<#=()KD8$mmOE2sSco_^EJ^whX~cQ5!P&5a`-yVL2SxeWhrTNw-=n-_
zRbXs~W6OE(-v6saE{T6WpP1w!tiGJ<=c1nmvfd~7D~^dzViJFpdU26}|B*#EG^d~M
zOWWwLWAQC#V)75SjkeSI4X!?u`K^|`r{JeZXs#}!qLG_;?nhG_n=q^S4aKLOG~#?S
z<0niAw%MXFH?tr)lH;g#=&k)8CnV+Mx}H2Y%T!!fRAqHaGwXIrPxkcwqN_%n94|%Q
z)(UM>wwkY|u*84McFz;$7cD0=2uLQ++;(S6TK9LMdyg(}QBt4tYqeQMp=n&_w@dcC
zYmAm#&eIkPTl{Ii$$=>nPm@I^UjH%wYHCKL@2Vfl$3i~tRtr5dYtr*giWk>Lc+5N9
zyQv~+lcVKDc_)V6zd0XFRgd3aejtkdbIkdmi?t{JzTK1ji#05N2Gi=mlaXxm9kPAu
zZ_iJ#$T_+4ncDj#jYHx)Io7-GomRo-=3rkTVDLj;%%Sy<SIl?itaU*ldRbOKZWsKB
nwtUb%OLU*KCD*GT>lv6Co=M2W)O8uH1Qo=du6{1-oD!M<=mst8

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/tablet_mode_recent.png b/packages/SystemUI/res/drawable-xhdpi/tablet_mode_recent.png
new file mode 100644
index 0000000000000000000000000000000000000000..e44a70cf20b993a178a85a7ffb72de0eec0d998d
GIT binary patch
literal 1090
zcmaJ=OH30%7+z>%2!w}lKr|-9LJ%MAKCnPnDwJ*uO<Yn-6PtKp*&XNxc4yfg>_X50
z7t|oZ#CY}KK~9Q^HxmV4!Gi~)UN{iriI^DUK`$aWTWIlM-DG!W{{6r2|Nh6^i1+oB
zmmV#pD5^ZxD<;TFyKl)M@)df@UXY~@M^d;S4dIMzK`Nx8K?q{HJPZ?1Rwu^Z!VZe^
zG;7HePDvL81?fK7_3=5nNzfG4(dn47G6FFegu|K<q`y6VP6JI1(wF=aE16-K)_Nx`
z*gx5qR3=B1fJ%3s2OW+;2y}>L;OL`<EjU3s%PWw*Yi4MWb-^P+dQVhJii0q+An^NI
zy$Z*1pe^9z{Ov8g{|w++&d;y`hGV@fCvdF5vta+BNi<6x5)xu`KNdL!=`_Zsz%ZFi
z#+PaFA#0f70)YU-@(j;=iHFyoFtF@+4Z9)7AVOQQG!tvc04}3Eh{kb{CQA2G(9Jxp
zVeglT6pV3Xli_@<n^MkElK$_i>v?Y*C*XnJe-hit2@^62XrpmUA&nbqa6_3w*n%=f
zRuZAnTovPKgpr*_CJ2YKRRhhEtZ0U7JefsFk`Oa&EE@`pi9wq1_%uxw!o0{wxwGN!
zNNXF%Mf~mUAu-BE#ZV;b=h|A@b6626<2p2O4yztu#e!IOAas*N7NMnGfojx3I>;t2
zXoa<e3i9n^)xui33t|}}hH=~bSG#j2GDGe*KfL6SAAe|&nYYMrzu9WILoUX0ObjKR
zjlu2R-A+$cvuCWK>Rd6$c)qR<gU!lUKf0!B8&^v3_0r_xy_ua)<Zsb;y$P(dT?+%#
z8<#7~Za=^`E2h>P-_5>0JcXCHYpRcpcGkQEMfWS}#@Cj@(c}D=#fx+Eg8HF8Z|ZIu
znECm{8N=7MKEC(Nt?d+5%>Q0~_UP2&X4{dd$M8J%RH5R}47OHkm#!|vf34Q@&DE#7
Zri&=lbs}+V>#pG5>R6;teAqoO`v(G4Uhe<^

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxhdpi/dock_text_quit.9.png b/packages/SystemUI/res/drawable-xxhdpi/dock_text_quit.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..d1575471aefc0cc8084745b597af457de89b798c
GIT binary patch
literal 2502
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxhdpi/dot_focus.png b/packages/SystemUI/res/drawable-xxhdpi/dot_focus.png
new file mode 100644
index 0000000000000000000000000000000000000000..c129114747e8b518e1f0f7c802a80332b09ff1c8
GIT binary patch
literal 1928
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
O0000<MNUMnLSTaKQKFat

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxhdpi/dot_hover.png b/packages/SystemUI/res/drawable-xxhdpi/dot_hover.png
new file mode 100644
index 0000000000000000000000000000000000000000..f9c1a4e2f61e9ace41443635125ff729cf6aa078
GIT binary patch
literal 852
zcmV-a1FQUrP)<h;3K|Lk000e1NJLTq003YB001-y1^@s6b%#CK0009UNkl<ZcmeI0
z*>T)35CwM-fRk|kAvp;L0Q!<FAE@ej+nfbI2utE2>*~h58E!qcu6tcx!149V)4yYV
z`h4611Z?rU9w6lw0MP4+-}_)G*OO5ffzA@#I_Tam8MP5SNN5m1*BeCCX7F_Z0mn`e
zwG%u*uM>N~!7}!Us276gozDVF<$ZqME}|OYFC`?^V8_sS*Td&JBvkjVj|BjHEg=`s
zS`F2(>xF;_el6gk1SO!M8tTRH10gIUfgS>XnS|<s5BG!!SOPo<XpvAJK10t1a25F6
zX8|n3ODF|DhwkHumyex5hLunrzCYhp0sh=es8;xJEusjP$b7gyTS9sG2-r*T6=31B
z5SHKtFi3T8M+GqKTuLON`r-FW=!f4Yp(6MI8Q^;f*^{t`4-zPnP7@$@H;4cUq5@3j
z3kh*QC;=a!3lShez_;L8Mks*<49<P~9>fqV7eC@1DhmX_?g#L@CG3X}BA^N?XuRfq
z$fmrGA&wu@bmy5eVgW(k4~DNQz&2r10VH8!1wa*4-gsls!$py3!ajOtbRT2{0(8^}
z0U!aM15VEUDdA%k6iz-K_>et8Re;R=>4b1Es1tVo5Z5AxTH<HQ>$nOEcE5lw1b_rs
z3_lhiWIz=Z&HX`?3?X1Z<98LXmNA8Z$=_%Fb6G$hJHrauRskM3h~OBiAbv(DA(w#?
zf(l^xG28(D<QQ5DsP}sSh=J!aP(m;TG5j1l3W4vxjG+qR2S5rLfdqOE2;d9oATEd@
z6cEG@9)l`a#357xzwA8C?uR4C5C|CfS`SB#m%$TJ5<xuq2<RM1{94h!0`dqt_s9|!
zF$D30W2Zfe2>K;J=06?*I7wJk0r!A^1R#76;w5+idgl+>kU56L<Rjo)2@e*KO+H>i
zzW@!N!3T|4G+;R95<r9%FoXP$gqTLW7Qj$6@L(dMr{eX~FN0S*UW}w#fZzQ-iq=io
zM^9fBfPngO1psmZEW=lU-2DvL3s~Iyu?`lHPeHj1-wS;9=g^}m==uW0L?kAkTfkib
e+k3#>1HJ*6pHHPa>bG0~0000<MNUMnLSTYo&ttm)

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxhdpi/dot_load.png b/packages/SystemUI/res/drawable-xxhdpi/dot_load.png
new file mode 100644
index 0000000000000000000000000000000000000000..6d15b6bbd8b6933ff09925f4c50da128dca876ed
GIT binary patch
literal 2515
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
N7LOCeu4f8!{{<>W@#g>l

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxhdpi/dot_normal.png b/packages/SystemUI/res/drawable-xxhdpi/dot_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..0cf939f1cc4a27cda45645ddaa0fd99751d16980
GIT binary patch
literal 190
zcmeAS@N?(olHy`uVBq!ia0vp^2|#SZ!2%@j_k9Hkw0gQYhEy=VIoJr~Ff=UqyHb25
z6Nm`}4|+X5%>Q41`2VN>ng0*}`~C0xzkHrHxBsFGb!PwH=P=`!J^u=?l7cFS|Mkoh
zFH{s%9q7;CXW{qbe<J+0@sQ&zW{-wH&c^Ht3;reaFmo1kK4#L(y`&)U<_4FBHJb`^
j$ilDjuk59_=CCsCVtIJ?-oDqbK(>0i`njxgN@xNAcf3la

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable/recents_remove_all.xml b/packages/SystemUI/res/drawable/recents_remove_all.xml
new file mode 100644
index 0000000..79b3dc8
--- /dev/null
+++ b/packages/SystemUI/res/drawable/recents_remove_all.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/recents_remove_all_pressed" android:state_pressed="true"/>
+    <item android:drawable="@drawable/recents_remove_all_pressed" android:state_hovered="true"/>
+    <item android:drawable="@drawable/recents_remove_all_pressed" android:state_focused="true"/>
+    <item android:drawable="@drawable/recents_remove_all_normal"/>
+
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/scrollbar_custom_vertical_thumb.xml b/packages/SystemUI/res/drawable/scrollbar_custom_vertical_thumb.xml
new file mode 100644
index 0000000..7376a447
--- /dev/null
+++ b/packages/SystemUI/res/drawable/scrollbar_custom_vertical_thumb.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!-- Copyright (C) 2007 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <gradient android:startColor="#9c9c9c" android:endColor="#9c9c9c"
+            android:angle="0"/>
+    <corners android:radius="6dp" />
+</shape>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/selector_menu_item_bg.xml b/packages/SystemUI/res/drawable/selector_menu_item_bg.xml
new file mode 100644
index 0000000..c90a315
--- /dev/null
+++ b/packages/SystemUI/res/drawable/selector_menu_item_bg.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/color_selected_light_bg" android:state_enabled="true" android:state_hovered="true"/>
+    <item android:drawable="@color/color_selected_light_bg" android:state_enabled="true" android:state_pressed="true"/>
+    <item android:drawable="@color/color_selected_light_bg" android:state_enabled="true" android:state_focused="true"/>
+    <item android:drawable="@android:color/transparent"/>
+
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/start_up_window_item.xml b/packages/SystemUI/res/drawable/start_up_window_item.xml
new file mode 100644
index 0000000..c184c64
--- /dev/null
+++ b/packages/SystemUI/res/drawable/start_up_window_item.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/startup_item_hover" android:state_pressed="true"/>
+    <item android:drawable="@color/startup_item_hover" android:state_hovered="true"/>
+    <item android:drawable="@color/startup_item_hover" android:state_focused="true"/>
+    <item android:drawable="@android:color/transparent"/>
+
+</selector>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/app_icon.xml b/packages/SystemUI/res/layout/app_icon.xml
new file mode 100644
index 0000000..fa23808
--- /dev/null
+++ b/packages/SystemUI/res/layout/app_icon.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent"
+    android:layout_marginLeft="10dp"
+    android:layout_marginRight="10dp"
+    android:orientation="vertical"
+    android:splitMotionEvents="false" >
+
+    <ImageView
+        android:id="@+id/task_loading"
+        android:layout_width="@dimen/dock_panel_app_icon_width"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal|bottom"
+        android:src="@drawable/dot_load"
+        android:visibility="gone" />
+
+    <ImageView
+        android:id="@+id/anchor"
+        android:layout_width="@dimen/dock_panel_app_icon_width"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal|bottom" />
+
+    <ImageView
+        android:id="@+id/app_icon"
+        android:layout_width="@dimen/dock_panel_app_icon_width"
+        android:layout_height="@dimen/dock_panel_app_icon_width"
+        android:layout_gravity="center" />
+
+</FrameLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/app_panel.xml b/packages/SystemUI/res/layout/app_panel.xml
new file mode 100644
index 0000000..64c221e
--- /dev/null
+++ b/packages/SystemUI/res/layout/app_panel.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+        <LinearLayout
+            android:id="@+id/app_panel"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:orientation="horizontal" />
+
+
+</FrameLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/context_menu_item.xml b/packages/SystemUI/res/layout/context_menu_item.xml
new file mode 100644
index 0000000..6eee0c6
--- /dev/null
+++ b/packages/SystemUI/res/layout/context_menu_item.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/menu_item"
+    android:layout_width="match_parent"
+    android:layout_height="28dp"
+    android:paddingBottom="8dp"
+    android:paddingLeft="16dp"
+    android:paddingRight="16dp"
+    android:paddingTop="8dp"
+    android:background="@drawable/selector_menu_item_bg"
+    android:ellipsize="end"
+    android:gravity="center_vertical"
+    android:maxWidth="300dp"
+    android:minWidth="136dp"
+    android:singleLine="true"
+    android:textColor="#303030"
+    android:textSize="16sp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/context_menu_title.xml b/packages/SystemUI/res/layout/context_menu_title.xml
new file mode 100644
index 0000000..5fb96ab
--- /dev/null
+++ b/packages/SystemUI/res/layout/context_menu_title.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/menu_item"
+    android:layout_width="match_parent"
+    android:layout_height="28dp"
+    android:paddingBottom="8dp"
+    android:paddingLeft="16dp"
+    android:paddingRight="16dp"
+    android:paddingTop="8dp"
+    android:background="@drawable/selector_menu_item_bg"
+    android:ellipsize="end"
+    android:gravity="center_vertical"
+    android:maxWidth="300dp"
+    android:minWidth="136dp"
+    android:singleLine="true"
+    android:textColor="@color/context_menu_title_color"
+    android:textSize="16sp" />
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/dock_panel.xml b/packages/SystemUI/res/layout/dock_panel.xml
new file mode 100644
index 0000000..bc9916a
--- /dev/null
+++ b/packages/SystemUI/res/layout/dock_panel.xml
@@ -0,0 +1,161 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<com.android.systemui.statusbar.dock.Dock xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/dock_panel"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="horizontal"
+    android:splitMotionEvents="false" >
+
+    <com.android.systemui.statusbar.dock.DragAppPanel
+        android:id="@+id/drag_app_panel"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:splitMotionEvents="false" >
+
+        <LinearLayout
+            android:id="@+id/content"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="horizontal"
+            android:splitMotionEvents="false" >
+
+            <FrameLayout
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:background="@drawable/dock_tablet_mode_bg"
+                android:splitMotionEvents="false"
+                android:visibility="gone" >
+
+                <com.android.systemui.statusbar.dock.AppIcon
+                    android:id="@+id/start_up"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:background="@drawable/start_up_window_item"
+                    android:gravity="center"
+                    android:paddingLeft="10dp"
+                    android:paddingRight="10dp"
+                    android:splitMotionEvents="false" >
+                </com.android.systemui.statusbar.dock.AppIcon>
+            </FrameLayout>
+
+            <ImageView
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:splitMotionEvents="false"
+                android:src="@drawable/dock_startup_line"
+                android:visibility="gone" />
+
+            <FrameLayout
+                android:id="@+id/dock_panel_app_panel_layout"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                android:splitMotionEvents="false" >
+
+                <HorizontalScrollView
+                    android:id="@+id/scroll_view"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:fillViewport="true"
+                    android:scrollbars="none"
+                    android:splitMotionEvents="false" >
+
+                    <LinearLayout
+                        android:id="@+id/container"
+                        android:layout_width="wrap_content"
+                        android:layout_height="match_parent"
+                        android:orientation="horizontal"
+                        android:splitMotionEvents="false" >
+
+                        <com.android.systemui.statusbar.dock.AppPanel
+                            android:id="@+id/app"
+                            android:layout_width="0dp"
+                            android:layout_height="match_parent"
+                            android:layout_weight="1"
+                            android:splitMotionEvents="false" >
+                        </com.android.systemui.statusbar.dock.AppPanel>
+                        <!--
+                        <ViewStub
+                            android:id="@+id/dock_status_bar_in_scroll"
+                            android:layout_width="wrap_content"
+                            android:layout_height="match_parent"
+                            android:layout="@layout/dock_status_bar" />
+                        -->
+                    </LinearLayout>
+                </HorizontalScrollView>
+
+                <View
+                    android:id="@+id/left_arrow"
+                    android:layout_width="64dp"
+                    android:layout_height="match_parent"
+                    android:layout_gravity="left"
+                    android:splitMotionEvents="false" />
+
+                <View
+                    android:id="@+id/right_arrow"
+                    android:layout_width="64dp"
+                    android:layout_height="match_parent"
+                    android:layout_gravity="right"
+                    android:splitMotionEvents="false" />
+            </FrameLayout>
+<!--             <include layout="@layout/dock_status_area" /> -->
+
+            <LinearLayout
+                android:id="@+id/dock_panel_tablet_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:background="@drawable/dock_tablet_mode_bg"
+                android:orientation="horizontal"
+                android:splitMotionEvents="false"
+                android:visibility="gone" >
+
+                <ImageView
+                    android:id="@+id/dock_tablet_back"
+                    android:layout_width="@dimen/dock_height"
+                    android:layout_height="match_parent"
+                    android:background="@drawable/start_up_window_item"
+                    android:scaleType="center"
+                    android:splitMotionEvents="false"
+                    android:src="@drawable/tablet_mode_back" />
+
+                <ImageView
+                    android:id="@+id/dock_tablet_home"
+                    android:layout_width="@dimen/dock_height"
+                    android:layout_height="match_parent"
+                    android:background="@drawable/start_up_window_item"
+                    android:scaleType="center"
+                    android:splitMotionEvents="false"
+                    android:src="@drawable/tablet_mode_home" />
+
+                <ImageView
+                    android:id="@+id/dock_tablet_recent"
+                    android:layout_width="@dimen/dock_height"
+                    android:layout_height="match_parent"
+                    android:background="@drawable/start_up_window_item"
+                    android:scaleType="center"
+                    android:splitMotionEvents="false"
+                    android:src="@drawable/tablet_mode_recent"
+                    android:visibility="gone" />
+
+                <ImageView
+                    android:id="@+id/dock_tablet_close"
+                    android:layout_width="@dimen/dock_height"
+                    android:layout_height="match_parent"
+                    android:background="@drawable/start_up_window_item"
+                    android:scaleType="center"
+                    android:splitMotionEvents="false"
+                    android:src="@drawable/tablet_mode_close" />
+            </LinearLayout>
+            <!--
+            <ViewStub
+                android:id="@+id/dock_status_bar_out_scroll"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout="@layout/dock_status_bar" />
+            -->
+        </LinearLayout>
+    </com.android.systemui.statusbar.dock.DragAppPanel>
+
+</com.android.systemui.statusbar.dock.Dock>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/dock_scroll_menu.xml b/packages/SystemUI/res/layout/dock_scroll_menu.xml
new file mode 100644
index 0000000..1eb2589
--- /dev/null
+++ b/packages/SystemUI/res/layout/dock_scroll_menu.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<com.android.systemui.statusbar.dock.MenuScrollLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ScrollView
+        android:id="@+id/dock_scroll_menu_scrollview"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:scrollbarSize="4sp"
+        android:scrollbarThumbVertical="@drawable/scrollbar_custom_vertical_thumb" >
+
+        <LinearLayout
+            android:id="@+id/dock_scroll_menu_contain_layout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical" >
+        </LinearLayout>
+    </ScrollView>
+
+</com.android.systemui.statusbar.dock.MenuScrollLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/dock_status_more.xml b/packages/SystemUI/res/layout/dock_status_more.xml
new file mode 100644
index 0000000..0933f58
--- /dev/null
+++ b/packages/SystemUI/res/layout/dock_status_more.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<com.android.systemui.statusbar.dock.MoreView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content" >
+
+    <ImageView
+        android:id="@+id/dock_status_more_icon_img"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:padding="5dp"
+        android:src="@drawable/dock_status_more"
+        android:visibility="gone" />
+
+    <ImageView
+        android:id="@+id/dock_status_more_dot_img"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_marginTop="5dp"
+        android:src="@drawable/dock_status_more_dot" />
+
+</com.android.systemui.statusbar.dock.MoreView>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/navigation_bar_phoenix.xml b/packages/SystemUI/res/layout/navigation_bar_phoenix.xml
new file mode 100644
index 0000000..9e47c45
--- /dev/null
+++ b/packages/SystemUI/res/layout/navigation_bar_phoenix.xml
@@ -0,0 +1,450 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<!--
+**
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+-->
+
+<!--  navigation bar for sw600dp (small tablets) -->
+<com.android.systemui.statusbar.phone.NavigationBarView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res-auto"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    android:background="@drawable/system_bar_background"
+    >
+
+    <FrameLayout android:id="@+id/rot0"
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        >
+
+        <LinearLayout
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"
+            android:orientation="horizontal"
+            android:clipChildren="false"
+            android:clipToPadding="false"
+            android:id="@+id/nav_buttons"
+            android:animateLayoutChanges="true"
+            >
+
+            <!-- navigation controls -->
+            <View
+                android:layout_width="@dimen/navigation_extra_key_width"
+                android:layout_height="match_parent"
+                android:layout_weight="0"
+                android:layout_marginStart="2dp"
+                android:visibility="gone"
+                />
+            <Space
+                android:layout_width="@dimen/navigation_bar_space_width"
+                android:layout_height="match_parent"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/back"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_back"
+                android:scaleType="centerInside"
+                systemui:keyCode="4"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_back"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/home"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_home"
+                android:scaleType="centerInside"
+                systemui:keyCode="3"
+                systemui:keyRepeat="true"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_home"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/recent_apps"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_recent"
+                android:scaleType="centerInside"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_recent"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/all_apps"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_allapps"
+                android:scaleType="centerInside"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_allapps"
+                />
+            <Space
+                android:layout_width="@dimen/navigation_bar_space_width"
+                android:layout_height="match_parent"
+                />
+            <FrameLayout
+                android:id="@+id/dock_view"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                />
+            <FrameLayout
+                android:layout_width="@dimen/navigation_extra_key_width"
+                android:layout_height="match_parent"
+                android:layout_weight="0"
+                android:layout_marginEnd="2dp"
+                android:visibility="gone" >
+                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/menu"
+                    android:layout_width="@dimen/navigation_extra_key_width"
+                    android:layout_height="match_parent"
+                    android:src="@drawable/ic_sysbar_menu"
+                    android:scaleType="centerInside"
+                    android:layout_marginEnd="2dp"
+                    systemui:keyCode="82"
+                    android:visibility="invisible"
+                    android:contentDescription="@string/accessibility_menu"
+                    />
+                <com.android.systemui.statusbar.policy.KeyButtonView
+                    android:id="@+id/ime_switcher"
+                    android:layout_width="@dimen/navigation_extra_key_width"
+                    android:layout_height="match_parent"
+                    android:layout_marginEnd="2dp"
+                    android:scaleType="centerInside"
+                    android:src="@drawable/ic_ime_switcher_default"
+                    android:visibility="invisible"
+                    android:contentDescription="@string/accessibility_ime_switch_button" />
+            </FrameLayout>
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:orientation="horizontal"
+                android:visibility="visible"
+                android:clipChildren="false"
+                android:clipToPadding="false"
+                android:animateLayoutChanges="true"
+                >
+                <Space
+                    android:layout_width="@dimen/navigation_bar_space_width"
+                    android:layout_height="match_parent"
+                    />
+
+                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/yeti_1"
+                    android:layout_width="@dimen/navigation_bar_button_width"
+                    android:layout_height="match_parent"
+                    android:src="@drawable/ic_sys_keyboard"
+                    android:scaleType="centerInside"
+                    android:layout_weight="0"
+                    />
+                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/yeti_0"
+                    android:layout_width="@dimen/navigation_bar_button_width"
+                    android:layout_height="match_parent"
+                    android:src="@drawable/ic_sys_pen"
+                    android:scaleType="centerInside"
+                    android:layout_weight="0"
+                    />
+                <Space
+                    android:layout_width="@dimen/navigation_bar_space_width"
+                    android:layout_height="match_parent"
+                    />
+            </LinearLayout>
+        </LinearLayout>
+
+        <!-- lights out layout to match exactly -->
+        <LinearLayout
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"
+            android:orientation="horizontal"
+            android:id="@+id/lights_out"
+            android:visibility="gone"
+            >
+            <Space
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                />
+            <ImageView
+                android:layout_width="128dp" android:paddingStart="25dp" android:paddingEnd="25dp"
+                android:layout_height="match_parent"
+                android:layout_marginStart="40dp"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_back"
+                />
+            <ImageView
+                android:layout_width="128dp" android:paddingStart="25dp" android:paddingEnd="25dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_large"
+                android:scaleType="center"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_home"
+                />
+            <ImageView
+                android:layout_width="128dp" android:paddingStart="25dp" android:paddingEnd="25dp"
+                android:layout_marginEnd="40dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_recent"
+                />
+            <Space
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                />
+        </LinearLayout>
+
+        <com.android.systemui.statusbar.policy.DeadZone
+            android:id="@+id/deadzone"
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"
+            systemui:minSize="@dimen/navigation_bar_deadzone_size"
+            systemui:maxSize="@dimen/navigation_bar_deadzone_size_max"
+            systemui:holdTime="@integer/navigation_bar_deadzone_hold"
+            systemui:decayTime="@integer/navigation_bar_deadzone_decay"
+            systemui:orientation="horizontal"
+            android:layout_gravity="top"
+            />
+
+        <FrameLayout
+            android:id="@+id/remove_window_tip"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:visibility="gone"
+            >
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:textColor="@android:color/white"
+                android:layout_gravity="center"
+                android:gravity="center"
+                android:textSize="24dp"
+                android:drawablePadding="10dp"
+                android:text="@string/exit_app"
+                android:drawableLeft="@drawable/tablet_mode_close" />
+        </FrameLayout>
+    </FrameLayout>
+
+    <FrameLayout android:id="@+id/rot90"
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:visibility="gone"
+        android:paddingTop="0dp"
+        >
+
+        <LinearLayout
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"
+            android:orientation="horizontal"
+            android:clipChildren="false"
+            android:clipToPadding="false"
+            android:id="@+id/nav_buttons"
+            android:animateLayoutChanges="true"
+            >
+
+            <!-- navigation controls -->
+            <View
+                android:layout_width="@dimen/navigation_extra_key_width"
+                android:layout_height="match_parent"
+                android:layout_weight="0"
+                android:layout_marginStart="2dp"
+                android:visibility="gone"
+                />
+            <Space
+                android:layout_width="@dimen/navigation_bar_space_width"
+                android:layout_height="match_parent"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/back"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_back"
+                android:scaleType="centerInside"
+                systemui:keyCode="4"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_back"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/home"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_home"
+                android:scaleType="centerInside"
+                systemui:keyCode="3"
+                systemui:keyRepeat="true"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_home"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/recent_apps"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_recent"
+                android:scaleType="centerInside"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_recent"
+                />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/all_apps"
+                android:layout_width="@dimen/navigation_bar_button_width"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sys_allapps"
+                android:scaleType="centerInside"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_allapps"
+                />
+            <Space
+                android:layout_width="@dimen/navigation_bar_space_width"
+                android:layout_height="match_parent"
+                />
+            <FrameLayout
+                android:id="@+id/dock_view"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                />
+            <FrameLayout
+                android:layout_width="@dimen/navigation_extra_key_width"
+                android:layout_height="match_parent"
+                android:layout_marginEnd="2dp"
+                android:layout_weight="0"
+                android:visibility="gone" >
+                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/menu"
+                    android:layout_width="@dimen/navigation_extra_key_width"
+                    android:layout_height="match_parent"
+                    android:layout_marginEnd="2dp"
+                    android:src="@drawable/ic_sysbar_menu"
+                    android:scaleType="centerInside"
+                    systemui:keyCode="82"
+                    android:visibility="invisible"
+                    android:contentDescription="@string/accessibility_menu" />
+                <com.android.systemui.statusbar.policy.KeyButtonView
+                    android:id="@+id/ime_switcher"
+                    android:layout_width="@dimen/navigation_extra_key_width"
+                    android:layout_height="match_parent"
+                    android:layout_marginEnd="2dp"
+                    android:src="@drawable/ic_ime_switcher_default"
+                    android:visibility="invisible"
+                    android:contentDescription="@string/accessibility_ime_switch_button"
+                    android:scaleType="centerInside" />
+            </FrameLayout>
+
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:orientation="horizontal"
+                android:visibility="visible"
+                android:clipChildren="false"
+                android:clipToPadding="false"
+                android:animateLayoutChanges="true"
+                >
+                <Space
+                    android:layout_width="@dimen/navigation_bar_space_width"
+                    android:layout_height="match_parent"
+                    />
+                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/yeti_1"
+                    android:layout_width="@dimen/navigation_bar_button_width"
+                    android:layout_height="match_parent"
+                    android:src="@drawable/ic_sys_keyboard"
+                    android:scaleType="centerInside"
+                    android:layout_weight="0"
+                    />
+                <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/yeti_0"
+                    android:layout_width="@dimen/navigation_bar_button_width"
+                    android:layout_height="match_parent"
+                    android:src="@drawable/ic_sys_pen"
+                    android:scaleType="centerInside"
+                    android:layout_weight="0"
+                    />
+                <Space
+                    android:layout_width="@dimen/navigation_bar_space_width"
+                    android:layout_height="match_parent"
+                    />
+            </LinearLayout>
+        </LinearLayout>
+
+        <!-- lights out layout to match exactly -->
+        <LinearLayout
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"
+            android:orientation="horizontal"
+            android:id="@+id/lights_out"
+            android:visibility="gone"
+            >
+            <Space
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                />
+            <ImageView
+                android:layout_width="162dp" android:paddingStart="42dp" android:paddingEnd="42dp"
+                android:layout_height="match_parent"
+                android:layout_marginStart="40dp"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_back"
+                />
+            <ImageView
+                android:layout_width="162dp" android:paddingStart="42dp" android:paddingEnd="42dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_large"
+                android:scaleType="center"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_home"
+                />
+            <ImageView
+                android:layout_width="162dp" android:paddingStart="42dp" android:paddingEnd="42dp"
+                android:layout_marginEnd="40dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                android:contentDescription="@string/accessibility_recent"
+                />
+            <Space
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                />
+        </LinearLayout>
+
+        <com.android.systemui.statusbar.policy.DeadZone
+            android:id="@+id/deadzone"
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"
+            systemui:minSize="@dimen/navigation_bar_deadzone_size"
+            systemui:maxSize="@dimen/navigation_bar_deadzone_size_max"
+            systemui:holdTime="@integer/navigation_bar_deadzone_hold"
+            systemui:decayTime="@integer/navigation_bar_deadzone_decay"
+            systemui:orientation="vertical"
+            android:layout_gravity="top"
+            />
+
+        <FrameLayout
+            android:id="@+id/remove_window_tip"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:visibility="gone"
+            >
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:gravity="center"
+                android:layout_gravity="center"
+                android:textColor="@android:color/white"
+                android:textSize="24dp"
+                android:drawablePadding="10dp"
+                android:text="@string/exit_app"
+                android:drawableLeft="@drawable/tablet_mode_close" />
+        </FrameLayout>
+    </FrameLayout>
+</com.android.systemui.statusbar.phone.NavigationBarView>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/recents.xml b/packages/SystemUI/res/layout/recents.xml
index bdda527..9e5a918 100644
--- a/packages/SystemUI/res/layout/recents.xml
+++ b/packages/SystemUI/res/layout/recents.xml
@@ -33,7 +33,18 @@
         android:layout_height="match_parent"
         android:focusable="true">
     </com.android.systemui.recents.views.RecentsView>
-
+<!-- CHAOZHUO START -->
+    <ImageView
+        android:id="@+id/remove_all_center"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal|bottom"
+        android:alpha="1.0"
+        android:visibility="gone"
+        android:layout_marginBottom="100dp"
+        android:src="@drawable/recents_remove_all"
+        android:contentDescription="@string/recents_dismiss_all_message"/>
+<!-- CHAOZHUO END -->
     <!-- Empty View -->
     <ViewStub android:id="@+id/empty_view_stub"
            android:layout="@layout/recents_empty"
@@ -54,4 +65,4 @@
         android:layout_gravity="center_horizontal|bottom"
         android:scaleType="fitXY"
         android:src="@drawable/recents_lower_gradient" />
-</FrameLayout>
\ No newline at end of file
+</FrameLayout>
diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index a5b3a83..d80f3ae 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -47,10 +47,9 @@
         android:paddingEnd="8dp"
         android:orientation="horizontal"
         >
-
         <com.android.systemui.statusbar.AlphaOptimizedFrameLayout
             android:id="@+id/notification_icon_area"
-            android:layout_width="0dip"
+            android:layout_width="0dp"
             android:layout_height="match_parent"
             android:layout_weight="1"
             android:orientation="horizontal"
@@ -96,5 +95,13 @@
                 />
         </com.android.keyguard.AlphaOptimizedLinearLayout>
     </LinearLayout>
-
+<!-- CHAOZHUO START -->
+    <TextView
+        android:id="@+id/tip_area"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:textColor="@*android:color/white"
+        android:text="@string/statusbar_switch_window_tip" />
+<!-- CHAOZHUO END -->
 </com.android.systemui.statusbar.phone.PhoneStatusBarView>
diff --git a/packages/SystemUI/res/layout/task_preview_item.xml b/packages/SystemUI/res/layout/task_preview_item.xml
new file mode 100644
index 0000000..7aa4d30
--- /dev/null
+++ b/packages/SystemUI/res/layout/task_preview_item.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- CHAOZHUO START -->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="150dp"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="15dp" >
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal" >
+
+        <ImageView
+            android:id="@+id/task_icon"
+            android:layout_width="36dp"
+            android:layout_height="36dp"/>
+        
+        <TextView
+            android:id="@+id/task_title"
+            android:layout_width="match_parent"
+            android:layout_height="36dp"
+            android:singleLine="false"
+            android:textSize="15dp"
+        	android:textColor="@color/context_menu_text_color"
+            android:gravity="center_vertical" />
+
+    </LinearLayout>
+    
+    <ImageView
+            android:id="@+id/task_thumbnail"
+            android:layout_width="100dp"
+            android:layout_height="100dp"/>
+
+</LinearLayout>
+<!-- CHAOZHUO END -->
\ No newline at end of file
diff --git a/packages/SystemUI/res/values-zh-rCN/strings.xml b/packages/SystemUI/res/values-zh-rCN/strings.xml
index 47f41ef..d635b10 100644
--- a/packages/SystemUI/res/values-zh-rCN/strings.xml
+++ b/packages/SystemUI/res/values-zh-rCN/strings.xml
@@ -443,4 +443,13 @@
 <string name="quick_settings_flatkbd_brightness_inuse_label">工作亮度</string>
 <string name="quick_settings_flatkbd_brightness_standby_label">休眠亮度</string>
 <string name="flatkbd_toast">休眠亮度不能超过工作亮度</string>
+
+   
+    <!-- CHAOZHUO START -->
+    <string name="unlock_from_dock">取消固定到任务栏</string>
+    <string name="lock_to_dock">固定到任务栏</string>
+    <string name="exit_app">关闭应用</string>
+    <string name="dock_text_quit">退出</string>
+    <string name="statusbar_switch_window_tip">双击切换到窗口模式</string>
+    <!-- CHAOZHUO END -->
 </resources>
diff --git a/packages/SystemUI/res/values/colors.xml b/packages/SystemUI/res/values/colors.xml
index 0dcbe88..901d9e8 100644
--- a/packages/SystemUI/res/values/colors.xml
+++ b/packages/SystemUI/res/values/colors.xml
@@ -143,4 +143,30 @@
     <color name="volume_icon_color">#ffffffff</color>
     <color name="volume_settings_icon_color">#7fffffff</color>
     <color name="volume_slider_inactive">#FFB0BEC5</color><!-- blue grey 200 -->
+
+    <!-- CHAOZHUO START -->
+    <color name="context_menu_title_color">#df460a</color>
+    <color name="context_menu_title_bk_color">#ebebeb</color>
+    <color name="context_menu_text_color">#111111</color>
+
+    <color name="context_item_bg_color_hover">#FFEBEBEB</color>
+    <color name="context_item_bg_color_nomal">#FFFFFFFF</color>
+
+    <color name="context_item_text_color_hover">#df460a</color>
+    <color name="context_item_text_color_nomal">#111111</color>
+
+    <color name="start_up_sepline_color">#1AFFFFFF</color>
+    <color name="color_selected_light_bg">#EBEBEB</color>
+
+    <color name="qs_tile_text_enable_chaozuo">#ffffff</color>
+    <color name="qs_tile_text_disable_chaozuo">#adadad</color>
+
+    <color name="startup_item_hover">#1AFFFFFF</color>
+
+    <!-- CHAOZHUO  chenyaohuang  锁屏时添加40%的黑色半透明效果-->
+    <color name="keyguard_lock_view_black_bg">#4D000000</color>
+    <!-- CHAOZHUO  chenyaohuang  end-->
+    <color name="dock_status_area_line">#26FFFFFF</color>
+    <color name="dock_panel_quit_text_color">#FF000000</color>
+    <!-- CHAOZHUO END -->
 </resources>
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index 03ea73c..97b7911 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -312,7 +312,7 @@
     <dimen name="swipe_helper_falsing_threshold">70dp</dimen>
 
     <dimen name="notifications_top_padding">8dp</dimen>
-    
+
     <!-- Minimum distance the user has to drag down to go to the full shade. -->
     <dimen name="keyguard_drag_down_min_distance">100dp</dimen>
 
@@ -523,7 +523,7 @@
 
     <!-- The maximum width of the navigation bar ripples. -->
     <dimen name="key_button_ripple_max_width">95dp</dimen>
-    
+
     <!-- Inset shadow for FakeShadowDrawable. It is used to avoid gaps between the card
          and the shadow. -->
     <dimen name="fake_shadow_inset">1dp</dimen>
@@ -587,4 +587,73 @@
 
     <!-- Thickness of the shadows of the assist disclosure beams -->
     <dimen name="assist_disclosure_shadow_thickness">1.5dp</dimen>
+
+    <!-- CHAOZHUO START -->
+    <dimen name="dock_startup_height">530dp</dimen>
+    <dimen name="dock_startup_width">600dp</dimen>
+    <dimen name="dock_panel_horizontal_margin">160dp</dimen>
+    <dimen name="dock_appicon_bottom_margin">100dp</dimen>
+    <dimen name="dock_appicon_left_margin">200dp</dimen>
+    <dimen name="dock_app_icon_width">64dp</dimen>
+
+    <!-- Start Up Window -->
+    <dimen name="start_up_menu_width">198dp</dimen>
+    <dimen name="start_up_search_height">48dp</dimen>
+    <dimen name="start_up_avatar_size">80dp</dimen>
+    <dimen name="start_up_item_height_large">132dp</dimen>
+    <dimen name="start_up_item_width_large">120dp</dimen>
+    <dimen name="start_up_item_height_small">88dp</dimen>
+    <dimen name="start_up_item_width_small">80dp</dimen>
+    <dimen name="start_up_page_indicator_dot_size">10dp</dimen>
+    <dimen name="start_up_page_indicator_size">30dp</dimen>
+    <dimen name="start_up_page_indicator_padding_hori_large">8dp</dimen>
+    <dimen name="start_up_page_indicator_padding_hori_small">5dp</dimen>
+    <dimen name="start_up_app_icon_width_large">72dp</dimen>
+    <dimen name="start_up_app_icon_width_small">48dp</dimen>
+    <dimen name="start_up_app_icon_width_large_layout">86dp</dimen>
+    <dimen name="start_up_app_icon_width_small_layout">58dp</dimen>
+    <dimen name="app_browse_view_padding_left_small">20dp</dimen>
+    <dimen name="app_browse_view_padding_top_small">40dp</dimen>
+    <dimen name="app_browse_view_padding_right_small">20dp</dimen>
+    <dimen name="app_browse_view_padding_bottom_small">0dp</dimen>
+
+    <dimen name="folder_browse_view_folder_padding_top_large">40dp</dimen>
+    <dimen name="folder_browse_view_folder_padding_top_small">60dp</dimen>
+    <dimen name="folder_icon_bg_paddings">12dp</dimen>
+    <dimen name="folder_icon_content_margins">6dp</dimen>
+
+    <!-- Menu 198dp, Divider 1px, appList 360dp -->
+    <dimen name="start_up_small_window_width">560dp</dimen>
+
+    <dimen name="qs_dual_tile_width">100dp</dimen>
+    <dimen name="qs_tile_text_size_chaozhuo">14sp</dimen>
+
+    <dimen name="dock_status_system_icon_width">30dp</dimen>
+    <dimen name="dock_status_system_icon_narrow_width">25dp</dimen>
+    <dimen name="dock_status_system_keyboard_icon_width">44dp</dimen>
+
+    <dimen name="dock_status_morevew_icon_pandding">5dp</dimen>
+
+    <dimen name="keyguard_lock_user_photo_size">126dp</dimen>
+    <dimen name="circle_wave_strokewidth">2dp</dimen>
+    <dimen name="dock_menu_line_height">1dp</dimen>
+    <dimen name="dock_clock_date_size">12dp</dimen>
+    <dimen name="dock_clock_ampm_size">7dp</dimen>
+    <dimen name="dock_clock_expand_hour_size">16dp</dimen>
+    <dimen name="dock_clock_narrow_hour_size">20dp</dimen>
+    <dimen name="keyguard_lock_username_size">20sp</dimen>
+    <dimen name="keyguard_lock_enter_btn_size">12sp</dimen>
+
+    <dimen name="dock_battery_percentage_value_size">@dimen/dock_clock_date_size</dimen>
+    <dimen name="dock_bettery_padding">8dp</dimen>
+
+    <dimen name="dock_panel_app_icon_width">36dp</dimen>
+    <dimen name="dock_height">@*android:dimen/navigation_bar_height</dimen>
+    <dimen name="dock_app_move_space_width">10dp</dimen>
+    <dimen name="dock_drag_quit_text_padding">10dp</dimen>
+    <dimen name="dock_drag_quit_text_size">6dp</dimen>
+
+    <dimen name="navigation_bar_space_width">10dp</dimen>
+    <dimen name="navigation_bar_button_width">60dp</dimen>
+    <!-- CHAOZHUO END -->
 </resources>
diff --git a/packages/SystemUI/res/values/strings.xml b/packages/SystemUI/res/values/strings.xml
index 268a7da..6a5cf15 100644
--- a/packages/SystemUI/res/values/strings.xml
+++ b/packages/SystemUI/res/values/strings.xml
@@ -205,6 +205,9 @@
     <string name="accessibility_menu">Menu</string>
     <!-- Content description of the recents button for accessibility (not shown on the screen). [CHAR LIMIT=NONE] -->
     <string name="accessibility_recent">Overview</string>
+    <!-- CHAOZHUO START -->
+    <string name="accessibility_allapps">All Apps</string>
+    <!-- CHAOZHUO END -->
     <!-- Content description of the search button for accessibility. [CHAR LIMIT=NONE] -->
     <string name="accessibility_search_light">Search</string>
     <!-- Content description of the camera button for accessibility (not shown on the screen). [CHAR LIMIT=NONE] -->
@@ -1149,4 +1152,12 @@
 <string name="quick_settings_flatkbd_brightness_standby_label">Inactive brightness level</string>
 <string name="flatkbd_toast">Inactive brightness level cannot exceed active brightness level</string>
     <!--end add by wangyq12 for YETI-24, add keyboard brightess support-->
+    
+    <!-- CHAOZHUO START -->
+    <string name="unlock_from_dock">Unpin from Taskbar</string>
+    <string name="lock_to_dock">Pin to Taskbar</string>
+    <string name="exit_app">Quit</string>
+    <string name="dock_text_quit">Quit</string>
+    <string name="statusbar_switch_window_tip">Double tap switch to multi-window mode</string>
+    <!-- CHAOZHUO END -->
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/recents/RecentsActivity.java b/packages/SystemUI/src/com/android/systemui/recents/RecentsActivity.java
index d0876fa..2734274 100644
--- a/packages/SystemUI/src/com/android/systemui/recents/RecentsActivity.java
+++ b/packages/SystemUI/src/com/android/systemui/recents/RecentsActivity.java
@@ -33,6 +33,10 @@ import android.view.View;
 import android.view.ViewStub;
 import android.widget.Toast;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import com.android.internal.logging.MetricsLogger;
 import com.android.systemui.Prefs;
 import com.android.systemui.R;
@@ -64,6 +68,9 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
 
     // Top level views
     RecentsView mRecentsView;
+//CHAOZHUO START
+    View mRemoveAllView;
+//CHAOZHUO END
     SystemBarScrimViews mScrimViews;
     ViewStub mEmptyViewStub;
     ViewStub mDebugOverlayStub;
@@ -81,6 +88,10 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
     // Runnables to finish the Recents activity
     FinishRecentsRunnable mFinishLaunchHomeRunnable;
 
+//CHAOZHUO START
+    FinishRecentsRunnable mFinishRunnable;
+//CHAOZHUO END
+
     // Runnable to be executed after we paused ourselves
     Runnable mAfterPauseRunnable;
 
@@ -222,6 +233,11 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
                         R.anim.recents_to_launcher_enter,
                     mConfig.launchedFromSearchHome ? R.anim.recents_to_search_launcher_exit :
                         R.anim.recents_to_launcher_exit));
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mFinishRunnable = new FinishRecentsRunnable(null, null);
+        }
+//CHAOZHUO END
 
         // Mark the task that is the launch target
         int taskStackCount = stacks.size();
@@ -249,6 +265,11 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
             }
             mEmptyView.setVisibility(View.VISIBLE);
             mRecentsView.setSearchBarVisibility(View.GONE);
+//CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mRemoveAllView.setVisibility(View.GONE);
+            }
+//CHAOZHUO END
         } else {
             if (mEmptyView != null) {
                 mEmptyView.setVisibility(View.GONE);
@@ -258,6 +279,11 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
             } else {
                 refreshSearchWidgetView();
             }
+//CHAOZHUO STAR
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mRemoveAllView.setVisibility(View.VISIBLE);
+            }
+//CHAOZHUO END
         }
 
         // Animate the SystemUI scrims into view
@@ -358,6 +384,22 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
         mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE |
                 View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN |
                 View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mRemoveAllView = findViewById(R.id.remove_all_center);
+        mRemoveAllView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (mRecentsView != null) {
+                    mRecentsView.removeAllTasks();
+                }
+                if (mRemoveAllView != null) {
+                    mRemoveAllView.setVisibility(View.GONE);
+                }
+            }
+        });
+        }
+//CHAOZHUO END
         mEmptyViewStub = (ViewStub) findViewById(R.id.empty_view_stub);
         mDebugOverlayStub = (ViewStub) findViewById(R.id.debug_overlay_stub);
         mScrimViews = new SystemBarScrimViews(this, mConfig);
@@ -642,6 +684,19 @@ public class RecentsActivity extends Activity implements RecentsView.RecentsView
         mAfterPauseRunnable = r;
     }
 
+//CHAOZHUO START
+    @Override
+    public void hideRecentsActivity() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            ReferenceCountedTrigger exitTrigger = new ReferenceCountedTrigger(this,
+                    null, mFinishRunnable, null);
+            mRecentsView.startExitToHomeAnimation(
+                    new ViewAnimation.TaskViewExitContext(exitTrigger));
+            // dismissRecentsToFocusedTaskOrHome(true);
+        }
+    }
+//CHAOZHUO END
+
     /**** RecentsAppWidgetHost.RecentsAppWidgetHostCallbacks Implementation ****/
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/recents/views/RecentsView.java b/packages/SystemUI/src/com/android/systemui/recents/views/RecentsView.java
index 947c19c..07ad38a 100644
--- a/packages/SystemUI/src/com/android/systemui/recents/views/RecentsView.java
+++ b/packages/SystemUI/src/com/android/systemui/recents/views/RecentsView.java
@@ -39,6 +39,9 @@ import android.widget.FrameLayout;
 
 import com.android.internal.logging.MetricsLogger;
 import com.android.systemui.R;
+//CHAOZHUO START
+import com.android.systemui.statusbar.DismissView;
+//CHAOZHUO END
 import com.android.systemui.recents.Constants;
 import com.android.systemui.recents.RecentsAppWidgetHostView;
 import com.android.systemui.recents.RecentsConfiguration;
@@ -48,6 +51,10 @@ import com.android.systemui.recents.model.RecentsTaskLoader;
 import com.android.systemui.recents.model.Task;
 import com.android.systemui.recents.model.TaskStack;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -69,6 +76,10 @@ public class RecentsView extends FrameLayout implements TaskStackView.TaskStackV
         public void onScreenPinningRequest();
         public void onTaskResize(Task t);
         public void runAfterPause(Runnable r);
+
+//CHAOZHUO START
+        public void hideRecentsActivity();
+//CHAOZHUO END
     }
 
     RecentsConfiguration mConfig;
@@ -152,7 +163,19 @@ public class RecentsView extends FrameLayout implements TaskStackView.TaskStackV
         // Trigger a new layout
         requestLayout();
     }
-
+//CHAOZHUO START
+    public void removeAllTasks() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        List<TaskStackView> stackViews = getTaskStackViews();
+        int stackCount = stackViews.size();
+        for (int i = 0; i < stackCount; i++) {
+            TaskStackView stackView = stackViews.get(i);
+            TaskStack stack = stackView.getStack();
+            stack.removeAllTasks();
+        }
+        }
+    }
+//CHAOZHUO END
     /** Gets the list of task views */
     List<TaskStackView> getTaskStackViews() {
         return mTaskStackViews;
@@ -577,12 +600,26 @@ public class RecentsView extends FrameLayout implements TaskStackView.TaskStackV
                 if (task.isActive) {
                     // Bring an active task to the foreground
                     ssp.moveTaskToFront(task.key.id, launchOpts);
+                    //CHAOZHUO START
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                        if (mCb != null) {
+                            mCb.hideRecentsActivity();
+                        }
+                    }
+                    //CHAOZHUO END
                 } else {
                     if (ssp.startActivityFromRecents(getContext(), task.key.id,
                             task.activityLabel, launchOpts)) {
                         if (launchOpts == null && lockToTask) {
                             mCb.onScreenPinningRequest();
                         }
+                        //CHAOZHUO START
+                        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                            if (mCb != null) {
+                                mCb.hideRecentsActivity();
+                            }
+                        }
+                        //CHAOZHUO END
                     } else {
                         // Dismiss the task and return the user to home if we fail to
                         // launch the task
diff --git a/packages/SystemUI/src/com/android/systemui/recents/views/TaskStackView.java b/packages/SystemUI/src/com/android/systemui/recents/views/TaskStackView.java
index 0068f84..d567d52 100644
--- a/packages/SystemUI/src/com/android/systemui/recents/views/TaskStackView.java
+++ b/packages/SystemUI/src/com/android/systemui/recents/views/TaskStackView.java
@@ -43,6 +43,10 @@ import com.android.systemui.recents.model.Task;
 import com.android.systemui.recents.model.TaskStack;
 import com.android.systemui.statusbar.DismissView;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -1181,7 +1185,23 @@ public class TaskStackView extends FrameLayout implements TaskStack.TaskStackCal
         // Announce for accessibility
         String msg = getContext().getString(R.string.accessibility_recents_all_items_dismissed);
         announceForAccessibility(msg);
-
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Runnable postAnimationRunnable = new Runnable() {
+            public void run() {
+                mCb.onAllTaskViewsDismissed(removedTasks);
+            }
+        };
+        resetFocusedTask();
+        List<TaskView> taskViews = getTaskViews();
+        int taskViewCount = taskViews.size();
+        int count = 0;
+        for (int i = taskViewCount - 1; i >= 0; i--) {
+            TaskView tv = taskViews.get(i);
+            tv.startDeleteTaskAnimation(i > 0 ? null : postAnimationRunnable, count * 50);
+            count++;
+        }
+        } else {
         startDismissAllAnimation(new Runnable() {
             @Override
             public void run() {
@@ -1189,6 +1209,8 @@ public class TaskStackView extends FrameLayout implements TaskStack.TaskStackCal
                 mCb.onAllTaskViewsDismissed(removedTasks);
             }
         });
+        }
+//CHAOZHUO END
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 9ff86eb..a8b789a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -31,6 +31,9 @@ import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+//CHAOZHUO START
+import android.content.pm.ActivityInfo;
+//CHAOZHUO END
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
@@ -39,6 +42,9 @@ import android.content.pm.UserInfo;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.database.ContentObserver;
+//CHAOZHUO START
+import android.graphics.Color;
+//CHAOZHUO END
 import android.graphics.PorterDuff;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.Icon;
@@ -105,6 +111,10 @@ import com.android.systemui.statusbar.policy.HeadsUpManager;
 import com.android.systemui.statusbar.policy.PreviewInflater;
 import com.android.systemui.statusbar.stack.NotificationStackScrollLayout;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -1162,6 +1172,27 @@ public abstract class BaseStatusBar extends SystemUI implements
     public void onVisibilityChanged(boolean visible) {
         // Do nothing
     }
+//CHAOZHUO START
+    @Override
+    public void dragMoveActivityState(int state) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        View v = mNavigationBarView.getRemoveWindowTip();
+        switch (state) {
+            case ActivityInfo.ACTIVITY_DRAG_MOVE_START:
+                v.setVisibility(View.VISIBLE);
+                v.setBackgroundColor(Color.DKGRAY);
+                break;
+            case ActivityInfo.ACTIVITY_DRAG_MOVE_CLOSE:
+                v.setVisibility(View.VISIBLE);
+                v.setBackgroundColor(Color.RED);
+                break;
+            default:
+                v.setVisibility(View.GONE);
+                break;
+        }
+        }
+    }
+//CHAOZHUO END
 
     /**
      * If there is an active heads-up notification and it has a fullscreen intent, fire it now.
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
index 897f5e5..006b5fd 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
@@ -20,8 +20,15 @@ import android.os.Bundle;
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.Message;
+//CHAOZHUO START
+import android.os.RemoteException;
+//CHAOZHUO END
 import android.util.Pair;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import com.android.internal.statusbar.IStatusBar;
 import com.android.internal.statusbar.StatusBarIcon;
 import com.android.internal.statusbar.StatusBarIconList;
@@ -65,6 +72,9 @@ public class CommandQueue extends IStatusBar.Stub {
     private static final int MSG_ASSIST_DISCLOSURE          = 22 << MSG_SHIFT;
     private static final int MSG_START_ASSIST               = 23 << MSG_SHIFT;
     private static final int MSG_CAMERA_LAUNCH_GESTURE      = 24 << MSG_SHIFT;
+//CHAOZHUO START
+    private static final int MSG_DRAG_MOVE_ACTIVITY_STATE   = 105 << MSG_SHIFT;
+//CHAOZHUO END
 
     public static final int FLAG_EXCLUDE_NONE = 0;
     public static final int FLAG_EXCLUDE_SEARCH_PANEL = 1 << 0;
@@ -111,6 +121,9 @@ public class CommandQueue extends IStatusBar.Stub {
         public void showAssistDisclosure();
         public void startAssist(Bundle args);
         public void onCameraLaunchGestureDetected(int source);
+//CHAOZHUO START
+        public void dragMoveActivityState(int state);
+//CHAOZHUO END
     }
 
     public CommandQueue(Callbacks callbacks, StatusBarIconList list) {
@@ -302,7 +315,16 @@ public class CommandQueue extends IStatusBar.Stub {
             mHandler.obtainMessage(MSG_CAMERA_LAUNCH_GESTURE, source, 0).sendToTarget();
         }
     }
-
+//CHAOZHUO START
+    public void dragMoveActivityState(int state) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized (mList) {
+            mHandler.removeMessages(MSG_DRAG_MOVE_ACTIVITY_STATE);
+            mHandler.obtainMessage(MSG_DRAG_MOVE_ACTIVITY_STATE, state, 0, null).sendToTarget();
+        }
+        }
+    }
+//CHAOZHUO END
     private final class H extends Handler {
         public void handleMessage(Message msg) {
             final int what = msg.what & MSG_MASK;
@@ -404,6 +426,13 @@ public class CommandQueue extends IStatusBar.Stub {
                 case MSG_CAMERA_LAUNCH_GESTURE:
                     mCallbacks.onCameraLaunchGestureDetected(msg.arg1);
                     break;
+//CHAOZHUO START
+                case MSG_DRAG_MOVE_ACTIVITY_STATE:
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    mCallbacks.dragMoveActivityState(msg.arg1);
+                    }
+                    break;
+//CHAOZHUO END
             }
         }
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/AppIcon.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/AppIcon.java
new file mode 100644
index 0000000..d6c2d1e
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/AppIcon.java
@@ -0,0 +1,322 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import com.android.systemui.R;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnHoverListener;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.view.animation.Animation.AnimationListener;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AppIcon extends FrameLayout implements OnHoverListener {
+    private static final String TAG = "AppIcon";
+
+    // Enumeration of icon status
+    enum Status {
+        APP_UNOPEN, APP_OPEN_FOCUSED, APP_OPEN_UNFOCUSED
+    }
+
+    private static final int STATUS_FLAG_APP_OPEN = 0x00000001;
+    private static final int STATUS_FLAG_APP_FOCUSED = 0x00000010;
+    private static final int STATUS_FLAG_APP_HOVERED = 0x00000100;
+    private static final int STATUS_FLAG_TASK_LOADING = 0x10000000;
+
+    public ImageView mAppIconView;
+    private ImageView mAnchorView;
+    private ImageView mTaskLoadingView;
+
+    public String mPackageName;
+    public String mAppLaunchActivityName;
+    public CharSequence mLabelName;
+
+    ArrayList<TaskDescription> mTaskList = new ArrayList<TaskDescription>();
+    List<Integer> mLoadingTaskIdList = new ArrayList<Integer>();
+
+    private int mStatus = 0;
+    private int mPos = 0;
+    public boolean mIsPinedApp = false;
+    public boolean mIsCanPin = true;
+
+    private Handler mHandler = new Handler();
+    private Runnable mStopLoadingAnimationRunnable = new Runnable() {
+        @Override
+        public void run() {
+            stopTaskLoadingAnimation();
+        }
+    };
+
+    public AppIcon(Context context) {
+        super(context);
+        initUIComponents(context);
+    }
+
+    public AppIcon(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initUIComponents(context);
+    }
+
+    private void initUIComponents(Context context) {
+        LayoutInflater.from(context).inflate(R.layout.app_icon, this);
+        mAppIconView = (ImageView) findViewById(R.id.app_icon);
+        mAnchorView = (ImageView) findViewById(R.id.anchor);
+        mTaskLoadingView = (ImageView) findViewById(R.id.task_loading);
+        this.setOnHoverListener(this);
+    }
+
+    public void setPackageName(String name) {
+        mPackageName = name;
+        this.setTag(mPackageName);
+    }
+
+    public void setImageIcon(Drawable drawable) {
+        mAppIconView.setBackground(drawable);
+    }
+
+    public void setFocus(boolean focus) {
+        if (focus) {
+            // A appicon can not gain focus unless it has a running task...
+            setStatus(Status.APP_OPEN_FOCUSED);
+        } else {
+            if (mTaskList.size() != 0) {
+                setStatus(Status.APP_OPEN_UNFOCUSED);
+            } else {
+                setStatus(Status.APP_UNOPEN);
+            }
+        }
+    }
+
+    private void setStatus(Status status) {
+        switch (status) {
+            case APP_UNOPEN:
+                mStatus &= ~STATUS_FLAG_APP_OPEN;
+
+                // Unopened app icon can not be focused? True for now...
+                mStatus &= ~STATUS_FLAG_APP_FOCUSED;
+                break;
+
+            case APP_OPEN_UNFOCUSED:
+                mStatus |= STATUS_FLAG_APP_OPEN;
+                mStatus &= ~STATUS_FLAG_APP_FOCUSED;
+                break;
+
+            case APP_OPEN_FOCUSED:
+                mStatus |= STATUS_FLAG_APP_OPEN;
+                mStatus |= STATUS_FLAG_APP_FOCUSED;
+                break;
+        }
+
+        updateAnchorViewStatus();
+    }
+
+    private void updateAnchorViewStatus() {
+        final int status = mStatus;
+        if ((status & STATUS_FLAG_TASK_LOADING) != 0) {
+            mAnchorView.setImageResource(R.drawable.dot_normal);
+            mAnchorView.setBackground(null);
+        } else {
+            if ((status & STATUS_FLAG_APP_OPEN) != 0) {
+                if ((status & STATUS_FLAG_APP_FOCUSED) != 0) {
+                    mAnchorView.setImageResource(R.drawable.dot_focus);
+                } else {
+                    mAnchorView.setImageResource(R.drawable.dot_normal);
+                }
+            } else {
+                mAnchorView.setImageDrawable(null);
+            }
+
+            if ((status & STATUS_FLAG_APP_HOVERED) != 0) {
+                mAnchorView.setBackgroundResource(R.drawable.dot_hover);
+            } else {
+                mAnchorView.setBackground(null);
+            }
+        }
+    }
+
+    public boolean isTaskIdCurrent(int taskId) {
+        for (TaskDescription des : mTaskList) {
+            if (des != null && des.taskId == taskId) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void setPos(int pos) {
+        mPos = pos;
+    }
+
+    public int getPos() {
+        return mPos;
+    }
+
+    public boolean addTask(TaskDescription task) {
+        if (mTaskList.contains(task)) {
+            return false;
+        }
+
+        for (TaskDescription t : mTaskList) {
+            if (t.taskId == task.taskId) {
+                if (DockEnv.DEBUG) {
+                    Log.e(TAG, "add Task conflict taskId:" + String.valueOf(t.taskId));
+                }
+                return false;
+            }
+        }
+        mTaskList.add(task);
+        setStatus(Status.APP_OPEN_UNFOCUSED);
+        return true;
+    }
+
+    public void startTaskLoading(int taskId) {
+        if (taskId < 0) {
+            return;
+        }
+
+        synchronized (mLoadingTaskIdList) {
+            if (mLoadingTaskIdList.size() == 0) {
+                startTaskLoadingAnimation();
+            } else if (mLoadingTaskIdList.contains(taskId)) {
+                return;
+            }
+
+            mLoadingTaskIdList.add(taskId);
+            mHandler.removeCallbacks(mStopLoadingAnimationRunnable);
+
+            // The loading animation should be stopped in 10 seconds anyway.
+            mHandler.postDelayed(mStopLoadingAnimationRunnable, 10 * 1000);
+        }
+    }
+
+    public void stopTaskLoading(int taskId) {
+        if (taskId < 0) {
+            return;
+        }
+
+        synchronized (mLoadingTaskIdList) {
+            if (mLoadingTaskIdList != null && mLoadingTaskIdList.remove(new Integer(taskId)) && mLoadingTaskIdList.size() <= 0) {
+                stopTaskLoadingAnimation();
+            }
+        }
+    }
+
+    private void startTaskLoadingAnimation() {
+        if (DockEnv.DEBUG) {
+            Log.d(TAG, "startTaskLoadingAnimation: " + mPackageName);
+        }
+
+        mStatus |= STATUS_FLAG_TASK_LOADING;
+        updateAnchorViewStatus();
+
+        mTaskLoadingView.clearAnimation();
+        final Animation taskLoadingAnim = new AlphaAnimation(0.0f, 1.0f);
+        taskLoadingAnim.setDuration(800);
+        taskLoadingAnim.setRepeatCount(Animation.INFINITE);
+        taskLoadingAnim.setRepeatMode(Animation.REVERSE);
+        taskLoadingAnim.setAnimationListener(new AnimationListener() {
+            int repeatedCount = 0;
+
+            @Override
+            public void onAnimationStart(Animation animation) {
+            }
+
+            @Override
+            public void onAnimationRepeat(Animation animation) {
+                synchronized (mLoadingTaskIdList) {
+                    repeatedCount++;
+                    if (mLoadingTaskIdList.size() == 0) {
+                        final int status = mStatus;
+
+                        /**
+                         * The animation should stop when there's no loading
+                         * tasks, and the visual state is close to what it's
+                         * supposed to be like when the animation is gone.
+                         */
+                        if ((repeatedCount % 2 == 1 && (status & STATUS_FLAG_APP_FOCUSED) != 0)
+                                || (repeatedCount % 2 == 0 && (status & STATUS_FLAG_APP_FOCUSED) == 0)) {
+                            mTaskLoadingView.clearAnimation();
+                            mTaskLoadingView.setVisibility(View.GONE);
+                            mStatus &= ~STATUS_FLAG_TASK_LOADING;
+                            updateAnchorViewStatus();
+                        }
+                    }
+                }
+            }
+
+            @Override
+            public void onAnimationEnd(Animation animation) {
+            }
+        });
+
+        mTaskLoadingView.setVisibility(View.VISIBLE);
+        mTaskLoadingView.startAnimation(taskLoadingAnim);
+    }
+
+    private void stopTaskLoadingAnimation() {
+        synchronized (mLoadingTaskIdList) {
+            mHandler.removeCallbacks(mStopLoadingAnimationRunnable);
+            mLoadingTaskIdList.clear();
+
+            if (DockEnv.DEBUG) {
+                Log.d(TAG, "stopTaskLoadingAnimation: " + mPackageName);
+            }
+        }
+    }
+
+    public int getTaskCount() {
+        return mTaskList.size();
+    }
+
+    ArrayList<TaskDescription> getTaskList() {
+        return mTaskList;
+    }
+
+    public void removeAllTask() {
+        mTaskList.clear();
+        setStatus(Status.APP_UNOPEN);
+    }
+
+    void removeTask(int taskId) {
+        mLoadingTaskIdList.remove(new Integer(taskId));
+
+        for (TaskDescription task : mTaskList) {
+            if (task.taskId == taskId) {
+                mTaskList.remove(task);
+                if (mTaskList.size() == 0) {
+                    // No task, no focus...
+                    setStatus(Status.APP_UNOPEN);
+                }
+                return;
+            }
+        }
+        if (DockEnv.DEBUG)
+            Log.e(TAG, "removeTask ERROR taskId:" + String.valueOf(taskId) + mTaskList.toString());
+    }
+
+    @Override
+    public boolean onHover(View v, MotionEvent event) {
+        AppIcon icon = (AppIcon) v;
+        if (event.getAction() == MotionEvent.ACTION_HOVER_ENTER) {
+            mStatus |= STATUS_FLAG_APP_HOVERED;
+            updateAnchorViewStatus();
+        } else if (event.getAction() == MotionEvent.ACTION_HOVER_EXIT) {
+            mStatus &= ~STATUS_FLAG_APP_HOVERED;
+            updateAnchorViewStatus();
+        }
+        return false;
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/AppPanel.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/AppPanel.java
new file mode 100644
index 0000000..7df281c
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/AppPanel.java
@@ -0,0 +1,859 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import com.android.systemui.statusbar.startup.mouse.MouseTouchDelegate;
+import com.android.systemui.statusbar.startup.mouse.MouseViewDelegate;
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.RecentTaskInfo;
+import android.app.ActivityManagerNative;
+import android.app.TaskStateListener;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.os.UserHandle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.InputDevice;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+
+public class AppPanel extends LinearLayout implements ContextMenuWindow.OnMenuListener,
+        TaskListPanel.OnTaskListWindowListener {
+
+    public static final String ACTION_ADD_TO_DOCK = "action_add_to_dock";
+    public static final String INTENT_EXTRA_PKG_NAME = "pkg_name";
+
+    private static final String TAG = "AppPanel";
+    private Context mContext;
+    private int mIndex;
+
+    private Dock mDock;
+    private DragAppPanel mDragAppPanel;
+
+    private int mCurrentFocusTask = -1;
+    private boolean mAttached = false;
+    private Locale mLocale;
+    private long mLastScroolTime = 0;
+    private static final long PAGER_SCROLL_INTERVEL = 300L;
+    public boolean mIsFouceLauncher = true;  //焦点是否在桌面
+
+    public AppPanel(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mContext = context;
+
+        ArrayList<String> pinedApp = PinedAppSettings.getInstance(mContext).loadPinedApp();
+
+        List<ResolveInfo> apps = Apps.getInstance(context).getAppsResolveInfo();
+
+        for (String packageName : pinedApp) {
+            addPinedAppIcon(packageName, apps);
+        }
+
+
+        final IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_PACKAGE_ADDED);
+        filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
+        filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
+        filter.addAction(Intent.ACTION_PACKAGE_REPLACED);
+        filter.setPriority(0x7fffffff);
+        filter.addDataScheme("package");
+        mContext.registerReceiver(mPackageChangeReceiver, filter);
+
+        setOnGenericMotionListener(new OnGenericMotionListener() {
+            @Override
+            public boolean onGenericMotion(View v, MotionEvent event) {
+                if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0
+                        && event.getAction() == MotionEvent.ACTION_SCROLL) {
+                    final Long currentTime = System.currentTimeMillis();
+                    if (currentTime - mLastScroolTime > PAGER_SCROLL_INTERVEL) {
+                        final float vscroll = event
+                                .getAxisValue(MotionEvent.AXIS_VSCROLL);
+                        if (vscroll > 0) {  //scroll left
+                            mDock.scrollLeft();
+                        } else {
+                            mDock.scrollRight();
+                        }
+                        mLastScroolTime = currentTime;
+                    }
+                }
+                return false;
+            }
+        });
+    }
+
+    /******************* CHAOZHUO added by chenyaohuang BEGIN *******************/
+    //CHAOZHUO chenyaohuang  当SystemUI崩溃的时候，重新遍历原有的已经打开的程序
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        try {
+            List<ActivityManager.RecentTaskInfo> mCurrentTaskList = ActivityManagerNative.getDefault().getRecentRunningTasks(20);
+            for (RecentTaskInfo info: mCurrentTaskList) {
+                ResolveInfo resolve = getResolveInfo(info);
+                TaskDescription item = createTaskDescription(info.id,
+                        info.persistentId, info.stackId, info.baseIntent,
+                        info.origActivity, info.description);
+                addTask(item, resolve.activityInfo.packageName);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        if (!mAttached) {
+            mAttached = true;
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
+            getContext().registerReceiver(mLanguageReceiver, filter);
+        }
+    }
+    /******************* CHAOZHUO added by chenyaohuang END *******************/
+
+    @Override
+    protected void onDetachedFromWindow() {
+        try {
+            mContext.unregisterReceiver(mPackageChangeReceiver);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        super.onDetachedFromWindow();
+        if (mAttached) {
+            getContext().unregisterReceiver(mLanguageReceiver);
+            mAttached = false;
+        }
+    }
+
+
+    /******************* CHAOZHUO added by chenyaohuang BEGIN *******************/
+    //修改系统语言后，收到广播，修改appicon的labelName
+    private final BroadcastReceiver mLanguageReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
+                final Locale newLocale = getResources().getConfiguration().locale;
+                if (!newLocale.equals(mLocale)) {
+                    mLocale = newLocale;
+                    final List<ResolveInfo> apps = Apps.getInstance(context).getAppsResolveInfo();
+                    final int count = getChildCount();
+                    post(new Runnable() {
+                        @Override
+                        public void run() {
+                            for (int i = 0; i < count; i++) {
+                                View child = getChildAt(i);
+                                if (child instanceof AppIcon) {
+                                    AppIcon appIcon = (AppIcon) child;
+                                    for (ResolveInfo info : apps) {
+                                        if (info.activityInfo.packageName.equals(appIcon.mPackageName)) {
+                                            appIcon.mLabelName = info.loadLabel(mContext
+                                                    .getPackageManager());
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    });
+                }
+            }
+        }
+    };
+    /******************* CHAOZHUO added by chenyaohuang END *******************/
+
+    public void setDock(Dock dock) {
+        mDock = dock;
+    }
+
+    public void setDragAppPanel(DragAppPanel dragAppPanel) {
+        mDragAppPanel = dragAppPanel;
+    }
+
+    private AppIcon addPinedAppIcon(String packageName, List<ResolveInfo> infoList) {
+        AppIcon icon = null;
+        for (ResolveInfo info : infoList) {
+            if (info.activityInfo.packageName.equals(packageName)) {
+                icon = addAppTaskIcon(info, true);
+                return icon;
+            }
+        }
+        return icon;
+    }
+
+    private AppIcon addAppTaskIcon(ResolveInfo info, boolean isPined) {
+        AppIcon icon = new AppIcon(mContext);
+        final int iconDensity = getIconDensity(mContext);
+        icon.setImageIcon(info.activityInfo.loadIcon(mContext.getPackageManager()));
+        icon.setPackageName(info.activityInfo.packageName);
+        icon.mAppLaunchActivityName = info.activityInfo.name;
+        icon.mLabelName = info.loadLabel(mContext.getPackageManager());
+
+        MouseViewDelegate delegate = new MouseViewDelegate(mContext, icon, true);
+        delegate.init(mTouchDelegate);
+
+        // we'd like to take back the control of hover events here
+        icon.setOnHoverListener(icon);
+        icon.setPos(mIndex);
+        icon.mIsPinedApp = isPined;
+        mIndex = mIndex + 1;
+        this.addView(icon, new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT));
+        if (!isPined) {
+            mDock.scrollFocusOnView(icon);
+        }
+        return icon;
+    }
+
+    private boolean addTask(TaskDescription task, String packageName) {
+        return addTask(task, packageName, false);
+    }
+
+    private boolean addTask(TaskDescription task, String packageName, boolean newTask) {
+        int childCount = this.getChildCount();
+        for (int index = 0; index < childCount; index++) {
+            AppIcon childIcon = (AppIcon) this.getChildAt(index);
+            if (childIcon.mPackageName.equals(packageName)) {
+                if(childIcon.addTask(task) && newTask) {
+                    childIcon.startTaskLoading(task.taskId);
+                }
+                return false;
+            }
+        }
+
+        List<ResolveInfo> installApps = loadApps();
+        ResolveInfo resolveInfo = task.resolveInfo;;
+        boolean isCanPin = false;
+        for (ResolveInfo info : installApps) {
+            if (info.activityInfo.packageName.equalsIgnoreCase(packageName)) {
+                resolveInfo = info;
+                isCanPin = true;
+                break;
+            }
+        }
+        if (resolveInfo == null) {
+            return false;
+        }
+        AppIcon icon = addAppTaskIcon(resolveInfo, false);
+        icon.mIsCanPin = isCanPin;
+        icon.addTask(task);
+
+        if(newTask) {
+            icon.startTaskLoading(task.taskId);
+        }
+
+        return true;
+    }
+
+    private boolean removeTask(TaskDescription task) {
+        int childCount = this.getChildCount();
+        for (int index = 0; index < childCount; index++) {
+            AppIcon icon = (AppIcon) this.getChildAt(index);
+            if (icon.mPackageName
+                    .equals(task.resolveInfo.activityInfo.packageName)) {
+                if (DockEnv.DEBUG) {
+                    Log.d(TAG,
+                            "removeTaskIcon:" + icon.mPackageName
+                                    + String.valueOf(task.taskId));
+                }
+                icon.removeTask(task.taskId);
+                if (icon.getTaskCount() == 0) {
+
+                    //如果是超卓文件管理器app，就不杀死所有进程
+                    boolean isKillAll = !icon.mPackageName.equals("com.chaozhuo.filemanager")
+                            && !icon.mPackageName.equals("com.chaozhuo.setupwizard")
+                            && !icon.mPackageName.equals("android");
+
+                    if (icon.mIsPinedApp) {
+                        icon.removeAllTask();
+                        return false;
+                    } else {
+                        mIndex = mIndex - 1;
+                        this.removeView(icon);
+                        return true;
+                    }
+
+                }
+
+            }
+        }
+        return false;
+    }
+
+    TaskListPanel mTaskListPanel = null;
+
+    TaskDescription createTaskDescription(int taskId, int persistentTaskId, int stackId,
+            Intent baseIntent,
+            ComponentName origActivity, CharSequence description) {
+        Intent intent = new Intent(baseIntent);
+        if (origActivity != null) {
+            intent.setComponent(origActivity);
+        }
+        final PackageManager pm = mContext.getPackageManager();
+        intent.setFlags((intent.getFlags() & ~Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)
+                | Intent.FLAG_ACTIVITY_NEW_TASK);
+        final ResolveInfo resolveInfo = pm.resolveActivity(intent, 0);
+        if (resolveInfo != null) {
+            final ActivityInfo info = resolveInfo.activityInfo;
+            final String title = info.loadLabel(pm).toString();
+
+            if (title != null && title.length() > 0) {
+                TaskDescription item = new TaskDescription(taskId,
+                        persistentTaskId, stackId, resolveInfo, baseIntent, info.packageName,
+                        description);
+                item.setLabel(title);
+
+                return item;
+            }
+        }
+        return null;
+    }
+
+    private ContextMenuWindow mWindow;
+    private void showRightClickMenu(View v) {
+        disMissAllMenu();
+        AppIcon icon = (AppIcon) v;
+
+        mWindow = new ContextMenuWindow(v.getContext(), icon);
+        mWindow.setTag(icon);
+        mWindow.setOnMenuListener(this);
+        mWindow.setOnMenuItemClickListener(mListener);
+        mWindow.showAtView(icon.mAppIconView);
+    }
+
+    public void hideRightContextClickMenu(View v) {
+        if (mWindow != null) {
+            mWindow.disMiss();
+            mWindow = null;
+        }
+        mDock.disMissReccentTaskDialog();
+    }
+
+    private void storePinedAppSettings() {
+        ArrayList<String> pinedApp = new ArrayList<String>();
+        int count = AppPanel.this.getChildCount();
+        for (int i = 0; i < count; i++) {
+            AppIcon icon = (AppIcon) AppPanel.this.getChildAt(i);
+            if (icon.mIsPinedApp) {
+                pinedApp.add(icon.mPackageName);
+            }
+        }
+        PinedAppSettings.getInstance(mContext).storePinedApp(pinedApp);
+    }
+
+    ContextMenuWindow.OnMenuItemClickListener mListener = new ContextMenuWindow.OnMenuItemClickListener() {
+
+        @Override
+        public void onLockUnlockClick(AppIcon appIcon) {
+            if (appIcon.mIsPinedApp) {
+                appIcon.mIsPinedApp = false;
+                if (appIcon.getTaskCount() == 0) {
+                    AppPanel.this.removeView(appIcon);
+                }
+            } else {
+                appIcon.mIsPinedApp = true;
+            }
+            storePinedAppSettings();
+        }
+
+        @Override
+        public void onExitClick(AppIcon appIcon) {
+            ArrayList<TaskDescription> tasks = appIcon.getTaskList();
+            if (tasks.size() == 0) {
+                return;
+            }
+            for (TaskDescription task : tasks) {
+                try {
+                    ActivityManagerNative.getDefault().removeTask(task.taskId);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+
+            appIcon.getTaskList().clear();
+        }
+
+        @Override
+        public void onAppToVerticalClick(AppIcon appIcon) {
+        }
+
+        @Override
+        public void onApplyTabletClick(AppIcon appIcon) {
+        }
+
+        @Override
+        public void onTitleClick(AppIcon appIcon) {
+            int taskCount = appIcon.getTaskCount();
+            if (taskCount == 0) {
+                ComponentName componet = new ComponentName(appIcon.mPackageName,
+                        appIcon.mAppLaunchActivityName);
+
+                Intent intent = new Intent();
+                intent.setComponent(componet);
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                appIcon.getContext().startActivity(intent);
+            } else {
+                /******************* CHAOZHUO added by chenyaohuang BEGIN *******************/
+                //如果app已经打开过了，
+                int taskId = appIcon.getTaskList().get(0).taskId;
+                // if been current focus then minimize
+                // else brought to front
+                try {
+                    ActivityManagerNative.getDefault().moveTaskToFront(taskId, 0, null);
+                } catch (Exception e) {
+                }
+                disMissTaskListPanel();
+                /******************* CHAOZHUO added by chenyaohuang END *******************/
+            }
+
+        }
+    };
+
+    TaskStateListener listener = new TaskStateListener() {
+        @Override
+        public void onTaskCreate(ActivityManager.RecentTaskInfo info) {
+
+            if (info.stackId == 0) {
+                return;
+            }
+            try {
+                ResolveInfo resolve = getResolveInfo(info);
+                if (resolve != null) {
+                    TaskDescription item = createTaskDescription(info.id,
+                            info.persistentId, info.stackId, info.baseIntent,
+                            info.origActivity, info.description);
+                    addTask(item, resolve.activityInfo.packageName, true);
+                    if (DockEnv.DEBUG) {
+                        Log.i(TAG,
+                                "onTaskCreate:" + item.intent.getComponent().getClassName()
+                                        + String.valueOf(info.id));
+                    }
+                }
+            } catch (Exception e) {
+                Log.e(TAG, "", e);
+            }
+        }
+
+        @Override
+        public void onTaskClose(ActivityManager.RecentTaskInfo info) {
+            try {
+                TaskDescription item = createTaskDescription(info.id,
+                        info.persistentId, info.stackId, info.baseIntent,
+                        info.origActivity, info.description);
+                removeTask(item);
+                if (DockEnv.DEBUG) {
+                    Log.i(TAG,
+                            "OnTaskClose " + item.intent.getComponent().getClassName()
+                                    + ", " + String.valueOf(info.id));
+                }
+            } catch (Exception e) {
+
+            }
+        }
+
+        @Override
+        public void onTaskFocuseChange(ActivityManager.RecentTaskInfo info) {
+            TaskDescription item = createTaskDescription(info.id,
+                    info.persistentId, info.stackId, info.baseIntent,
+                    info.origActivity, info.description);
+            if (DockEnv.DEBUG) {
+                if (item != null) {
+                    if (DockEnv.DEBUG) {
+                        Log.i(TAG, "onTaskFocuseChange " + item.intent.getComponent().getClassName()
+                                + ": " + String.valueOf(info.id));
+                    }
+                } else {
+                    if (DockEnv.DEBUG) {
+                        Log.i(TAG, "onTaskFocuseChange null TaskDescription " + ": " + String.valueOf(info.id));
+                    }
+                }
+            }
+            if (item != null
+                    && item.intent != null
+                    && item.intent.getComponent() != null
+                    && TextUtils.equals(item.intent.getComponent().getClassName(),
+                            "com.chaozhuo.launcher.Launcher")) {
+                mIsFouceLauncher = true;
+            } else {
+                mIsFouceLauncher = false;
+            }
+            setCurrentFocus(info.id);
+            mCurrentFocusTask = info.id;
+        }
+
+        @Override
+        public void onTaskMinimized(ActivityManager.RecentTaskInfo info) {
+            android.util.Log.d("TAG", "onTaskMinimized info = " + info);
+
+        }
+
+        public void onTaskProcessStarted(RecentTaskInfo info) {
+            changeTaskLoadingStatus(info, true);
+        };
+
+        public void onTaskActivityWindowVisible(RecentTaskInfo info) {
+            changeTaskLoadingStatus(info, false);
+        };
+    };
+
+    private void changeTaskLoadingStatus(RecentTaskInfo info, boolean isLoading) {
+        try {
+            ResolveInfo resolve = getResolveInfo(info);
+            if (resolve != null) {
+                final String pkgName = resolve.activityInfo.packageName;
+                int childCount = getChildCount();
+                for (int index = 0; index < childCount; index++) {
+                    AppIcon childIcon = (AppIcon) getChildAt(index);
+                    if (childIcon.mPackageName.equals(pkgName)) {
+                        if (isLoading) {
+                            childIcon.startTaskLoading(info.id);
+                        } else {
+                            childIcon.stopTaskLoading(info.id);
+                        }
+                        if (DockEnv.DEBUG) {
+                            Log.i(TAG, "Task loading status changed: " + pkgName + ", " + info.id + ", " + isLoading);
+                        }
+                        return;
+                    }
+                }
+
+                if (DockEnv.DEBUG) {
+                    Log.e(TAG, "Task loading status changed but conrresponding task not found: " + pkgName + ", " + info.id + ", " + isLoading);
+                }
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "", e);
+        }
+    }
+
+    private void setCurrentFocus(int focusTaskId) {
+        int childCount = this.getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            AppIcon app = (AppIcon) this.getChildAt(i);
+            if (app.isTaskIdCurrent(focusTaskId)) {
+                app.setFocus(true);
+            } else if (app.isTaskIdCurrent(mCurrentFocusTask)) {
+                app.setFocus(false);
+            }
+        }
+    }
+
+    private List<ResolveInfo> loadApps() {
+        List<ResolveInfo> apps;
+        Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+        mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
+        new ImageView(mContext);
+
+        apps = mContext.getPackageManager().queryIntentActivities(mainIntent, 0);
+        return apps;
+    }
+
+    private ResolveInfo getResolveInfo(ActivityManager.RecentTaskInfo recentInfo) {
+        Intent intent = new Intent(recentInfo.baseIntent);
+        if (recentInfo.origActivity != null) {
+            intent.setComponent(recentInfo.origActivity);
+        }
+
+        // Don't load the current home activity.
+        if (isCurrentHomeActivity(intent.getComponent(), null)) {
+            return null;
+        }
+
+        // Don't load ourselves
+        if (intent.getComponent().getPackageName().equals(mContext.getPackageName())) {
+            return null;
+        }
+
+        final PackageManager pm = mContext.getPackageManager();
+        intent.setFlags((intent.getFlags() & ~Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)
+                | Intent.FLAG_ACTIVITY_NEW_TASK);
+        ResolveInfo resolveInfo = pm.resolveActivity(intent, 0);
+        return resolveInfo;
+    }
+
+    private boolean isCurrentHomeActivity(ComponentName component, ActivityInfo homeInfo) {
+        if (homeInfo == null) {
+            final PackageManager pm = mContext.getPackageManager();
+            homeInfo = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME)
+                    .resolveActivityInfo(pm, 0);
+        }
+        return homeInfo != null
+                && homeInfo.packageName.equals(component.getPackageName())
+                && homeInfo.name.equals(component.getClassName());
+    }
+
+    @Override
+    public void onMenuClosed(ContextMenuWindow window) {
+        mWindow = null;
+    }
+
+    @Override
+    public void onWindowClosed(TaskListPanel window) {
+        if (mTaskListPanel != null && mTaskListPanel == window) {
+            mTaskListPanel = null;
+        }
+    }
+
+    BroadcastReceiver mPackageChangeReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            /******************* CHAOZHUO added by chenyaohuang BEGIN *******************/
+            // 当app安装，卸载，更新后，重新加载app列表
+            Apps.getInstance(mContext).loadApps();
+            /******************* CHAOZHUO added by chenyaohuang END *******************/
+            final String action = intent.getAction();
+            final String packageName = intent.getData().getSchemeSpecificPart();
+
+            if (DockEnv.DEBUG) {
+                Log.d(TAG, "onReceive: " + action + " - " + packageName);
+            }
+            if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
+                if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) {
+                    handleRemovePackage(packageName);
+                }
+            } else if (Intent.ACTION_PACKAGE_REPLACED.equals(action)) {
+                handlePackageReplaced(packageName);
+            } else if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
+            }
+        }
+    };
+
+    private void handleRemovePackage(String packageName) {
+        int childCount = this.getChildCount();
+        boolean restorePin = false;
+        for (int index = 0; index < childCount; index++) {
+            AppIcon childIcon = (AppIcon) this.getChildAt(index);
+            if (childIcon.mPackageName.equals(packageName)) {
+                if (childIcon.mIsPinedApp) {
+                    childIcon.mIsPinedApp = false;
+                    restorePin = true;
+                }
+                childIcon.removeAllTask();
+                removeViewAt(index);
+                break;
+            }
+        }
+        if (restorePin) {
+            storePinedAppSettings();
+        }
+    }
+    private void handlePackageReplaced(String packageName) {
+        int childCount = this.getChildCount();
+        for (int index = 0; index < childCount; index++) {
+            AppIcon childIcon = (AppIcon) this.getChildAt(index);
+            if (childIcon.mPackageName.equals(packageName)) {
+                childIcon.removeAllTask();
+            }
+        }
+    }
+
+    private BroadcastReceiver mAddToDockReceiver = new BroadcastReceiver() {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String packageName = intent.getStringExtra(INTENT_EXTRA_PKG_NAME);
+            List<ResolveInfo> apps = Apps.getInstance(context).getAppsResolveInfo();
+            boolean duplicate = false;
+            int count = getChildCount();
+            for (int i = 0; i < count; i++) {
+                View child = getChildAt(i);
+                if (child instanceof AppIcon) {
+                    AppIcon appIcon = (AppIcon) child;
+                    if (TextUtils.equals(appIcon.mPackageName, packageName)) {
+                        duplicate = true;
+                        break;
+                    }
+                }
+            }
+            if (!duplicate) {
+                View icon = addPinedAppIcon(packageName, apps);
+                storePinedAppSettings();
+                if (icon != null) {
+                    mDock.scrollFocusOnView(icon);
+                }
+            }
+
+        }
+
+    };
+
+    private MouseTouchDelegate mTouchDelegate = new MouseTouchDelegate() {
+
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY, View v) {
+            if (velocityY > 0) {
+                return false;
+            }
+            mDock.disMissReccentTaskDialog();
+            if (mWindow != null && mWindow.getTag() == v) {
+                disMissAllMenu();
+                return true;
+            }
+            showRightClickMenu(v);
+            return true;
+        };
+
+        @Override
+        public boolean onSingleTapUpMouseRight(MotionEvent e, View v) {
+            mDock.disMissReccentTaskDialog();
+            if (mWindow != null && mWindow.getTag() == v) {
+                disMissAllMenu();
+                return true;
+            }
+            showRightClickMenu(v);
+            return true;
+        }
+
+        @Override
+        public boolean onSingleTapUpMouseLeft(MotionEvent event, View v) {
+            mDock.disMissReccentTaskDialog();
+            mDock.setDisMissArrow();
+            AppIcon icon = (AppIcon) v;
+            int taskCount = icon.getTaskCount();
+            if (taskCount == 0) {
+                disMissAllMenu();
+                ComponentName componet = new ComponentName(icon.mPackageName,
+                        icon.mAppLaunchActivityName);
+
+                Intent intent = new Intent();
+                intent.setComponent(componet);
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                v.getContext().startActivity(intent);
+            } else {
+                List<RecentTaskInfo> recentTasks = null;
+
+                if (taskCount > 1) {
+                    int[] taskList = new int[icon.getTaskCount()];
+                    for (int i = 0; i < icon.getTaskCount(); i++) {
+                        taskList[i] = icon.getTaskList().get(i).taskId;
+                    }
+                    try {
+                        recentTasks = ActivityManagerNative
+                                .getDefault()
+                                .getRecentTasks(
+                                        taskList,
+                                        ActivityManager.RECENT_IGNORE_UNAVAILABLE
+                                                | ActivityManager.RECENT_WITH_EXCLUDED,
+                                        UserHandle.CURRENT.getIdentifier());
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                }
+                if (taskCount == 1 || recentTasks == null
+                        || recentTasks.size() < 2) {
+                    int taskId = icon.getTaskList().get(0).taskId;
+                    if (recentTasks != null && recentTasks.size() == 1) {
+                        taskId = recentTasks.get(0).id;
+                    }
+
+                    if (mTaskListPanel != null || mWindow != null) {
+                        disMissAllMenu();
+                        try {
+                            ActivityManagerNative.getDefault().moveTaskToFront(
+                                    taskId, 0, null);
+                        } catch (Exception e) {
+                        }
+                        return true;
+                    }
+                    // if been current focus then minimize
+                    // else brought to front
+                    if (mCurrentFocusTask == taskId) {
+                        try {
+                            ActivityManagerNative.getDefault().moveTaskBackwards(
+                                    taskId);
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
+                    } else {
+                        try {
+                            ActivityManagerNative.getDefault().moveTaskToFront(
+                                    taskId, 0, null);
+                        } catch (Exception e) {
+                        }
+                    }
+                } else {
+                    if ((mTaskListPanel != null && mTaskListPanel.getTag() == v)
+                            || (mWindow != null && mWindow.getTag() == v)) {
+                        disMissAllMenu();
+                    } else {
+                        if (mTaskListPanel != null || mWindow != null) {
+                            disMissAllMenu();
+                        }
+                        int[] taskList = new int[icon.getTaskCount()];
+                        for (int i = 0; i < icon.getTaskCount(); i++) {
+                            taskList[i] = icon.getTaskList().get(i).taskId;
+                        }
+                        mTaskListPanel = new TaskListPanel(v.getContext(),
+                                taskList, AppPanel.this);
+                        mTaskListPanel.setTag(v);
+                        mTaskListPanel.showAtView(v);
+                    }
+                }
+            }
+            return true;
+        }
+
+        @Override
+        public boolean onSingleTapUp(MotionEvent e, View v) {
+            return onSingleTapUpMouseLeft(e, v);
+        }
+
+        @Override
+        public boolean onMouseLeftDoubleTap(MotionEvent e, View v) {
+            return false;
+        }
+
+        @Override
+        public void onLongPress(final MotionEvent event, final View v) {
+            mDock.setDisMissArrow();
+            disMissAllMenu();
+            mDragAppPanel.init(AppPanel.this);
+            mDragAppPanel.startDrag(event, v);
+            mDragAppPanel.startBigDrag();
+            // 在post中运行，是避免drag被添加到window时，造成menu弹窗消失掉
+            AppPanel.this.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (v instanceof AppIcon) {
+                        if (event.getToolType(0) != MotionEvent.TOOL_TYPE_MOUSE) {
+                            showRightClickMenu(v);
+                        }
+                    }
+                }
+            });
+        }
+
+        @Override
+        public void clearFocus() {
+        }
+    };
+
+    public void disMissTaskListPanel() {
+        if (mTaskListPanel != null) {
+            mTaskListPanel.disMiss();
+            mTaskListPanel = null;
+        }
+        mDock.disMissReccentTaskDialog();
+    }
+
+    public void disMissAllMenu() {
+        disMissTaskListPanel();
+        hideRightContextClickMenu(null);
+    }
+
+    public static int getIconDensity(Context context) {
+        int densityDpi = context.getResources().getDisplayMetrics().densityDpi * 2;
+        if (densityDpi > 480) {
+            densityDpi = 480;
+        }
+        return densityDpi;
+    }
+}
+//CHAOZHUO END
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/Apps.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/Apps.java
new file mode 100644
index 0000000..eebce28
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/Apps.java
@@ -0,0 +1,41 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import java.util.List;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+
+public class Apps {
+    private static Apps sInstance;
+    private Context mContext;
+    private List<ResolveInfo> apps;
+    
+    public static Apps getInstance(Context c) {
+        if (sInstance == null)
+            sInstance = new Apps(c);
+        return sInstance;
+    }
+    
+    private Apps(Context c) {
+        mContext = c;
+        loadApps();
+    }
+
+    public void loadApps() {
+        Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+        mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
+        if (apps != null) {
+            apps.clear();
+            apps = null;
+        }
+        apps = mContext.getPackageManager().queryIntentActivities(mainIntent, 0);
+    }
+
+    public List<ResolveInfo> getAppsResolveInfo() {
+        return apps;
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/ContextMenuWindow.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/ContextMenuWindow.java
new file mode 100644
index 0000000..f68c215
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/ContextMenuWindow.java
@@ -0,0 +1,393 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import com.android.systemui.R;
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.RecentTaskInfo;
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.graphics.PixelFormat;
+import android.os.UserHandle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ScrollView;
+import android.widget.TextView;
+
+import java.util.List;
+
+public class ContextMenuWindow extends LinearLayout implements View.OnClickListener {
+
+    private final static int TAG_ACTION_LOCK_UNLOCK = 0;
+    private final static int TAG_ACTION_TRANSFORM_VERTICAL = 1;
+    private final static int TAG_ACTION_APPLY_TABLET = 2;
+    private final static int TAG_ACTION_EXIT = 3;
+    private final static int TAG_ACTION_TITLE_CLICK = 4;
+
+    protected int[] mItemsDrawId;
+    protected ListView mListView;
+    protected OnMenuItemClickListener mMenuClicklistener;
+
+    private WindowManager mWindowManager;
+
+    private Context mContext;
+
+    private LayoutInflater mInflater;
+
+    private TextView mTitleView;
+    private LinearLayout mItemViews;
+    private String[] mItems;
+    private CharSequence mTitle;
+    private int mX;
+    private int mY;
+
+    private boolean mOnShow = false;
+
+    private View mAncorView;
+    private OnMenuListener mListener;
+
+    AppIcon mAppIcon;
+    private LinearLayout mAppItemViews;
+
+    public ContextMenuWindow(Context context) {
+        super(context);
+        init(context);
+    }
+
+    interface OnMenuListener {
+        public void onMenuClosed(ContextMenuWindow window);
+    }
+
+    public interface OnMenuItemClickListener {
+        public void onLockUnlockClick(AppIcon appIcon);
+
+        public void onExitClick(AppIcon appIcon);
+
+        public void onAppToVerticalClick(AppIcon appIcon);
+
+        public void onApplyTabletClick(AppIcon appIcon);
+
+        public void onTitleClick(AppIcon appIcon);
+    };
+
+    public void setOnMenuItemClickListener(OnMenuItemClickListener listener) {
+        mMenuClicklistener = listener;
+    }
+
+    public ContextMenuWindow(Context context, AppIcon icon) {
+        super(context);
+        mAppIcon = icon;
+        mTitle = icon.mLabelName;
+        init(context);
+    }
+
+    private void init(Context context) {
+        mContext = context;
+        LinearLayout.LayoutParams params =
+                new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
+                        LinearLayout.LayoutParams.WRAP_CONTENT);
+        params.bottomMargin = 10;
+        this.setLayoutParams(params);
+        this.setOrientation(LinearLayout.VERTICAL);
+        this.setBackground(mContext.getResources().getDrawable(R.drawable.dock_context_menu_bk));
+        if (mWindowManager == null) {
+            mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        }
+
+        mInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+        mItemViews = new LinearLayout(mContext);
+        mItemViews.setLayoutParams(params);
+        mItemViews.setOrientation(LinearLayout.VERTICAL);
+        this.addView(mItemViews);
+
+        if (!addScrollAppItem()) {
+            View headerView = mInflater.inflate(R.layout.context_menu_title, null);
+            mTitleView = (TextView) headerView.findViewById(R.id.menu_item);
+            mTitleView.setText(mTitle);
+            mTitleView.setTag(TAG_ACTION_TITLE_CLICK);
+            mTitleView.setOnClickListener(this);
+            mItemViews.addView(headerView);
+            addLine();
+        }
+
+        int appIconTaskCount = mAppIcon.getTaskCount();
+
+        if (mAppIcon.mIsCanPin) {
+            if (mAppIcon.mIsPinedApp) {
+                addItemView(mContext.getResources().getString(R.string.unlock_from_dock),
+                        TAG_ACTION_LOCK_UNLOCK);
+            } else {
+                addItemView(mContext.getResources().getString(R.string.lock_to_dock),
+                        TAG_ACTION_LOCK_UNLOCK);
+            }
+        }
+        if (appIconTaskCount == 1) {
+            // addItemView(mContext.getResources().getString(R.string.transform_to_vertical),
+            // TAG_ACTION_TRANSFORM_VERTICAL);
+            // addItemView(mContext.getResources().getString(R.string.app_apply_tablet),
+            // TAG_ACTION_APPLY_TABLET);
+            addItemView(mContext.getResources().getString(R.string.exit_app), TAG_ACTION_EXIT);
+        } else if (appIconTaskCount > 1) {
+            addItemView(mContext.getResources().getString(R.string.exit_app), TAG_ACTION_EXIT);
+        }
+    }
+
+    public void addItemView(String text, int tag) {
+        View v = mInflater.inflate(R.layout.context_menu_item, null);
+        TextView tv = (TextView) v.findViewById(R.id.menu_item);
+        tv.setText(text);
+        v.setTag(tag);
+        v.setOnClickListener(this);
+        mItemViews.addView(v);
+    }
+
+    public void show() {
+        if (mOnShow == false) {
+            addWindow(mContext);
+        }
+    }
+
+    public void showAtPos(int x, int y) {
+        mX = x;
+        mY = y;
+    }
+
+    public void showAtView(View v) {
+        int[] location = new int[2];
+        v.getLocationOnScreen(location);
+        mY = location[1];
+        mX = location[0] + (v.getRight() - v.getLeft()) / 2;
+        show();
+    }
+
+    public void disMiss() {
+        if (mOnShow == true) {
+            removeWindow();
+        }
+    }
+
+    private void addWindow(Context context) {
+        int screenWidth = mWindowManager.getDefaultDisplay().getWidth();
+        int screenHeight = mWindowManager.getDefaultDisplay().getHeight();
+        WindowManager.LayoutParams layoutParams = null;
+        if (layoutParams == null) {
+            layoutParams = new WindowManager.LayoutParams();
+
+            this.measure(screenWidth, screenHeight);
+            layoutParams.type = WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
+            layoutParams.format = PixelFormat.RGBA_8888;
+            layoutParams.gravity = Gravity.LEFT | Gravity.TOP;
+            layoutParams.width = this.getMeasuredWidth();
+            layoutParams.height = this.getMeasuredHeight();
+
+            layoutParams.x = mX - layoutParams.width / 2;
+            layoutParams.y = mY + layoutParams.height;
+        }
+        mWindowManager.addView(this, layoutParams);
+        mOnShow = true;
+    }
+
+    private void removeWindow() {
+        mWindowManager.removeView(this);
+        mListener.onMenuClosed(this);
+        mOnShow = false;
+    }
+
+    public void setOnMenuListener(OnMenuListener listener) {
+        mListener = listener;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+
+        if (event.getAction() == MotionEvent.ACTION_DOWN
+                && isOutOfBounds(event)) {
+            disMiss();
+        }
+        return false;
+    }
+
+    private boolean isOutOfBounds(MotionEvent event) {
+        int[] location = new int[2];
+        this.getLocationOnScreen(location);
+        int height = this.getMeasuredHeight();
+        int width = this.getMeasuredWidth();
+        if (event.getRawX() > location[0] + width || event.getRawX() < location[0]) {
+            return true;
+        }
+        if (event.getRawX() > location[1] + height || event.getRawX() < location[1]) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasWindowFocus) {
+        super.onWindowFocusChanged(hasWindowFocus);
+        if (!hasWindowFocus)
+            disMiss();
+    }
+
+    @Override
+    public void onClick(View v) {
+        if (mMenuClicklistener == null)
+            return;
+        Integer tag = (Integer) v.getTag();
+        int action = tag;
+        switch (action) {
+            case TAG_ACTION_LOCK_UNLOCK:
+                mMenuClicklistener.onLockUnlockClick(mAppIcon);
+                break;
+            case TAG_ACTION_EXIT:
+                mMenuClicklistener.onExitClick(mAppIcon);
+                break;
+            case TAG_ACTION_TRANSFORM_VERTICAL:
+                mMenuClicklistener.onAppToVerticalClick(mAppIcon);
+                break;
+            case TAG_ACTION_APPLY_TABLET:
+                mMenuClicklistener.onApplyTabletClick(mAppIcon);
+                break;
+            case TAG_ACTION_TITLE_CLICK:
+                mMenuClicklistener.onTitleClick(mAppIcon);
+        }
+        disMiss();
+    }
+
+    OnHoverListener mAppItemHover = new OnHoverListener() {
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            int what = event.getAction();
+            switch (what) {
+                case MotionEvent.ACTION_HOVER_ENTER:
+                    setItemHoverd(v, true);
+                    break;
+                case MotionEvent.ACTION_HOVER_MOVE:
+                    break;
+                case MotionEvent.ACTION_HOVER_EXIT:
+                    setItemHoverd(v, false);
+                    break;
+            }
+            return false;
+        }
+    };
+
+    private boolean addScrollAppItem() {
+        MenuScrollLayout layoutBase = (MenuScrollLayout) mInflater.inflate(
+                R.layout.dock_scroll_menu, null);
+        final ScrollView mScrollView = (ScrollView) layoutBase
+                .findViewById(R.id.dock_scroll_menu_scrollview);
+//        mScrollView.setScrollbarFadingEnabled(false);
+        mAppItemViews = (LinearLayout) layoutBase
+                .findViewById(R.id.dock_scroll_menu_contain_layout);
+        int taskCount = mAppIcon.getTaskCount();
+        if (taskCount == 0) {
+            return false;
+        } else {
+            int[] taskList = new int[mAppIcon.getTaskCount()];
+            for (int i = 0; i < mAppIcon.getTaskCount(); i++) {
+                taskList[i] = mAppIcon.getTaskList().get(i).taskId;
+            }
+            List<RecentTaskInfo> recentTasks = null;
+            try {
+                recentTasks = ActivityManagerNative.getDefault().getRecentTasks(
+                        taskList,
+                        ActivityManager.RECENT_IGNORE_UNAVAILABLE
+                                | ActivityManager.RECENT_WITH_EXCLUDED,
+                        UserHandle.CURRENT.getIdentifier());
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            if (recentTasks == null) {
+                return false;
+            } /*else if (recentTasks.size() == 1) {
+                final RecentTaskInfo task1 = recentTasks.get(0);
+                if (task1.description != null) {
+                    mTitle = task1.description.toString();
+                }
+                View headerView = mInflater.inflate(R.layout.context_menu_title, null);
+                mTitleView = (TextView) headerView.findViewById(R.id.menu_item);
+                mTitleView.setText(mTitle);
+                mTitleView.setTag(TAG_ACTION_TITLE_CLICK);
+                mTitleView.setOnClickListener(this);
+                mItemViews.addView(headerView);
+                return true;
+            }*/ else {
+                for (RecentTaskInfo task : recentTasks) {
+                    String title = null;
+                    if (task.description != null) {
+                        title = task.description.toString();
+                    } else {
+                        Intent intent = new Intent(task.baseIntent);
+                        final PackageManager pm = mContext.getPackageManager();
+                        intent.setFlags((intent.getFlags() & ~Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)
+                                | Intent.FLAG_ACTIVITY_NEW_TASK);
+                        final ResolveInfo resolveInfo = pm.resolveActivity(intent, 0);
+                        if (resolveInfo != null) {
+                            final ActivityInfo info = resolveInfo.activityInfo;
+                            title = info.loadLabel(pm).toString();
+                        }
+                    }
+                    addAppItemView(title, task.id);
+                }
+                mItemViews.addView(layoutBase);
+                addLine();
+                return true;
+            }
+        }
+    }
+
+    public void addAppItemView(String text, int tag) {
+        View item = mInflater.inflate(R.layout.context_menu_title, null);
+        TextView tv = (TextView) item.findViewById(R.id.menu_item);
+        item.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Integer stackId = (Integer) v.getTag();
+                try {
+                    ActivityManagerNative.getDefault().moveTaskToFront(stackId, 0, null);
+                } catch (Exception e) {
+                }
+                disMiss();
+            }
+        });
+//        item.setOnHoverListener(mAppItemHover);
+        item.setTag(tag);
+        tv.setText(text);
+        mAppItemViews.addView(item);
+    }
+
+    private void setItemHoverd(View item, boolean hover) {
+        TextView tv = (TextView) item.findViewById(R.id.menu_item);
+        if (hover) {
+            item.setBackgroundColor(mContext.getResources().getColor(
+                    R.color.context_item_bg_color_hover));
+            tv.setTextColor(mContext.getResources().getColor(
+                    R.color.context_item_text_color_hover));
+        } else {
+            item.setBackgroundColor(mContext.getResources()
+                    .getColor(R.color.context_item_bg_color_nomal));
+            tv.setTextColor(mContext.getResources().getColor(
+                    R.color.context_item_text_color_nomal));
+        }
+    }
+
+    private void addLine() {
+        final View view = new View(mContext);
+        final LayoutParams mParams = new LayoutParams(LayoutParams.MATCH_PARENT, getResources()
+                .getDimensionPixelSize(R.dimen.dock_menu_line_height));
+        final int color = 0Xffdfdfdf;
+        view.setBackgroundColor(color);
+        mItemViews.addView(view, mParams);
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/Dock.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/Dock.java
new file mode 100644
index 0000000..8fe997d
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/Dock.java
@@ -0,0 +1,421 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import com.android.systemui.R;
+// import com.android.systemui.statusbar.KeyguardLockView;
+// import com.android.systemui.statusbar.startup.StartUpWindow;
+// import com.android.systemui.statusbar.startup.data.StartUpDataManager;
+// import com.android.systemui.statusbar.taskview.TaskViewDialog;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.ObjectAnimator;
+import android.app.ActivityManager;
+import android.app.ActivityManager.RecentTaskInfo;
+import android.app.ActivityManagerNative;
+import android.app.WallpaperManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.ActivityInfo;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.hardware.input.InputManager;
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.SystemClock;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.Display;
+import android.view.GestureDetector;
+import android.view.InputDevice;
+import android.view.KeyCharacterMap;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnLayoutChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.HorizontalScrollView;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.List;
+
+public class Dock extends LinearLayout {
+
+    private static final String TAG = "Dock";
+    private static final boolean DEBUG = DockEnv.DEBUG;
+    private static final int MSG_UPDATE_BLUR_EFFECT_BACKGROUND = 1;
+
+    private static final float mBlurWallpaperScale = 0.25f;
+    private static final int STATUS_BAR_SCROLL_WIDTH = 0;
+
+    private static final int MSG_DISMISS_STARTUP_WINDOW = 4;
+    private static final int MSG_DISMISS_NOTIFICATION_WINDOW = 5;
+
+    private Configuration mCurrentConfig;
+
+    private int mDockBarYPos = 0;
+    private AppIcon mStartUp;
+    private LinearLayout mView;
+
+    private View mDockPanel = null;
+    public AppPanel mAppPanel = null;
+    private DragAppPanel mDragAppPanel = null;
+
+    public Bitmap mWallpaperBlur = null;
+
+    private Context mContext;
+
+    // private StartUpWindow mStartWindow;
+
+    // private StatusArea mStatusArea;
+    // public DockStatusArea mDockStatusArea;
+    private WindowManager mWindowManager;
+    public View mLeftArrow;
+    public View mRightArrow;
+    public HorizontalScrollView mScrollView;
+    private LinearLayout mContainer = null;
+    public boolean isAppIconDraging = false;  //appIcon是否正在拖动中
+
+    public Dock(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mContext = context;
+    }
+
+    public void init() {
+
+        mView = (LinearLayout) this.findViewById(R.id.content);
+
+        mDockPanel = this.findViewById(R.id.dock_panel);
+
+        mDragAppPanel = (DragAppPanel) findViewById(R.id.drag_app_panel);
+
+        mAppPanel = (AppPanel) this.findViewById(R.id.app);
+        mAppPanel.setDock(this);
+        mAppPanel.setDragAppPanel(mDragAppPanel);
+
+        /******************* CHAOZHUO added by chenyaohuang BEGIN *******************/
+        /* 点击dock栏空白处，隐藏弹窗 */
+        findViewById(R.id.dock_panel_app_panel_layout).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mAppPanel.disMissAllMenu();
+            }
+        });
+        /******************* CHAOZHUO added by chenyaohuang END *******************/
+
+        mScrollView = (HorizontalScrollView) findViewById(R.id.scroll_view);
+        mDragAppPanel.setHorizontalScrollView(mScrollView);
+        mDragAppPanel.setDock(this);
+        mLeftArrow = findViewById(R.id.left_arrow);
+        mRightArrow = findViewById(R.id.right_arrow);
+
+        mLeftArrow.setOnClickListener(mArrowClick);
+        mRightArrow.setOnClickListener(mArrowClick);
+        mScrollView.setOnScrollChangeListener(mScroll);
+        mLeftArrow.setVisibility(View.INVISIBLE);
+        mRightArrow.setVisibility(View.INVISIBLE);
+        mContainer = (LinearLayout) findViewById(R.id.container);
+        // mContainer.addOnLayoutChangeListener(mLayoutListener);
+
+        mCurrentConfig = new Configuration(mContext.getResources().getConfiguration());
+    }
+
+    private void sendEvent(int code, int metaState, int action) {
+        long downTime = SystemClock.uptimeMillis();
+        final KeyEvent ev = new KeyEvent(downTime, downTime, action, code, 0,
+                metaState, KeyCharacterMap.VIRTUAL_KEYBOARD, 0,
+                KeyEvent.FLAG_FROM_SYSTEM | KeyEvent.FLAG_VIRTUAL_HARD_KEY,
+                InputDevice.SOURCE_KEYBOARD);
+        InputManager.getInstance().injectInputEvent(ev,
+                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
+    }
+
+    public boolean disMissReccentTaskDialog() {
+    //    if (mTaskViewDialog != null && mTaskViewDialog.isShowing()) {
+    //        try {
+    //            mTaskViewDialog.triggerTaskView(TaskViewDialog.TASK_VIEW_HIDE_FROM_DOCK);
+    //            return true;
+    //        } catch (Exception e) {}
+    //    }
+        return false;
+    }
+
+    public void onConfigurationChanged(Configuration newConfig) {
+        int change = 0;
+        if (mCurrentConfig != null) {
+            change = mCurrentConfig.diff(newConfig);
+        }
+        mCurrentConfig = new Configuration(newConfig);
+
+        if ((change & ActivityInfo.CONFIG_ORIENTATION) != 0) {
+            mAppPanel.disMissAllMenu();
+            updateArrowBackground();
+        }
+    }
+
+    public void updateArrowBackground() {
+        mLeftArrow.setBackgroundDrawable(
+                composeArrowDrawable(mLeftArrow, true));
+        mRightArrow.setBackgroundDrawable(
+                composeArrowDrawable(mRightArrow, false));
+
+        int containerWidth = mContainer.getMeasuredWidth();
+        int scrollViewWidth = mScrollView.getMeasuredWidth();
+
+        if (mScrollView.getScrollX() <= 0) {
+            animateHideArrowView(mLeftArrow);
+        } else {
+            animateShowArrowView(mLeftArrow);
+        }
+        if (scrollViewWidth < containerWidth) {
+            animateShowArrowView(mRightArrow);
+        } else {
+            animateHideArrowView(mRightArrow);
+        }
+
+        invalidate();
+    }
+
+    private ObjectAnimator mLeftAnimation;
+    private ObjectAnimator mRightAnimation;
+
+    private void animateShowArrowView(final View v) {
+
+        if (DEBUG) {
+            Log.d(TAG, "animateShow:" + v);
+        }
+        ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(v, View.ALPHA, 0f, 1f);
+        if (v == mLeftArrow) {
+            if (mLeftAnimation != null) {
+                mLeftAnimation.cancel();
+            }
+            mLeftAnimation = objectAnimator;
+        } else {
+            if (mRightAnimation != null) {
+                mRightAnimation.cancel();
+            }
+            mRightAnimation = objectAnimator;
+        }
+        objectAnimator.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (DEBUG) {
+                    Log.d(TAG, "animateShowEnd:" + v);
+                }
+                v.setVisibility(View.VISIBLE);
+                if (mLeftAnimation == animation) {
+                    mLeftAnimation = null;
+                } else {
+                    mRightAnimation = null;
+                }
+            }
+        });
+        objectAnimator.setDuration(1000);
+        v.setVisibility(View.VISIBLE);
+        v.setAlpha(0f);
+        objectAnimator.start();
+    }
+
+    private void animateHideArrowView(final View v) {
+        if (DEBUG) {
+            Log.d(TAG, "animateHide:" + v);
+        }
+        ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(v, View.ALPHA, 1f, 0f);
+        if (v == mLeftArrow) {
+            if (mLeftAnimation != null) {
+                mLeftAnimation.cancel();
+            }
+            mLeftAnimation = objectAnimator;
+        } else {
+            if (mRightAnimation != null) {
+                mRightAnimation.cancel();
+            }
+            mRightAnimation = objectAnimator;
+        }
+        objectAnimator.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (DEBUG) {
+                    Log.d(TAG, "animateHideEnd:" + v);
+                }
+                v.setVisibility(View.INVISIBLE);
+                if (mLeftAnimation == animation) {
+                    mLeftAnimation = null;
+                } else {
+                    mRightAnimation = null;
+                }
+            }
+        });
+        objectAnimator.setDuration(1000);
+        objectAnimator.start();
+
+    }
+
+    /******************* CHAOZHUO added by chenyaohuang BEGIN *******************/
+    /* 点击箭头，一页一页的滑动，而不是滑到底部 */
+    public boolean scrollLeft() {
+        int x = mScrollView.getScrollX();
+        final int arrowWidth = mLeftArrow.getWidth() + mRightArrow.getWidth();
+        final int onePageWidth = mScrollView.getWidth() - arrowWidth;
+        if (x > 0) {
+            mScrollView.smoothScrollBy(-onePageWidth, 0);
+            return true;
+        }
+        return false;
+    }
+
+    public boolean scrollRight() {
+        View view = (View) mScrollView.getChildAt(mScrollView.getChildCount() - 1);
+        int subViewWidth = view.getRight();
+        int x = mScrollView.getScrollX();
+        final int arrowWidth = mLeftArrow.getWidth() + mRightArrow.getWidth();
+        final int onePageWidth = mScrollView.getWidth() - arrowWidth;
+        final int spaceWidth = subViewWidth - x - mScrollView.getWidth();
+        if (spaceWidth > 0) {
+            mScrollView.smoothScrollBy(onePageWidth, 0);
+            return true;
+        }
+        return false;
+    }
+    /******************* CHAOZHUO added by chenyaohuang END *******************/
+
+    OnClickListener mArrowClick = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (v == mLeftArrow) {
+                if (!scrollLeft()) {
+                    mScrollView.fullScroll(View.FOCUS_LEFT);
+                    mLeftArrow.setVisibility(View.INVISIBLE);
+                }
+                // mScrollView.fullScroll(View.FOCUS_LEFT);
+            } else {
+                if (!scrollRight()) {
+                    mScrollView.fullScroll(View.FOCUS_RIGHT);
+                    mRightArrow.setVisibility(View.INVISIBLE);
+                }
+                // mScrollView.fullScroll(View.FOCUS_RIGHT);
+            }
+        }
+    };
+
+    OnScrollChangeListener mScroll = new OnScrollChangeListener() {
+
+        @Override
+        public void onScrollChange(View v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) {
+            if (DEBUG) {
+                Log.d(TAG, "onScrollChange scrollX:" + scrollX + "  scrollY" + scrollY
+                        + "   oldScrollX" + oldScrollX);
+            }
+            mAppPanel.disMissAllMenu();
+            int childWidth = ((ViewGroup) v).getChildAt(0).getMeasuredWidth();
+            int scrollViewWidth = v.getMeasuredWidth();
+            if (scrollX <= 0) {
+                animateHideArrowView(mLeftArrow);
+            } else if (oldScrollX <= 0) {
+                animateShowArrowView(mLeftArrow);
+            } else if (scrollX >= childWidth - scrollViewWidth) {
+                animateHideArrowView(mRightArrow);
+            } else if (oldScrollX >= childWidth - scrollViewWidth) {
+                animateShowArrowView(mRightArrow);
+            }
+        }
+    };
+
+    public void scrollFocusOnView(final View icon) {
+        new Handler().post(new Runnable() {
+            @Override
+            public void run() {
+                mScrollView.smoothScrollTo(icon.getLeft(), 0);
+            }
+        });
+    }
+
+    private Drawable composeArrowDrawable(View arrowView, boolean left) {
+
+        final Point p = new Point();
+        final WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+        final Display d = wm.getDefaultDisplay();
+        d.getRealSize(p);
+        final float scale = 1.0f; //(float) mWallpaperBlur.getWidth() / (float) p.x;
+
+        int bgId = left ? R.drawable.dockmask_left_area : R.drawable.dockmask_right_area;
+        int iconId = left ? R.drawable.dockarrow_left : R.drawable.dockarrow_right;
+
+        BitmapDrawable shadow = (BitmapDrawable) mContext.getResources().getDrawable(bgId);
+        BitmapDrawable icon = (BitmapDrawable) mContext.getResources().getDrawable(iconId);
+
+        final int[] location = new int[2];
+        arrowView.getLocationOnScreen(location);
+
+        final int width = arrowView.getMeasuredWidth();
+        final int height = arrowView.getMeasuredHeight();
+
+        final Rect outRect = new Rect(location[0], location[1], location[0] + width, location[1]
+                + height);
+        arrowView.getDrawingRect(outRect);
+
+        final Bitmap bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
+        final Canvas outCanvas = new Canvas(bitmap);
+        final Rect srcRect = new Rect(Math.round(location[0] * scale), Math.round(location[1]
+                * scale),
+                Math.round((location[0] + width) * scale), Math.round((location[1] + height)
+                        * scale));
+        // outCanvas.drawBitmap(mWallpaperBlur, srcRect, outRect, null);
+        outCanvas.drawColor(0xFF000000);
+        outCanvas.drawColor(0x80000000);
+
+        Paint iconPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG);
+        iconPaint.setStyle(Paint.Style.FILL);
+        iconPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
+
+        outCanvas.drawBitmap(shadow.getBitmap(), 0, 0, iconPaint);
+
+        int arrowHeight = icon.getIntrinsicHeight();
+
+        int x = 0;
+        if (!left) {
+            x = icon.getIntrinsicWidth();
+        }
+        outCanvas.drawBitmap(icon.getBitmap(), x, (height - arrowHeight) / 2, null);
+
+        return new BitmapDrawable(bitmap);
+    }
+
+    /**
+     * 暂时的处理方式，避免箭头一直不能消失
+     */
+    public void setDisMissArrow() {
+        if(mScrollView.getMeasuredWidth() == mContainer.getMeasuredWidth()) {
+            mLeftArrow.setVisibility(View.INVISIBLE);
+            mRightArrow.setVisibility(View.INVISIBLE);
+        }
+    }
+
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/DockEnv.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DockEnv.java
new file mode 100644
index 0000000..b2aec0b
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DockEnv.java
@@ -0,0 +1,13 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+public class DockEnv {
+    public final static boolean DEBUG = false;
+
+    public static final boolean ENABLE_DOCK = true;
+
+    public static final boolean ENABLE_KEYGUARD = true;
+
+    public static final boolean ENABLE_SCREENSHOT = true;
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/DockImeView.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DockImeView.java
new file mode 100644
index 0000000..1b730b5
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DockImeView.java
@@ -0,0 +1,28 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.ImageView;
+
+public class DockImeView extends ImageView {
+
+    public DockImeView(Context context) {
+        this(context, null);
+    }
+
+    public DockImeView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public DockImeView(Context context, AttributeSet attrs, int defStyleAttr) {
+        this(context, attrs, defStyleAttr, 0);
+    }
+
+    public DockImeView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/DragAppPanel.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DragAppPanel.java
new file mode 100644
index 0000000..553cfd2
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DragAppPanel.java
@@ -0,0 +1,61 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.HorizontalScrollView;
+
+public class DragAppPanel extends FrameLayout {
+
+    private DragViewDelegate mDragDelegate;
+    public DragAppPanel(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mDragDelegate = new DragViewDelegate(this);
+    }
+
+    public void setHorizontalScrollView(HorizontalScrollView scrollView) {
+        mDragDelegate.setHorizontalScrollView(scrollView);
+    }
+
+    public void setDock(Dock dock) {
+        mDragDelegate.setDock(dock);
+    }
+
+    public void init(AppPanel attachView) {
+        mDragDelegate.init(attachView);
+    }
+
+    public void startDrag(MotionEvent e, final View v) {
+        mDragDelegate.startDrag(e, v);
+    }
+
+    public void startBigDrag() {
+        if(mDragDelegate != null) {
+            mDragDelegate.startBigDrag();
+        }
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        if (mDragDelegate.handleInterceptTouchEvent(ev)) {
+            return true;
+        }
+        return super.onInterceptTouchEvent(ev);
+    }
+
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (mDragDelegate.handleTouchEvent(event)) {
+            return true;
+        }
+
+        return super.onTouchEvent(event);
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/DragViewDelegate.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DragViewDelegate.java
new file mode 100644
index 0000000..2e759e6
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/DragViewDelegate.java
@@ -0,0 +1,772 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.animation.Animator;
+import android.animation.Animator.AnimatorListener;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.PixelFormat;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.view.animation.Animation;
+import android.view.animation.TranslateAnimation;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.HorizontalScrollView;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.LinearLayout.LayoutParams;
+import android.widget.TextView;
+
+import com.android.systemui.R;
+
+// CHAOZHUO added by chenyaohuang
+/**
+ * dock栏appicon拖动逻辑
+ */
+class DragViewDelegate {
+    private static final String TAG = "DragViewDelegate";
+    private boolean DEBUG = false;
+    private ViewGroup mAttachLayer;
+    private AppPanel mAttachView;
+    private HorizontalScrollView mScrollView;
+    private Dock mDock;
+    private FrameLayout mLayoutAppPanel;
+    private ImageView mDragImageView;
+    private Bitmap mDragBitmap;
+
+    private int mDragPointX;  //触摸的坐标点相对长按图标x坐标的偏移量
+    private int mDragPointY;  //触摸的坐标点相对长按图标y坐标的偏移量
+    private boolean hasDisMissed = false; //appicon长按出现的菜单栏是否已经消失
+
+    private static final int DRAG_ANIM_TIME = 200;
+    private WindowManager mWindowManager;
+    private Context mContext;
+    private FrameLayout mWindowFrameLayout;
+    private View mOriginView;
+    private int mOriginViewWidth;  //appIcon原始的宽度
+    private int mIconMoveSpaceWidth;
+    private TextView mDragTextView;
+    private boolean isShowQuitTipMode = true;  //联想有两种设计方案，一种是直接显示x的图标，一种的在dragview上方显示quit文字
+    private boolean isTaskCountZero = false;  //是否在dragView上头显示quit文字提示
+
+    DragViewDelegate(ViewGroup attachView) {
+        mContext = attachView.getContext();
+        mIconMoveSpaceWidth = mContext.getResources().getDimensionPixelOffset(R.dimen.dock_app_move_space_width);
+        mAttachLayer = attachView;
+        mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+        mWindowFrameLayout = new FrameLayout(mContext);
+        mWindowFrameLayout.setOnTouchListener(new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                //避免出现bug造成整个界面不响应
+                hasDisMissed = false;
+                destroyDragImageView();
+                allAppIconBackOriginWidthAndVisiable();
+                return false;
+            }
+        });
+    }
+
+    public void setHorizontalScrollView(HorizontalScrollView scrollView) {
+        mScrollView = scrollView;
+    }
+
+    public void setDock(Dock dock) {
+        mDock = dock;
+        mContext = mDock.getContext();
+
+    }
+
+    public void init(AppPanel attachView) {
+        mAttachView = attachView;
+    }
+
+    private float mHandleX;
+    public boolean handleTouchEvent(MotionEvent e) {
+        if (mDragImageView != null) {
+            switch (e.getAction()) {
+                case MotionEvent.ACTION_DOWN:
+                case MotionEvent.ACTION_MOVE:
+                    if (DEBUG) {
+                        Log.d(TAG, "handleTouchEvent: x:" + e.getX() + ";  y:" + e.getY() + ";  mDragPointX:" + mDragPointX);
+                    }
+                    if (!hasDisMissed && Math.abs(e.getX() - mHandleX) > 30 || e.getY() < 0) {
+                        hasDisMissed = true;
+                        mAttachView.disMissAllMenu();
+                        if (mDragTextView != null && isShowQuitTipMode && !isTaskCountZero) {
+                            mDragTextView.setVisibility(View.VISIBLE);
+                        }
+                    }
+                    int x = (int) (e.getX());      //该x坐标是相对DragAppPanel而言的
+                    int y = (int) (e.getY());    //该y坐标也是相对DragAppPanel而言的
+                    int left = getAppPanelLeft() + x - mDragPointX;
+                    final int height = getWindowHeight();
+                    int top = height + y - mDragPointY;
+                    if (mDragImageView != null) {
+                        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
+                                FrameLayout.LayoutParams.MATCH_PARENT,
+                                FrameLayout.LayoutParams.MATCH_PARENT);
+                        params.width = mDragImageView.getWidth();
+                        params.height = mDragImageView.getHeight();
+                        params.leftMargin = left;
+                        params.topMargin = top;
+                        mDragImageView.setLayoutParams(params);
+                    }
+                    if (mDragTextView != null && mDragTextView.getVisibility() == View.VISIBLE) {
+                        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
+                                FrameLayout.LayoutParams.WRAP_CONTENT,
+                                FrameLayout.LayoutParams.WRAP_CONTENT);
+                        params.leftMargin = left + (mDragImageView.getWidth() - mDragTextView.getWidth())/2;
+                        params.topMargin = top - mDragTextView.getHeight();
+                        mDragTextView.setLayoutParams(params);
+                    }
+                    if (shouldCloseApp()) { //如果y坐标移动到了close app的高度，就不要进行下面的的逻辑操作
+                        break;
+                    }
+                    handleDrag(x, y);
+                    break;
+                case MotionEvent.ACTION_UP:
+                case MotionEvent.ACTION_CANCEL:
+                    if (mDragTextView != null) {
+                        mDragTextView.setVisibility(View.INVISIBLE);
+                    }
+                    hasDisMissed = false;
+                    final boolean isExit = shouldCloseApp();
+                    handleDrop();
+                    if (isExit) {
+                        mAttachView.mListener.onExitClick((AppIcon) mOriginView);
+                    }
+                    break;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     *
+     * @return 是否需要关闭app
+     */
+    public boolean shouldCloseApp() {
+        if (mDragImageView != null) {
+            final int height = getWindowHeight();
+            if (mDragImageView.getTop() < height - mDragImageView.getHeight()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public Bitmap getDragImageBitmap() {
+        return mDragBitmap;
+    }
+
+    public ImageView getDragImageView() {
+        return mDragImageView;
+    }
+
+    public void startDrag(MotionEvent e, final View v) {
+        mIsBackingVisiable = false;
+        mOriginView = v;
+        createDragImageView(e, v);
+        v.postDelayed(new Runnable() {  //添加延时调用，是为了保证AppPanel上面的icon消失前，出现DragImageView
+            @Override
+            public void run() {
+                if (!mIsBackingVisiable) {
+                    v.setVisibility(View.INVISIBLE);
+                }
+            }
+        }, 2);
+
+    }
+
+    public void startBigDrag() {
+        if (mDragImageView != null) {
+            setViewDragStyle(mDragImageView, true);
+            if (mDragTextView != null && isShowQuitTipMode && !isTaskCountZero) {
+                if (mOriginEvent.getToolType(0) == MotionEvent.TOOL_TYPE_MOUSE) {
+                    mAttachLayer.post(new Runnable() {
+                        public void run() {
+                            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);
+                            params.leftMargin = mDragImageView.getLeft() + (mDragImageView.getWidth() - mDragTextView.getWidth()) / 2;
+                            params.topMargin = mDragImageView.getTop() - mDragTextView.getHeight();
+                            mDragTextView.setLayoutParams(params);
+                            mDragTextView.setVisibility(View.VISIBLE);
+                        }
+                    });
+                }
+            }
+        }
+    }
+
+    private void destroyDragImageView() {
+        if (mDragImageView != null) {
+            setIsDraging(false);
+            mDragImageView.clearAnimation();
+            mDragImageView.setVisibility(View.GONE);
+            removeFrameLayout();
+            BitmapDrawable bitmapDrawable = (BitmapDrawable)
+                    mDragImageView.getDrawable();
+            if (bitmapDrawable != null) {
+                final Bitmap bitmap = bitmapDrawable.getBitmap();
+                if (bitmap != null && !bitmap.isRecycled()) {
+                    try {
+                        bitmap.recycle();
+                    } catch (Exception e) {
+                        // TODO: handle exception
+                    }
+                }
+            }
+            mDragImageView.setImageDrawable(null);
+            mDragImageView = null;
+        }
+    }
+
+    private MotionEvent mOriginEvent;
+    /**
+     * 创建appicon影像
+     * @param e
+     * @param appIcon
+     */
+    private void createDragImageView(MotionEvent e, final View appIcon) {
+        if (DEBUG) {
+            Log.d(TAG, "createDragImageView: v.left=" + appIcon.getLeft() + "; v.top=" + appIcon.getTop() + "; e.x=" + e.getX() + "; e.y=" + e.getY() );
+        }
+        mOriginEvent = e;
+        setIsDraging(true);
+        addWindowFrameLayout(mWindowFrameLayout);
+        final int height = getWindowHeight();
+        appIcon.setPressed(false);
+        appIcon.destroyDrawingCache();
+        appIcon.setDrawingCacheEnabled(true);
+
+        mDragImageView = new ImageView(mAttachView.getContext());
+        AppIcon icon = (AppIcon)appIcon;
+        Bitmap bm = null;
+        if (icon.getTaskCount() == 0) {
+            isTaskCountZero = true;
+        } else {
+            isTaskCountZero = false;
+        }
+        if (isShowQuitTipMode || isTaskCountZero) {
+            bm = Bitmap.createBitmap(appIcon.getDrawingCache());
+        } else {
+            bm = combineBitmap(Bitmap.createBitmap(appIcon.getDrawingCache()), null);
+        }
+        mDragBitmap = bm;
+        mDragImageView.setImageBitmap(bm);
+        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
+                FrameLayout.LayoutParams.MATCH_PARENT,
+                FrameLayout.LayoutParams.MATCH_PARENT);
+        params.width = appIcon.getWidth();
+        params.height = appIcon.getHeight();
+        params.leftMargin = appIcon.getLeft() - getScrollX() + getAppPanelLeft();
+        params.topMargin = height - getAppPanelTop();
+        mWindowFrameLayout.addView(mDragImageView, params);
+        mDragImageView.layout(params.leftMargin, params.topMargin, params.leftMargin + mDragImageView.getWidth(),
+                params.topMargin + mDragImageView.getHeight());
+
+        if (isShowQuitTipMode && !isTaskCountZero) {
+            mDragTextView = createDragTextView();
+            mDragTextView.setVisibility(View.INVISIBLE);
+            FrameLayout.LayoutParams textParams = new FrameLayout.LayoutParams(
+                    FrameLayout.LayoutParams.WRAP_CONTENT,
+                    FrameLayout.LayoutParams.WRAP_CONTENT);
+            mWindowFrameLayout.addView(mDragTextView, textParams);
+        }
+
+        mOriginViewWidth = appIcon.getWidth();
+        mDragPointX = (int) e.getX();
+        mDragPointY = (int) e.getY();
+        // 这里有个很奇怪的bug, 第一次启动时，获取的params.width为-2（即 wrap_content）,第二次获取时，又是正常的宽度，112
+        LinearLayout.LayoutParams iconParams = (LayoutParams) appIcon.getLayoutParams();
+        iconParams.width = appIcon.getWidth() + mIconMoveSpaceWidth;
+        appIcon.setLayoutParams(iconParams);
+    }
+
+    private TextView createDragTextView() {
+        TextView textView= new TextView(mContext);
+        textView.setBackgroundResource(R.drawable.dock_text_quit);
+        textView.setTextColor(mContext.getResources().getColor(R.color.dock_panel_quit_text_color));
+        textView.setText(mContext.getResources().getString(R.string.dock_text_quit));
+        textView.setTextSize(mContext.getResources().getDimensionPixelOffset(R.dimen.dock_drag_quit_text_size));
+        int padding = mContext.getResources().getDimensionPixelOffset(R.dimen.dock_drag_quit_text_padding);
+        textView.setPadding(padding, padding/2, padding, padding);
+        return textView;
+    }
+
+    /**
+     * 拼接图片
+     * @param bit1
+     * @param bit2
+     * @return 返回拼接后的Bitmap
+     */
+    private Bitmap combineBitmap(Bitmap bit1,Bitmap bit2){
+        Drawable drawable = mContext.getResources().getDrawable(R.drawable.dock_yeti_delete_icon);
+        //实际上这是一个BitmapDrawable对象
+        BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;
+        //可以在调用getBitmap方法，得到这个位图
+        bit2= bitmapDrawable.getBitmap();
+        int width = bit1.getWidth()/* + bit2.getWidth()*/;
+        int height = bit1.getHeight()/* + bit2.getHeight()*/;
+        //创建一个空的Bitmap(内存区域),宽度等于第一张图片的宽度，高度等于两张图片高度总和
+        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+        //将bitmap放置到绘制区域,并将要拼接的图片绘制到指定内存区域
+        Canvas canvas = new Canvas(bitmap);
+        canvas.drawBitmap(bit1, 0, 0, null);
+        canvas.drawBitmap(bit2, bit1.getWidth()- bit2.getWidth(), 0, null);
+        return bitmap;
+    }
+
+
+    private void addWindowFrameLayout(View view) {
+        final WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
+        layoutParams.type = WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL;
+        layoutParams.format = PixelFormat.TRANSPARENT;
+        layoutParams.gravity = Gravity.LEFT | Gravity.BOTTOM;
+        layoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
+        layoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
+        layoutParams.flags = WindowManager.LayoutParams.FLAG_FULLSCREEN
+                | WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED
+                | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
+                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
+        mWindowManager.addView(view, layoutParams);
+    }
+
+    public boolean handleInterceptTouchEvent(MotionEvent e) {
+        if (mDragImageView != null) {
+            int x = (int) e.getX();
+            int y = (int) e.getY();
+            switch (e.getAction()) {
+                case MotionEvent.ACTION_DOWN:
+                case MotionEvent.ACTION_MOVE:
+                    mHandlePostion = -2;
+                    mHandleX = x;
+                    if (DEBUG) {
+                        Log.d(TAG, "Intercept:  x = " + e.getX() + ";  y = " + e.getY());
+                    }
+                    final int count = mAttachView.getChildCount();
+                    for (int i = 0; i < count; i++) {
+                        View child = mAttachView.getChildAt(i);
+                        if (child == mOriginView) {
+                            mCurrentPosition = i;
+                            mDropRect = new Rect(child.getLeft(), child.getTop(), child.getRight(),
+                                    child.getBottom());
+                        }
+                    }
+                    break;
+                case MotionEvent.ACTION_UP:
+                case MotionEvent.ACTION_CANCEL:
+                    if (DEBUG) {
+                        Log.d(TAG, "Intercept:  action="+e.getAction());
+                    }
+                    if (mDragTextView != null) {
+                        mDragTextView.setVisibility(View.INVISIBLE);
+                    }
+                    destroyDragImageView();
+                    allAppIconBackOriginWidthAndVisiable();
+                    break;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private static final float ITEM_DRAGVIEW_SCALE = 1.6f;
+    private static final float ITEM_DRAGVIEW_ALPHA = 0.5f;
+
+    private void setViewDragStyle(View v, boolean drag) {
+        if (v != null) {
+            if (drag) {
+                v.setPressed(false);
+                v.setScaleX(ITEM_DRAGVIEW_SCALE);
+                v.setScaleY(ITEM_DRAGVIEW_SCALE);
+                v.setAlpha(ITEM_DRAGVIEW_ALPHA);
+            } else {
+                v.setScaleX(1.0f);
+                v.setScaleY(1.0f);
+                v.setAlpha(1.0f);
+            }
+        }
+    }
+
+    private static final long ITEM_HOVER_DELAY = 100;
+    private int mCurrentPosition = -1;
+    private int mDropPosition = -1;
+    private Rect mDropRect;
+    private Runnable mDelayedOnDragRunnable;
+
+    private int mHandlePostion = -1;
+
+    private Runnable mScrollLeftRunnable = new Runnable() {
+        @Override
+        public void run() {
+            mIsScrollLeft = false;
+            mDock.scrollLeft();
+            handleDrag(handleDragX, handleDragY);
+        }
+    };
+
+    private Runnable mScrollRightRunnable = new Runnable() {
+        @Override
+        public void run() {
+            mIsScrollRight = false;
+            mDock.scrollRight();
+            handleDrag(handleDragX, handleDragY);
+        }
+    };
+
+    private int handleDragX;
+    private int handleDragY;
+    private boolean mIsScrollLeft = false;
+    private boolean mIsScrollRight = false;
+
+    public void handleDrag(final int x, final int y) {
+        handleDragX = x;
+        handleDragY = y;
+        Rect mArrowLeftRect = new Rect();
+        Rect mArrowRightRect = new Rect();
+        mDock.mLeftArrow.getHitRect(mArrowLeftRect);  // 返回整个屏幕的绝对位置
+        mDock.mRightArrow.getHitRect(mArrowRightRect);
+        final int appPanelX = x + getAppPanelLeft();
+        if (DEBUG) {
+            Log.d(TAG, "touchX:"+appPanelX+";  "+"touchY:"+y+";  "+"mArrowLeftRect.RightX:"+mArrowLeftRect.right
+                    +";  mArrowRightRect.leftX:"+mArrowRightRect.left+";  ");
+        }
+        if (appPanelX <= mArrowLeftRect.right && mDock.mLeftArrow.getVisibility() == View.VISIBLE) {
+            if (!mIsScrollLeft) {
+                mIsScrollLeft = true;
+                mDock.postDelayed(mScrollLeftRunnable, 600);
+            }
+            if (mIsScrollRight) {
+                mDock.removeCallbacks(mScrollRightRunnable);
+                mIsScrollRight = false;
+            }
+            return;
+        }
+
+        if (appPanelX >= mArrowRightRect.left && mDock.mRightArrow.getVisibility() == View.VISIBLE) {
+            if (!mIsScrollRight) {
+                mIsScrollRight = true;
+                mDock.postDelayed(mScrollRightRunnable, 600);
+            }
+            if (mIsScrollLeft) {
+                mDock.removeCallbacks(mScrollLeftRunnable);
+                mIsScrollLeft = false;
+            }
+            return;
+        }
+        if (mIsScrollLeft) {
+            mDock.removeCallbacks(mScrollLeftRunnable);
+            mIsScrollLeft = false;
+        }
+
+        if (mIsScrollRight) {
+            mDock.removeCallbacks(mScrollRightRunnable);
+            mIsScrollRight = false;
+        }
+
+        final int panelX = x + getScrollX(); // x坐标点相对AppPanel内部的位置
+        final int tempDropPosition = pointToPosition(mCurrentPosition, panelX - mDragPointX + mDragImageView.getWidth()/2, y - mDragPointY + mDragImageView.getWidth()/2);
+        if (DEBUG) {
+            Log.d(TAG, "panelX = " + panelX + "; mCurrentPosition = " + mCurrentPosition + "; tempDropPosition=" + tempDropPosition);
+        }
+        if (mDropPosition != tempDropPosition
+                && tempDropPosition != AdapterView.INVALID_POSITION) {
+            if (mHandlePostion == tempDropPosition) {
+                return;
+            }
+            mHandlePostion = tempDropPosition;
+            mAttachView.removeCallbacks(mDelayedOnDragRunnable);
+
+            mDelayedOnDragRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    mAttachView.removeCallbacks(mDelayedOnDragRunnable);
+                    mDropRect = performDragAndDropSwapping(mCurrentPosition,
+                            tempDropPosition);
+                    final int nextDropPosition = pointToPosition(tempDropPosition, panelX - mDragPointX + mDragImageView.getWidth()/2, y - mDragPointY + mDragImageView.getWidth()/2);
+                    if (nextDropPosition == AdapterView.INVALID_POSITION) {
+                        mCurrentPosition = mDropPosition = tempDropPosition;
+                    }
+                }
+            };
+            mAttachView.postDelayed(mDelayedOnDragRunnable, ITEM_HOVER_DELAY);
+        }
+    }
+
+    public View handleDrop() {
+        final int height = getWindowHeight();
+        mDock.removeCallbacks(mScrollLeftRunnable);
+        mDock.removeCallbacks(mScrollRightRunnable);
+        mAttachView.removeCallbacks(mDelayedOnDragRunnable);
+        int count = mAttachView.getChildCount();
+//        if (mDropPosition == AdapterView.INVALID_POSITION) {
+        for (int i = 0; i < count; i++) {
+            View dragChild = mAttachView.getChildAt(i);
+            if (dragChild.getVisibility() == View.INVISIBLE) {
+                mDropPosition = i;
+                break;
+            }
+        }
+//        }
+
+//        if (mDropRect == null) {
+        View child = mAttachView.getChildAt(mDropPosition);
+        mDropRect = new Rect(child.getLeft(), child.getTop(), child.getRight(), child.getBottom());
+//        }
+        Point dropPoint = new Point(mDropRect.left - getScrollX() + getAppPanelLeft(),
+                mDropRect.top);
+        final Point prePoint = new Point(mDragImageView.getLeft(), mDragImageView.getTop());
+        if (mDragImageView != null) {
+            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
+                    FrameLayout.LayoutParams.MATCH_PARENT,
+                    FrameLayout.LayoutParams.MATCH_PARENT);
+            params.width = mDragImageView.getWidth();
+            params.height = mDragImageView.getHeight();
+            params.leftMargin = dropPoint.x;
+            params.topMargin = height - getAppPanelTop();
+            mDragImageView.setLayoutParams(params);
+        }
+        dropItemAnim(mDragImageView, prePoint, dropPoint);
+        mDropPosition = mCurrentPosition =
+                AdapterView.INVALID_POSITION;
+
+        // 重新设置在dock栏上pinedApp的排列顺序
+        ArrayList<String> pinedApp = new ArrayList<String>();
+        for (int i = 0; i < count; i++) {
+            AppIcon icon = (AppIcon) mAttachView.getChildAt(i);
+            if (icon.mIsPinedApp) {
+                pinedApp.add(icon.mPackageName);
+            }
+        }
+        PinedAppSettings.getInstance(mAttachView.getContext()).storePinedApp(pinedApp);
+        return mOriginView;
+    }
+
+    /**
+     *
+     * @param draggedChild
+     * @param x     appicon的中心点在AppPanel内部的X坐标
+     * @param y     appicon的中心点在AppPanel内部的Y坐标
+     * @return  返回AppIcon所在的AppPanel的位置
+     */
+    protected int pointToPosition(final int draggedChild, final int x, final int y) {
+        Rect mRect = new Rect();
+        for (int index = 0; index < mAttachView.getChildCount(); index++) {
+            if (index == draggedChild) {
+                continue;
+            }
+            View child = mAttachView.getChildAt(index);
+            child.getHitRect(mRect);
+            if (mRect.contains(x, y)) {
+                return index;
+            }
+        }
+        return -1;
+    }
+
+    protected Rect performDragAndDropSwapping(int from, int to) {
+        final View removedChild = mAttachView.getChildAt(from);
+        if (removedChild == null) {
+            return null;
+        }
+        mAttachView.disMissAllMenu();
+        Rect inRect = new Rect();
+        removedChild.getHitRect(inRect);
+        List<Rect> list = new ArrayList<Rect>();
+
+        if (from != to) {
+            int count = mAttachView.getChildCount();
+            for (int i = 0; i < count; i++) {
+                View child = mAttachView.getChildAt(i);
+                Rect outRect = new Rect();
+                child.getHitRect(outRect);
+                list.add(outRect);
+            }
+
+            mAttachView.removeViewInLayout(removedChild);
+            mAttachView.addView(removedChild, to, removedChild.getLayoutParams());
+            mAttachView.invalidate();
+
+            for (int i = 0; i < count; i++) {
+                View child = mAttachView.getChildAt(i);
+                final Point prePosin = new Point(child.getLeft(), child.getTop());
+                Rect outRect = list.get(i);
+
+                if (i == to) {
+                    child.layout(outRect.left, outRect.top, outRect.right, outRect.bottom);
+                } else {
+                    child.layout(outRect.left, outRect.top, outRect.right, outRect.bottom);
+                    translateChild(child, prePosin, new Point(outRect.left, outRect.top));
+                }
+            }
+        }
+        list.clear();
+        View child = mAttachView.getChildAt(to);
+        Rect rect = new Rect(child.getLeft(), child.getTop(), child.getRight(), child.getBottom());
+        if (from < to) {  //往右滑动的时候，dragView右边的view，是向右移动了mIconMoveSpaceWidth的距离的
+            rect.left -= mIconMoveSpaceWidth;
+            rect.right -= mIconMoveSpaceWidth;
+        }
+        return rect;
+    }
+
+    protected final void translateChild(View v, Point prev, Point now) {
+        TranslateAnimation translate = new TranslateAnimation(Animation.ABSOLUTE, -now.x + prev.x,
+                Animation.ABSOLUTE, 0, Animation.ABSOLUTE, -now.y
+                        + prev.y, Animation.ABSOLUTE, 0);
+        translate.setDuration(DRAG_ANIM_TIME);
+        translate.setFillEnabled(false);
+        translate.setFillAfter(false);
+
+        v.clearAnimation();
+        v.startAnimation(translate);
+    }
+
+    protected final void dropItemAnim(View v, Point prev, Point now) {
+        final int height = getWindowHeight();
+        final AppIcon dropIcon = (AppIcon)mOriginView;
+        if (shouldCloseApp()) {
+            if (!dropIcon.mIsPinedApp) {
+                performDragAndDropSwapping(mDropPosition, mAttachView.getChildCount() - 1);
+                destroyDragImageView();
+                return;
+            }
+        }
+        ObjectAnimator alphaAnimator = ObjectAnimator.ofFloat(v, "alpha", v.getAlpha(), 1.0f);
+        ObjectAnimator translationAnimatorX = ObjectAnimator.ofFloat(v, "translationX", -now.x
+                + prev.x, 0);
+        ObjectAnimator translationAnimatorY = ObjectAnimator.ofFloat(v, "translationY", -height + prev.y, 0);
+        ObjectAnimator scaleXAnimator = ObjectAnimator.ofFloat(v, "scaleX", ITEM_DRAGVIEW_SCALE,
+                1.0f);
+        ObjectAnimator scaleYAnimator = ObjectAnimator.ofFloat(v, "scaleY", ITEM_DRAGVIEW_SCALE,
+                1.0f);
+        AnimatorSet as = new AnimatorSet();
+        as.setDuration(DRAG_ANIM_TIME);
+        as.addListener(new AnimatorListener() {
+            @Override
+            public void onAnimationStart(Animator animation) {
+            }
+
+            @Override
+            public void onAnimationRepeat(Animator animation) {
+            }
+
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                allAppIconBackOriginWidthAndVisiable();
+                mAttachView.postDelayed(new Runnable() {   //添加延时调用，是为了保证AppPanel上面的icon出现后，再销毁DragImageView
+                    @Override
+                    public void run() {
+                        destroyDragImageView();
+                    }
+                }, 2);
+            }
+
+            @Override
+            public void onAnimationCancel(Animator animation) {
+            }
+        });
+        as.playTogether(alphaAnimator, translationAnimatorX, translationAnimatorY, scaleXAnimator, scaleYAnimator);
+        as.start();
+    }
+
+    private int getScrollX() {
+        return mScrollView.getScrollX();
+    }
+
+    /**
+     *
+     * @return  AppPanel离左边屏幕的距离
+     */
+    private int getAppPanelLeft() {
+        if (mLayoutAppPanel == null) {
+            mLayoutAppPanel = (FrameLayout) mAttachLayer
+                    .findViewById(R.id.dock_panel_app_panel_layout);
+        }
+        int[] location = new int[2] ;
+        mDock.getLocationOnScreen(location);
+        return location [0] + mLayoutAppPanel.getLeft();
+    }
+
+    /**
+     *
+     * @return AppPanel离Dock栏的距离
+     */
+    private int getAppPanelTop() {
+        if (mLayoutAppPanel == null) {
+            mLayoutAppPanel = (FrameLayout) mAttachLayer
+                    .findViewById(R.id.dock_panel_app_panel_layout);
+        }
+        return mLayoutAppPanel.getTop();
+    }
+
+
+    private int getWindowHeight() {
+        if (mAttachView != null) {
+            int[] location = new int[2] ;
+            mAttachView.getLocationOnScreen(location);
+            return location [1];  //在android 6.0, nexus7二代(flo), 横屏： windowHeight = 1091
+        } else {
+            return mWindowManager.getDefaultDisplay().getHeight();  //在android 6.0, nexus7二代(flo), 横屏： windowHeight = 1104
+        }
+    }
+
+    /**
+     * 判断是否正在拖动
+     */
+    private void setIsDraging(boolean isDraging) {
+        if (mDock != null) {
+            mDock.isAppIconDraging = isDraging;
+        }
+    }
+
+    private void removeFrameLayout() {
+        if (mWindowFrameLayout != null) {
+            mWindowFrameLayout.removeAllViews();
+            mWindowManager.removeView(mWindowFrameLayout);
+        }
+    }
+
+    private boolean appIconBackOriginWidth(View v) {
+        final LinearLayout.LayoutParams params = (LinearLayout.LayoutParams)v.getLayoutParams();
+        if (params.width != mOriginViewWidth) {
+            params.width = mOriginViewWidth;
+            v.setLayoutParams(params);
+            return true;
+        }
+        return false;
+    }
+
+    private boolean mIsBackingVisiable = false;
+    /**
+     * 所有appIcon返回到原来的位置，并且可见
+     */
+    private void allAppIconBackOriginWidthAndVisiable() {
+        mIsBackingVisiable = true;
+        final int count = mAttachView.getChildCount();
+        for (int i = 0; i < count; i++) {
+            View child = mAttachView.getChildAt(i);
+            appIconBackOriginWidth(child);
+            child.setVisibility(View.VISIBLE);
+        }
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/FastBlur.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/FastBlur.java
new file mode 100644
index 0000000..88477cc
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/FastBlur.java
@@ -0,0 +1,244 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import android.graphics.Bitmap;
+
+public class FastBlur {
+
+    public static Bitmap doBlur(Bitmap sentBitmap, int radius, boolean canReuseInBitmap) {
+
+        // Stack Blur v1.0 from
+        // http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html
+        //
+        // Java Author: Mario Klingemann <mario at quasimondo.com>
+        // http://incubator.quasimondo.com
+        // created Feburary 29, 2004
+        // Android port : Yahel Bouaziz <yahel at kayenko.com>
+        // http://www.kayenko.com
+        // ported april 5th, 2012
+
+        // This is a compromise between Gaussian Blur and Box blur
+        // It creates much better looking blurs than Box Blur, but is
+        // 7x faster than my Gaussian Blur implementation.
+        //
+        // I called it Stack Blur because this describes best how this
+        // filter works internally: it creates a kind of moving stack
+        // of colors whilst scanning through the image. Thereby it
+        // just has to add one new block of color to the right side
+        // of the stack and remove the leftmost color. The remaining
+        // colors on the topmost layer of the stack are either added on
+        // or reduced by one, depending on if they are on the right or
+        // on the left side of the stack.
+        //
+        // If you are using this algorithm in your code please add
+        // the following line:
+        //
+        // Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>
+
+        Bitmap bitmap;
+        if (canReuseInBitmap) {
+            bitmap = sentBitmap;
+        } else {
+            bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);
+        }
+
+        if (radius < 1) {
+            return (null);
+        }
+
+        int w = bitmap.getWidth();
+        int h = bitmap.getHeight();
+
+        int[] pix = new int[w * h];
+        bitmap.getPixels(pix, 0, w, 0, 0, w, h);
+
+        int wm = w - 1;
+        int hm = h - 1;
+        int wh = w * h;
+        int div = radius + radius + 1;
+
+        int r[] = new int[wh];
+        int g[] = new int[wh];
+        int b[] = new int[wh];
+        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
+        int vmin[] = new int[Math.max(w, h)];
+
+        int divsum = (div + 1) >> 1;
+        divsum *= divsum;
+        int dv[] = new int[256 * divsum];
+        for (i = 0; i < 256 * divsum; i++) {
+            dv[i] = (i / divsum);
+        }
+
+        yw = yi = 0;
+
+        int[][] stack = new int[div][3];
+        int stackpointer;
+        int stackstart;
+        int[] sir;
+        int rbs;
+        int r1 = radius + 1;
+        int routsum, goutsum, boutsum;
+        int rinsum, ginsum, binsum;
+
+        for (y = 0; y < h; y++) {
+            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
+            for (i = -radius; i <= radius; i++) {
+                p = pix[yi + Math.min(wm, Math.max(i, 0))];
+                sir = stack[i + radius];
+                sir[0] = (p & 0xff0000) >> 16;
+                sir[1] = (p & 0x00ff00) >> 8;
+                sir[2] = (p & 0x0000ff);
+                rbs = r1 - Math.abs(i);
+                rsum += sir[0] * rbs;
+                gsum += sir[1] * rbs;
+                bsum += sir[2] * rbs;
+                if (i > 0) {
+                    rinsum += sir[0];
+                    ginsum += sir[1];
+                    binsum += sir[2];
+                } else {
+                    routsum += sir[0];
+                    goutsum += sir[1];
+                    boutsum += sir[2];
+                }
+            }
+            stackpointer = radius;
+
+            for (x = 0; x < w; x++) {
+
+                r[yi] = dv[rsum];
+                g[yi] = dv[gsum];
+                b[yi] = dv[bsum];
+
+                rsum -= routsum;
+                gsum -= goutsum;
+                bsum -= boutsum;
+
+                stackstart = stackpointer - radius + div;
+                sir = stack[stackstart % div];
+
+                routsum -= sir[0];
+                goutsum -= sir[1];
+                boutsum -= sir[2];
+
+                if (y == 0) {
+                    vmin[x] = Math.min(x + radius + 1, wm);
+                }
+                p = pix[yw + vmin[x]];
+
+                sir[0] = (p & 0xff0000) >> 16;
+                sir[1] = (p & 0x00ff00) >> 8;
+                sir[2] = (p & 0x0000ff);
+
+                rinsum += sir[0];
+                ginsum += sir[1];
+                binsum += sir[2];
+
+                rsum += rinsum;
+                gsum += ginsum;
+                bsum += binsum;
+
+                stackpointer = (stackpointer + 1) % div;
+                sir = stack[(stackpointer) % div];
+
+                routsum += sir[0];
+                goutsum += sir[1];
+                boutsum += sir[2];
+
+                rinsum -= sir[0];
+                ginsum -= sir[1];
+                binsum -= sir[2];
+
+                yi++;
+            }
+            yw += w;
+        }
+        for (x = 0; x < w; x++) {
+            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
+            yp = -radius * w;
+            for (i = -radius; i <= radius; i++) {
+                yi = Math.max(0, yp) + x;
+
+                sir = stack[i + radius];
+
+                sir[0] = r[yi];
+                sir[1] = g[yi];
+                sir[2] = b[yi];
+
+                rbs = r1 - Math.abs(i);
+
+                rsum += r[yi] * rbs;
+                gsum += g[yi] * rbs;
+                bsum += b[yi] * rbs;
+
+                if (i > 0) {
+                    rinsum += sir[0];
+                    ginsum += sir[1];
+                    binsum += sir[2];
+                } else {
+                    routsum += sir[0];
+                    goutsum += sir[1];
+                    boutsum += sir[2];
+                }
+
+                if (i < hm) {
+                    yp += w;
+                }
+            }
+            yi = x;
+            stackpointer = radius;
+            for (y = 0; y < h; y++) {
+                // Preserve alpha channel: ( 0xff000000 & pix[yi] )
+                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];
+
+                rsum -= routsum;
+                gsum -= goutsum;
+                bsum -= boutsum;
+
+                stackstart = stackpointer - radius + div;
+                sir = stack[stackstart % div];
+
+                routsum -= sir[0];
+                goutsum -= sir[1];
+                boutsum -= sir[2];
+
+                if (x == 0) {
+                    vmin[y] = Math.min(y + r1, hm) * w;
+                }
+                p = x + vmin[y];
+
+                sir[0] = r[p];
+                sir[1] = g[p];
+                sir[2] = b[p];
+
+                rinsum += sir[0];
+                ginsum += sir[1];
+                binsum += sir[2];
+
+                rsum += rinsum;
+                gsum += ginsum;
+                bsum += binsum;
+
+                stackpointer = (stackpointer + 1) % div;
+                sir = stack[stackpointer];
+
+                routsum += sir[0];
+                goutsum += sir[1];
+                boutsum += sir[2];
+
+                rinsum -= sir[0];
+                ginsum -= sir[1];
+                binsum -= sir[2];
+
+                yi += w;
+            }
+        }
+
+        bitmap.setPixels(pix, 0, w, 0, 0, w, h);
+
+        return (bitmap);
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/MenuScrollLayout.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/MenuScrollLayout.java
new file mode 100644
index 0000000..5bd6898
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/MenuScrollLayout.java
@@ -0,0 +1,52 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+
+//******CHAOZHUO  chenyaohaung
+/**
+* 点击dock栏文件夹icon，如果已经打开多个文件夹，则会显示屏幕一半高度的layout
+*/
+public class MenuScrollLayout extends LinearLayout {
+    private Context mContext;
+
+    public MenuScrollLayout(Context context) {
+        this(context, null);
+    }
+
+    public MenuScrollLayout(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+
+    }
+
+    public MenuScrollLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        mContext = context;
+    }
+
+    WindowManager mWindowManager;
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        try {
+            if (mWindowManager == null) {
+                mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+            }
+            // 最大高度显示为屏幕内容高度的一半
+            int height = mWindowManager.getDefaultDisplay().getHeight();
+
+            // 设置控件高度不能超过屏幕高度一半（d.heightPixels / 2）（在此替换成自己需要的高度）
+            heightMeasureSpec = MeasureSpec
+                    .makeMeasureSpec(height / 2, MeasureSpec.AT_MOST);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        // 重新计算控件高、宽
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/MoreView.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/MoreView.java
new file mode 100644
index 0000000..1a8d610
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/MoreView.java
@@ -0,0 +1,152 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import com.android.systemui.R;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.os.RemoteException;
+import android.os.UserHandle;
+import android.service.notification.NotificationListenerService;
+import android.service.notification.StatusBarNotification;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import java.util.HashMap;
+
+// CHAOZHUO added by chenyaohuang
+/**
+ * dock栏右边菜单icon
+ */
+public class MoreView extends RelativeLayout {
+    private Context mContext;
+    public boolean mIsNotificationCenterOnShow = false;
+    private Dock mDock;
+    private ImageView mIcon;
+    private ImageView mDot;
+
+    public MoreView(Context context) {
+        this(context, null);
+    }
+
+    public MoreView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mContext = context;
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        mIcon = (ImageView) findViewById(R.id.dock_status_more_icon_img);
+        mDot = (ImageView) findViewById(R.id.dock_status_more_dot_img);
+        mDot.setVisibility(View.INVISIBLE);
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        // TODO Auto-generated method stub
+        super.onAttachedToWindow();
+        try {
+            mNotificationListener.registerAsSystemService(mContext,
+                    new ComponentName(mContext.getPackageName(), getClass().getCanonicalName()),
+                    UserHandle.USER_ALL);
+        } catch (RemoteException e) {
+            // Ignore.
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        // TODO Auto-generated method stub
+        super.onDetachedFromWindow();
+        try {
+            mNotificationListener.unregisterAsSystemService();
+        } catch (RemoteException e) {
+            // Ignore.
+        }
+    }
+
+    /**
+     * 有新的通知
+     */
+    public void setNewNotificationState() {
+        post(new Runnable() {
+            @Override
+            public void run() {
+                // TODO Auto-generated method stub
+                mDot.setVisibility(View.VISIBLE);
+            }
+        });
+    }
+
+    public void setNormalState() {
+        post(new Runnable() {
+            @Override
+            public void run() {
+                mDot.setVisibility(View.INVISIBLE);
+                mOriginNotificationMap = (HashMap<Integer, Integer>) mNotificationMap.clone();
+            }
+        });
+    }
+
+    public interface NotificationCenterListener {
+        void setIsOnShow(boolean isNotificationCenterOnShow);
+    }
+
+    public NotificationCenterListener mListener = new NotificationCenterListener() {
+
+        @Override
+        public void setIsOnShow(boolean isNotificationCenterOnShow) {
+            mIsNotificationCenterOnShow = isNotificationCenterOnShow;
+            if (mIsNotificationCenterOnShow) {
+                setNormalState();
+            }
+        }
+    };
+
+    private HashMap<Integer, Integer> mNotificationMap = new HashMap<Integer, Integer>();
+    private HashMap<Integer, Integer> mOriginNotificationMap = new HashMap<Integer, Integer>();
+    private final NotificationListenerService mNotificationListener =
+            new NotificationListenerService() {
+                public void onNotificationPosted(StatusBarNotification sbn) {
+                    int id = sbn.getId();
+                    if (!mNotificationMap.containsKey(id)) {
+                        mNotificationMap.put(sbn.getId(), sbn.getId());
+                        if (!getNotificationIsShow()) {
+                            setNewNotificationState();
+                        } else {
+                            mOriginNotificationMap = (HashMap<Integer, Integer>) mNotificationMap
+                                    .clone();
+                        }
+                    }
+                };
+
+                public void onNotificationRemoved(StatusBarNotification sbn) {
+                    int id = sbn.getId();
+                    if (mOriginNotificationMap.containsKey(id)) {
+                        mOriginNotificationMap.remove(id);
+                    }
+                    if (mNotificationMap.containsKey(id)) {
+                        mNotificationMap.remove(id);
+                    }
+                    if (mNotificationMap.size() <= mOriginNotificationMap.size()) {
+                        setNormalState();
+                    }
+                };
+            };
+
+    public void setDock(Dock dock) {
+        mDock = dock;
+    }
+
+    public boolean getNotificationIsShow() {
+        // if (mDock != null) {
+        //     return mDock.mNotificationPanel.mOnShow;
+        // } else {
+            return mIsNotificationCenterOnShow;
+        // }
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/NotificationsContainer.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/NotificationsContainer.java
new file mode 100644
index 0000000..aa3fd5b
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/NotificationsContainer.java
@@ -0,0 +1,721 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import java.util.ArrayList;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.UserHandle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewTreeObserver;
+import android.view.View.OnClickListener;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.view.animation.TranslateAnimation;
+import android.widget.LinearLayout;
+
+import com.android.systemui.R;
+import com.android.systemui.SwipeHelper;
+import com.android.systemui.statusbar.ExpandableNotificationRow;
+import com.android.systemui.statusbar.ExpandableView;
+import com.android.systemui.statusbar.StackScrollerDecorView;
+import com.android.systemui.statusbar.phone.PhoneStatusBar;
+import com.android.systemui.statusbar.stack.AmbientState;
+import com.android.systemui.statusbar.stack.AnimationFilter;
+import com.android.systemui.statusbar.stack.StackStateAnimator;
+
+public class NotificationsContainer extends LinearLayout implements OnClickListener,
+        SwipeHelper.Callback {
+    private static final String TAG = "NotificationsListView";
+
+    private Context mContext;
+
+    // private View mEmptyView;
+    private SwipeHelper mSwipeHelper;
+    private SwipeHelper.LongPressListener mLongPressListener;
+
+    public NotificationsContainer(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mContext = context;
+        mSwipeHelper = new SwipeHelper(SwipeHelper.X, this, getContext());
+    }
+
+    public void init() {
+        mSwipeHelper.setLongPressListener(mLongPressListener);
+        // mEmptyView = findViewById(R.id.no_notifications);
+    }
+
+    public void setLongPressListener(SwipeHelper.LongPressListener listener) {
+        mSwipeHelper.setLongPressListener(listener);
+        mLongPressListener = listener;
+    }
+
+    public void removeLongPressCallback() {
+        mSwipeHelper.removeLongPressCallback();
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        float densityScale = getResources().getDisplayMetrics().density;
+        mSwipeHelper.setDensityScale(densityScale);
+        float pagingTouchSlop = ViewConfiguration.get(getContext()).getScaledPagingTouchSlop();
+        mSwipeHelper.setPagingTouchSlop(pagingTouchSlop);
+        // initView(getContext());
+    }
+
+    public void dismissViewAnimated(View child, Runnable endRunnable, int delay, long duration) {
+        child.setClipBounds(null);
+        mSwipeHelper.dismissChild(child, 0, endRunnable, delay, true, duration);
+    }
+
+    private boolean mSwipingInProgress;
+    private boolean mDelegateToScrollView;
+
+    @Override
+    public boolean onTouchEvent(MotionEvent ev) {
+        mSwipeHelper.onTouchEvent(ev);
+        return super.onTouchEvent(ev);
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        boolean swipeWantsIt = false;
+        swipeWantsIt = mSwipeHelper.onInterceptTouchEvent(ev);
+        return swipeWantsIt || super.onInterceptTouchEvent(ev);
+
+    }
+
+    private void handleEmptySpaceClick(MotionEvent ev) {
+        /*
+         * switch (ev.getActionMasked()) { case MotionEvent.ACTION_MOVE: if
+         * (mTouchIsClick && (Math.abs(ev.getY() - mInitialTouchY) > mTouchSlop
+         * || Math.abs(ev.getX() - mInitialTouchX) > mTouchSlop )) {
+         * mTouchIsClick = false; } break; case MotionEvent.ACTION_UP: if
+         * (mPhoneStatusBar.getBarState() != StatusBarState.KEYGUARD &&
+         * mTouchIsClick && isBelowLastNotification(mInitialTouchX,
+         * mInitialTouchY)) {
+         * mOnEmptySpaceClickListener.onEmptySpaceClicked(mInitialTouchX,
+         * mInitialTouchY); } break; }
+         */
+    }
+
+    private void initDownStates(MotionEvent ev) {
+        /*
+         * if (ev.getAction() == MotionEvent.ACTION_DOWN) {
+         * mExpandedInThisMotion = false; mOnlyScrollingInThisMotion =
+         * !mScroller.isFinished(); mDisallowScrollingInThisMotion = false;
+         * mTouchIsClick = true; mInitialTouchX = ev.getX(); mInitialTouchY =
+         * ev.getY(); }
+         */
+    }
+
+    // ************************************************
+    @Override
+    public void onClick(View v) {
+    }
+
+    public boolean canChildBeDismissed(View v) {
+        final View veto = v.findViewById(R.id.veto);
+        return (veto != null && veto.getVisibility() != View.GONE);
+    }
+
+    public void setEmptyView(boolean show) {
+        // mEmptyView.setVisibility(show ? View.VISIBLE : View.GONE);
+    }
+
+    Handler mHandler = new Handler(Looper.getMainLooper()) {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+            }
+        }
+    };
+
+    public void startActivity(Intent intent) {
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
+        mContext.startActivityAsUser(intent, new UserHandle(UserHandle.USER_CURRENT));
+    }
+
+    // ************************************************
+    private PhoneStatusBar mPhoneStatusBar;
+
+    public void setPhoneStatusBar(PhoneStatusBar phoneStatusBar) {
+        this.mPhoneStatusBar = phoneStatusBar;
+    }
+
+    @Override
+    public View getChildAtPosition(MotionEvent ev) {
+        return getChildAtPosition(ev.getX(), ev.getY());
+    }
+
+    public ExpandableView getChildAtPosition(float touchX, float touchY) {
+        // find the view under the pointer, accounting for GONE views
+        final int count = getChildCount();
+        for (int childIdx = 0; childIdx < count; childIdx++) {
+            ExpandableView slidingChild = (ExpandableView) getChildAt(childIdx);
+            if (slidingChild.getVisibility() == GONE
+                    || slidingChild instanceof StackScrollerDecorView
+            /* || slidingChild == mSpeedBumpView */) {
+                continue;
+            }
+            float childTop = slidingChild.getTranslationY();
+            float top = slidingChild.getY();
+            float bottom = slidingChild.getY() + slidingChild.getHeight();
+
+            float left = slidingChild.getX();// 0;
+            float right = slidingChild.getX() + getWidth();
+
+            if (touchY >= top && touchY <= bottom && touchX >= left && touchX <= right) {
+                return slidingChild;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public View getChildContentView(View v) {
+        return v;
+    }
+
+    @Override
+    public boolean isAntiFalsingNeeded() {
+        return false;
+    }
+
+    @Override
+    public void onBeginDrag(View v) {
+        setSwipingInProgress(true);
+        mAmbientState.onBeginDrag(v);
+        if (mAnimationsEnabled) {
+            mDragAnimPendingChildren.add(v);
+            mNeedsAnimation = true;
+        }
+        requestChildrenUpdate();
+
+    }
+
+    private boolean mChildrenUpdateRequested;
+    private void requestChildrenUpdate() {
+        if (!mChildrenUpdateRequested) {
+            getViewTreeObserver().addOnPreDrawListener(mChildrenUpdater);
+            mChildrenUpdateRequested = true;
+            invalidate();
+        }
+    }
+
+
+    private ViewTreeObserver.OnPreDrawListener mChildrenUpdater = new ViewTreeObserver.OnPreDrawListener() {
+        @Override
+        public boolean onPreDraw() {
+            //updateChildren();
+            mChildrenUpdateRequested = false;
+            getViewTreeObserver().removeOnPreDrawListener(this);
+            return true;
+        }
+    };
+    private ArrayList<View> mSwipedOutViews = new ArrayList<View>();
+    private ArrayList<View> mDragAnimPendingChildren = new ArrayList<View>();
+    private AmbientState mAmbientState = new AmbientState();
+
+    private boolean mAnimationsEnabled;
+    private boolean mNeedsAnimation;
+
+    @Override
+    public void onViewRemoved(View child) {
+        super.onViewRemoved(child);
+//        final Animation upAnim = new TranslateAnimation(Animation.ABSOLUTE, 0, Animation.ABSOLUTE, 0, Animation.ABSOLUTE, vertShift, Animation.ABSOLUTE, 0);
+//        upAnim.setDuration(300);
+//        for (View child : animatedChildrenList) {
+//            child.startAnimation(upAnim);
+//        }
+        /*mStackScrollAlgorithm.notifyChildrenChanged(this);
+
+        ((ExpandableView) child).setOnHeightChangedListener(null);
+        mCurrentStackScrollState.removeViewStateForView(child);
+        updateScrollStateForRemovedChild(child);
+        boolean animationGenerated = generateRemoveAnimation(child);
+        if (animationGenerated && !mSwipedOutViews.contains(child)) {
+            // Add this view to an overlay in order to ensure that it will still be temporary
+            // drawn when removed
+            getOverlay().add(child);
+        }*/
+        //updateAnimationState(false, child);
+
+        // Make sure the clipRect we might have set is removed
+        child.setClipBounds(null);
+    }
+
+    private ArrayList<View> mChildrenToAddAnimated = new ArrayList<View>();
+    private ArrayList<View> mChildrenToRemoveAnimated = new ArrayList<View>();
+    private boolean generateRemoveAnimation(View child) {
+        if (mAnimationsEnabled) {
+            if (!mChildrenToAddAnimated.contains(child)) {
+                // Generate Animations
+                mChildrenToRemoveAnimated.add(child);
+                mNeedsAnimation = true;
+                return true;
+            } else {
+                mChildrenToAddAnimated.remove(child);
+                return false;
+            }
+        }
+        return false;
+    }
+
+    public void generateAddAnimation(View child, boolean fromMoreCard) {
+        if (mAnimationsEnabled) {
+            // Generate Animations
+            mChildrenToAddAnimated.add(child);
+            mNeedsAnimation = true;
+        }
+    }
+
+    private void startAnimationToState() {
+/*        if (mNeedsAnimation) {
+            generateChildHierarchyEvents();
+            mNeedsAnimation = false;
+        }
+        if (!mAnimationEvents.isEmpty() || isCurrentlyAnimating()) {
+            mStateAnimator.startAnimationForEvents(mAnimationEvents, mCurrentStackScrollState,
+                    mGoToFullShadeDelay);
+            mAnimationEvents.clear();
+        } else {
+            applyCurrentState();
+        }
+        mGoToFullShadeDelay = 0;*/
+    }
+
+    @Override
+    public void onViewAdded(View child) {
+        super.onViewAdded(child);
+        //mStackScrollAlgorithm.notifyChildrenChanged(this);
+        //((ExpandableView) child).setOnHeightChangedListener(this);
+        generateAddAnimation(child, false /* fromMoreCard */);
+        updateAnimationState(child);
+    }
+
+    @Override
+    public void onChildDismissed(View v) {
+        final View veto = v.findViewById(R.id.veto);
+        if (veto != null && veto.getVisibility() != View.GONE) {
+            veto.performClick();
+        }
+        setSwipingInProgress(false);
+        if (mDragAnimPendingChildren.contains(v)) {
+            // We start the swipe and finish it in the same frame, we don't want
+            // any animation
+            // for the drag
+            mDragAnimPendingChildren.remove(v);
+        }
+        mSwipedOutViews.add(v);
+        mAmbientState.onDragFinished(v);
+    }
+
+    private void updateAnimationState(View child) {
+        updateAnimationState(mAnimationsEnabled, child);
+    }
+
+
+    private void updateAnimationState(boolean running, View child) {
+        if (child instanceof ExpandableNotificationRow) {
+            ExpandableNotificationRow row = (ExpandableNotificationRow) child;
+            row.setIconAnimationRunning(running);
+        }
+    }
+    @Override
+    public void onDragCancelled(View v) {
+        setSwipingInProgress(false);
+
+    }
+
+    private void setSwipingInProgress(boolean isSwiped) {
+        mSwipingInProgress = isSwiped;
+        if (isSwiped) {
+            requestDisallowInterceptTouchEvent(true);
+        }
+    }
+
+    @Override
+    public void onChildSnappedBack(View animView) {
+        /*
+         * mAmbientState.onDragFinished(animView); if
+         * (!mDragAnimPendingChildren.contains(animView)) { if
+         * (mAnimationsEnabled) { mSnappedBackChildren.add(animView);
+         * mNeedsAnimation = true; } requestChildrenUpdate(); } else { // We
+         * start the swipe and snap back in the same frame, we don't want any
+         * animation mDragAnimPendingChildren.remove(animView); }
+         */
+    }
+
+    @Override
+    public boolean updateSwipeProgress(View animView, boolean dismissable, float swipeProgress) {
+        return false;
+    }
+
+    @Override
+    public float getFalsingThresholdFactor() {
+        // return mPhoneStatusBar.isScreenOnComingFromTouch() ? 1.5f : 1.0f;
+        return 1.5f;
+    }
+
+/*    private void generateChildHierarchyEvents() {
+        generateChildRemovalEvents();
+        generateChildAdditionEvents();
+        generatePositionChangeEvents();
+        generateSnapBackEvents();
+        generateDragEvents();
+        generateTopPaddingEvent();
+        generateActivateEvent();
+        generateDimmedEvent();
+        generateHideSensitiveEvent();
+        generateDarkEvent();
+        generateGoToFullShadeEvent();
+        generateViewResizeEvent();
+        generateAnimateEverythingEvent();
+        mNeedsAnimation = false;
+    }
+
+    private void generateViewResizeEvent() {
+        if (mNeedViewResizeAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_VIEW_RESIZE));
+        }
+        mNeedViewResizeAnimation = false;
+    }
+
+    private void generateSnapBackEvents() {
+        for (View child : mSnappedBackChildren) {
+            mAnimationEvents.add(new AnimationEvent(child,
+                    AnimationEvent.ANIMATION_TYPE_SNAP_BACK));
+        }
+        mSnappedBackChildren.clear();
+    }
+
+    private void generateDragEvents() {
+        for (View child : mDragAnimPendingChildren) {
+            mAnimationEvents.add(new AnimationEvent(child,
+                    AnimationEvent.ANIMATION_TYPE_START_DRAG));
+        }
+        mDragAnimPendingChildren.clear();
+    }
+
+    private void generateChildRemovalEvents() {
+        for (View child : mChildrenToRemoveAnimated) {
+            boolean childWasSwipedOut = mSwipedOutViews.contains(child);
+            int animationType = childWasSwipedOut
+                    ? AnimationEvent.ANIMATION_TYPE_REMOVE_SWIPED_OUT
+                    : AnimationEvent.ANIMATION_TYPE_REMOVE;
+            AnimationEvent event = new AnimationEvent(child, animationType);
+
+            // we need to know the view after this one
+            event.viewAfterChangingView = getFirstChildBelowTranlsationY(child.getTranslationY());
+            mAnimationEvents.add(event);
+        }
+        mSwipedOutViews.clear();
+        mChildrenToRemoveAnimated.clear();
+    }
+
+    private void generatePositionChangeEvents() {
+        for (View child : mChildrenChangingPositions) {
+            mAnimationEvents.add(new AnimationEvent(child,
+                    AnimationEvent.ANIMATION_TYPE_CHANGE_POSITION));
+        }
+        mChildrenChangingPositions.clear();
+    }
+
+    private void generateChildAdditionEvents() {
+        for (View child : mChildrenToAddAnimated) {
+            if (mFromMoreCardAdditions.contains(child)) {
+                mAnimationEvents.add(new AnimationEvent(child,
+                        AnimationEvent.ANIMATION_TYPE_ADD,
+                        StackStateAnimator.ANIMATION_DURATION_STANDARD));
+            } else {
+                mAnimationEvents.add(new AnimationEvent(child,
+                        AnimationEvent.ANIMATION_TYPE_ADD));
+            }
+        }
+        mChildrenToAddAnimated.clear();
+        mFromMoreCardAdditions.clear();
+    }
+
+    private void generateTopPaddingEvent() {
+        if (mTopPaddingNeedsAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_TOP_PADDING_CHANGED));
+        }
+        mTopPaddingNeedsAnimation = false;
+    }
+
+    private void generateActivateEvent() {
+        if (mActivateNeedsAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_ACTIVATED_CHILD));
+        }
+        mActivateNeedsAnimation = false;
+    }
+
+    private void generateAnimateEverythingEvent() {
+        if (mEverythingNeedsAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_EVERYTHING));
+        }
+        mEverythingNeedsAnimation = false;
+    }
+
+    private void generateDimmedEvent() {
+        if (mDimmedNeedsAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_DIMMED));
+        }
+        mDimmedNeedsAnimation = false;
+    }
+
+    private void generateHideSensitiveEvent() {
+        if (mHideSensitiveNeedsAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_HIDE_SENSITIVE));
+        }
+        mHideSensitiveNeedsAnimation = false;
+    }
+
+    private void generateDarkEvent() {
+        if (mDarkNeedsAnimation) {
+            AnimationEvent ev = new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_DARK);
+            ev.darkAnimationOriginIndex = mDarkAnimationOriginIndex;
+            mAnimationEvents.add(ev);
+        }
+        mDarkNeedsAnimation = false;
+    }
+
+    private void generateGoToFullShadeEvent() {
+        if (mGoToFullShadeNeedsAnimation) {
+            mAnimationEvents.add(
+                    new AnimationEvent(null, AnimationEvent.ANIMATION_TYPE_GO_TO_FULL_SHADE));
+        }
+        mGoToFullShadeNeedsAnimation = false;
+    }*/
+
+    static class AnimationEvent {
+
+        static AnimationFilter[] FILTERS = new AnimationFilter[] {
+
+                // ANIMATION_TYPE_ADD
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateZ()
+                        .hasDelays(),
+
+                // ANIMATION_TYPE_REMOVE
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateZ()
+                        .hasDelays(),
+
+                // ANIMATION_TYPE_REMOVE_SWIPED_OUT
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateZ()
+                        .hasDelays(),
+
+                // ANIMATION_TYPE_TOP_PADDING_CHANGED
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateDimmed()
+                        .animateScale()
+                        .animateZ(),
+
+                // ANIMATION_TYPE_START_DRAG
+                new AnimationFilter()
+                        .animateAlpha(),
+
+                // ANIMATION_TYPE_SNAP_BACK
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight(),
+
+                // ANIMATION_TYPE_ACTIVATED_CHILD
+                new AnimationFilter()
+                        .animateScale()
+                        .animateAlpha(),
+
+                // ANIMATION_TYPE_DIMMED
+                new AnimationFilter()
+                        .animateY()
+                        .animateScale()
+                        .animateDimmed(),
+
+                // ANIMATION_TYPE_CHANGE_POSITION
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateZ(),
+
+                // ANIMATION_TYPE_DARK
+                new AnimationFilter()
+                        .animateDark()
+                        .hasDelays(),
+
+                // ANIMATION_TYPE_GO_TO_FULL_SHADE
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateDimmed()
+                        .animateScale()
+                        .animateZ()
+                        .hasDelays(),
+
+                // ANIMATION_TYPE_HIDE_SENSITIVE
+                new AnimationFilter()
+                        .animateHideSensitive(),
+
+                // ANIMATION_TYPE_VIEW_RESIZE
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateZ(),
+
+                // ANIMATION_TYPE_EVERYTHING
+                new AnimationFilter()
+                        .animateAlpha()
+                        .animateDark()
+                        .animateScale()
+                        .animateDimmed()
+                        .animateHideSensitive()
+                        .animateHeight()
+                        .animateTopInset()
+                        .animateY()
+                        .animateZ(),
+        };
+
+        static int[] LENGTHS = new int[] {
+
+                // ANIMATION_TYPE_ADD
+                StackStateAnimator.ANIMATION_DURATION_APPEAR_DISAPPEAR,
+
+                // ANIMATION_TYPE_REMOVE
+                StackStateAnimator.ANIMATION_DURATION_APPEAR_DISAPPEAR,
+
+                // ANIMATION_TYPE_REMOVE_SWIPED_OUT
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_TOP_PADDING_CHANGED
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_START_DRAG
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_SNAP_BACK
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_ACTIVATED_CHILD
+                StackStateAnimator.ANIMATION_DURATION_DIMMED_ACTIVATED,
+
+                // ANIMATION_TYPE_DIMMED
+                StackStateAnimator.ANIMATION_DURATION_DIMMED_ACTIVATED,
+
+                // ANIMATION_TYPE_CHANGE_POSITION
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_DARK
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_GO_TO_FULL_SHADE
+                StackStateAnimator.ANIMATION_DURATION_GO_TO_FULL_SHADE,
+
+                // ANIMATION_TYPE_HIDE_SENSITIVE
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_VIEW_RESIZE
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+
+                // ANIMATION_TYPE_EVERYTHING
+                StackStateAnimator.ANIMATION_DURATION_STANDARD,
+        };
+
+        static final int ANIMATION_TYPE_ADD = 0;
+        static final int ANIMATION_TYPE_REMOVE = 1;
+        static final int ANIMATION_TYPE_REMOVE_SWIPED_OUT = 2;
+        static final int ANIMATION_TYPE_TOP_PADDING_CHANGED = 3;
+        static final int ANIMATION_TYPE_START_DRAG = 4;
+        static final int ANIMATION_TYPE_SNAP_BACK = 5;
+        static final int ANIMATION_TYPE_ACTIVATED_CHILD = 6;
+        static final int ANIMATION_TYPE_DIMMED = 7;
+        static final int ANIMATION_TYPE_CHANGE_POSITION = 8;
+        static final int ANIMATION_TYPE_DARK = 9;
+        static final int ANIMATION_TYPE_GO_TO_FULL_SHADE = 10;
+        static final int ANIMATION_TYPE_HIDE_SENSITIVE = 11;
+        static final int ANIMATION_TYPE_VIEW_RESIZE = 12;
+        static final int ANIMATION_TYPE_EVERYTHING = 13;
+
+        static final int DARK_ANIMATION_ORIGIN_INDEX_ABOVE = -1;
+        static final int DARK_ANIMATION_ORIGIN_INDEX_BELOW = -2;
+
+        final long eventStartTime;
+        final View changingView;
+        final int animationType;
+        final AnimationFilter filter;
+        final long length;
+        View viewAfterChangingView;
+        int darkAnimationOriginIndex;
+
+        AnimationEvent(View view, int type) {
+            this(view, type, LENGTHS[type]);
+        }
+
+        AnimationEvent(View view, int type, long length) {
+            eventStartTime = AnimationUtils.currentAnimationTimeMillis();
+            changingView = view;
+            animationType = type;
+            filter = FILTERS[type];
+            this.length = length;
+        }
+
+        /**
+         * Combines the length of several animation events into a single value.
+         *
+         * @param events The events of the lengths to combine.
+         * @return The combined length. Depending on the event types, this might be the maximum of
+         *         all events or the length of a specific event.
+         */
+        static long combineLength(ArrayList<AnimationEvent> events) {
+            long length = 0;
+            int size = events.size();
+            for (int i = 0; i < size; i++) {
+                AnimationEvent event = events.get(i);
+                length = Math.max(length, event.length);
+                if (event.animationType == ANIMATION_TYPE_GO_TO_FULL_SHADE) {
+                    return event.length;
+                }
+            }
+            return length;
+        }
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/PinedAppSettings.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/PinedAppSettings.java
new file mode 100644
index 0000000..03e215f
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/PinedAppSettings.java
@@ -0,0 +1,92 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.util.ArrayList;
+
+import android.content.Context;
+
+public class PinedAppSettings {
+    private static final String SETTINGS_FILE = "pined_app_settings";
+    private static PinedAppSettings mInstance;
+    private File mSettingsFile = null;
+
+    public static PinedAppSettings getInstance(Context c) {
+        if (mInstance == null)
+            mInstance = new PinedAppSettings(c);
+        return mInstance;
+    }
+
+    private Context mContext;
+
+    PinedAppSettings(Context c) {
+        mContext = c;
+    }
+
+    public ArrayList<String> loadPinedApp() {
+        ArrayList<String> pinedApp = new ArrayList<String>();
+        File dir = mContext.getFilesDir();
+        if (mSettingsFile == null)
+            mSettingsFile = new File(dir, SETTINGS_FILE);
+        if (!mSettingsFile.exists()) {
+            pinedApp.add("com.chaozhuo.browser");
+            pinedApp.add("com.chaozhuo.browser.x86");
+            pinedApp.add("com.chaozhuo.filemanager");
+            pinedApp.add("com.android.email");
+            pinedApp.add("cn.wps.moffice_eng");
+            pinedApp.add("com.android.settings");
+        } else {
+            FileInputStream fis = null;
+            BufferedReader reader = null;
+            try {
+                fis = new FileInputStream(mSettingsFile);
+                reader = new BufferedReader(new InputStreamReader(fis));
+                String line = reader.readLine();
+                while (line != null) {
+                    pinedApp.add(line);
+                    line = reader.readLine();
+                }
+            } catch (FileNotFoundException ex) {
+            } catch (IOException ex) {
+            } finally {
+                try {
+                    reader.close();
+                    fis.close();
+                } catch (IOException ex) {
+                }
+            }
+        }
+        return pinedApp;
+    }
+
+    public void storePinedApp(ArrayList<String> list) {
+        FileOutputStream out = null;
+        BufferedWriter writer = null;
+        try {
+            out = new FileOutputStream(mSettingsFile);
+            writer = new BufferedWriter(new OutputStreamWriter(out));
+            for (String line : list) {
+                writer.write(line);
+                writer.newLine();
+            }
+        } catch (FileNotFoundException ex) {
+        } catch (IOException ex) {
+        } finally {
+            try {
+                writer.close();
+                out.close();
+            } catch (IOException ex) {
+            }
+        }
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskDescription.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskDescription.java
new file mode 100644
index 0000000..3196132
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskDescription.java
@@ -0,0 +1,98 @@
+//CHAOZHUO START
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.dock;
+
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+
+public final class TaskDescription {
+    final ResolveInfo resolveInfo;
+    final int taskId; // application task id for curating apps
+    final int persistentTaskId; // persistent id
+    final Intent intent; // launch intent for application
+    final String packageName; // used to override animations (see onClick())
+    final CharSequence description;
+    final int stackId;
+    private Drawable mThumbnail; // generated by Activity.onCreateThumbnail()
+    private Drawable mIcon; // application package icon
+    private CharSequence mLabel; // application package label
+    private boolean mLoaded;
+
+    public TaskDescription(int _taskId, int _persistentTaskId, int _stackId,
+            ResolveInfo _resolveInfo, Intent _intent,
+            String _packageName, CharSequence _description) {
+        resolveInfo = _resolveInfo;
+        intent = _intent;
+        taskId = _taskId;
+        stackId = _stackId;
+        persistentTaskId = _persistentTaskId;
+
+        description = _description;
+        packageName = _packageName;
+    }
+
+    public TaskDescription() {
+        resolveInfo = null;
+        intent = null;
+        taskId = -1;
+        persistentTaskId = -1;
+        stackId = -1;
+        description = null;
+        packageName = null;
+    }
+
+    public void setLoaded(boolean loaded) {
+        mLoaded = loaded;
+    }
+
+    public boolean isLoaded() {
+        return mLoaded;
+    }
+
+    public boolean isNull() {
+        return resolveInfo == null;
+    }
+
+    // mark all these as locked?
+    public CharSequence getLabel() {
+        return mLabel;
+    }
+
+    public void setLabel(CharSequence label) {
+        mLabel = label;
+    }
+
+    public Drawable getIcon() {
+        return mIcon;
+    }
+
+    public void setIcon(Drawable icon) {
+        mIcon = icon;
+    }
+
+    public void setThumbnail(Drawable thumbnail) {
+        mThumbnail = thumbnail;
+    }
+
+    public Drawable getThumbnail() {
+        return mThumbnail;
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskListPanel.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskListPanel.java
new file mode 100644
index 0000000..9fab078
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskListPanel.java
@@ -0,0 +1,301 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import com.android.systemui.R;
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.RecentTaskInfo;
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.graphics.PixelFormat;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.UserHandle;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ScrollView;
+import android.widget.TextView;
+
+import java.util.List;
+
+public class TaskListPanel extends LinearLayout implements View.OnClickListener {
+
+    protected int[] mItemsDrawId;
+    protected ListView mListView;
+
+    private WindowManager mWindowManager;
+    private ActivityManager mActivityManager;
+
+    private Context mContext;
+
+    private LayoutInflater mInflater;
+
+    private int mX;
+    private int mY;
+
+    private boolean mOnShow = false;
+
+    final int[] mTasks;
+
+    OnTaskListWindowListener mListener;
+
+    public TaskListPanel(Context context, int[] tasks, OnTaskListWindowListener listener) {
+        super(context);
+        mListener = listener;
+        mTasks = tasks;
+        init(context);
+    }
+
+    interface OnTaskListWindowListener {
+        public void onWindowClosed(TaskListPanel window);
+    }
+
+    public void setWindowListener(OnTaskListWindowListener listener) {
+        mListener = listener;
+    }
+
+    private void init(Context context) {
+        List<RecentTaskInfo> recentTasks = null;
+        mContext = context;
+        LinearLayout.LayoutParams params =
+                new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
+                        LinearLayout.LayoutParams.WRAP_CONTENT);
+        this.setOnHoverListener(mHover);
+        this.setLayoutParams(params);
+        this.setOrientation(LinearLayout.VERTICAL);
+        this.setBackground(mContext.getResources().getDrawable(R.drawable.dock_context_menu_bk));
+
+        if (mWindowManager == null) {
+            mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        }
+        if (mActivityManager == null) {
+            mActivityManager = (ActivityManager) mContext
+                    .getSystemService(Context.ACTIVITY_SERVICE);
+        }
+        try {
+            recentTasks = ActivityManagerNative.getDefault().getRecentTasks(
+                    mTasks,
+                    ActivityManager.RECENT_IGNORE_UNAVAILABLE
+                            | ActivityManager.RECENT_WITH_EXCLUDED,
+                    UserHandle.CURRENT.getIdentifier());
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        mInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        MenuScrollLayout layoutBase = (MenuScrollLayout) mInflater.inflate(
+                R.layout.dock_scroll_menu, null);
+        final ScrollView mScrollView = (ScrollView) layoutBase
+                .findViewById(R.id.dock_scroll_menu_scrollview);
+        mItemViews = (LinearLayout) layoutBase.findViewById(R.id.dock_scroll_menu_contain_layout);
+
+        for (RecentTaskInfo task : recentTasks) {
+            String title = null;
+            if (task.description != null) {
+                title = task.description.toString();
+            } else {
+                Intent intent = new Intent(task.baseIntent);
+                final PackageManager pm = mContext.getPackageManager();
+                intent.setFlags((intent.getFlags() & ~Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)
+                        | Intent.FLAG_ACTIVITY_NEW_TASK);
+                final ResolveInfo resolveInfo = pm.resolveActivity(intent, 0);
+                if (resolveInfo != null) {
+                    final ActivityInfo info = resolveInfo.activityInfo;
+                    title = info.loadLabel(pm).toString();
+                }
+            }
+            addItemView(title, task.id);
+        }
+
+        this.addView(layoutBase);
+    }
+
+    LinearLayout mItemViews;
+
+    public void addItemView(String text, int tag) {
+        View item = mInflater.inflate(R.layout.context_menu_item, null);
+        TextView tv = (TextView) item.findViewById(R.id.menu_item);
+        item.setOnClickListener(this);
+        item.setOnHoverListener(mItemHover);
+        item.setTag(tag);
+        tv.setText(text);
+        mItemViews.addView(item);
+    }
+
+    private void setItemHoverd(View item, boolean hover) {
+        TextView tv = (TextView) item.findViewById(R.id.menu_item);
+        if (hover) {
+            item.setBackgroundColor(mContext.getResources().getColor(
+                    R.color.context_item_bg_color_hover));
+            tv.setTextColor(mContext.getResources().getColor(
+                    R.color.context_item_text_color_hover));
+        } else {
+            item.setBackgroundColor(mContext.getResources()
+                    .getColor(R.color.context_item_bg_color_nomal));
+            tv.setTextColor(mContext.getResources().getColor(
+                    R.color.context_item_text_color_nomal));
+        }
+    }
+
+    OnHoverListener mItemHover = new OnHoverListener() {
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            int what = event.getAction();
+            switch (what) {
+                case MotionEvent.ACTION_HOVER_ENTER:
+                    setItemHoverd(v, true);
+                    break;
+                case MotionEvent.ACTION_HOVER_MOVE:
+                    break;
+                case MotionEvent.ACTION_HOVER_EXIT:
+                    setItemHoverd(v, false);
+                    break;
+            }
+            return false;
+        }
+    };
+
+    private int mCurrentMouseState = 0;
+    OnHoverListener mHover = new OnHoverListener() {
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            int what = event.getAction();
+            switch (what) {
+                case MotionEvent.ACTION_HOVER_ENTER:
+                    mCurrentMouseState = 1;
+                    break;
+                case MotionEvent.ACTION_HOVER_MOVE:
+                    mCurrentMouseState = 2;
+//                    if (isOutOfBounds(event)) {
+//                        disMiss();
+//                    }
+                    break;
+                case MotionEvent.ACTION_HOVER_EXIT:
+                    mCurrentMouseState = 0;
+                    break;
+            }
+            return false;
+        }
+    };
+
+    public void show() {
+        if (mOnShow == false) {
+            addWindow(mContext);
+        }
+    }
+
+    public void showAtPos(int x, int y) {
+        mX = x;
+        mY = y;
+    }
+
+    public void showAtView(View v) {
+        int[] location = new int[2];
+        v.getLocationOnScreen(location);
+        mY = location[1];
+        mX = location[0] + (v.getRight() - v.getLeft()) / 2;
+        show();
+    }
+
+    public void cancelDisMiss() {
+        mHandler.removeMessages(DELLAY_DISMISS_WINDOW);
+    }
+
+    public void disMiss() {
+        if (mOnShow == true) {
+            removeWindow();
+        }
+    }
+
+    private static int DELLAY_DISMISS_WINDOW = 1;
+
+    public void delayDisMiss(int millis) {
+        mHandler.sendMessageDelayed(mHandler.obtainMessage(DELLAY_DISMISS_WINDOW), millis);
+    }
+
+    Handler mHandler = new Handler(Looper.getMainLooper()) {
+        public void handleMessage(Message msg) {
+            if (msg.what == DELLAY_DISMISS_WINDOW) {
+                if (mCurrentMouseState == 0)
+                    disMiss();
+            }
+        }
+    };
+
+    private void addWindow(Context context) {
+        int screenWidth = mWindowManager.getDefaultDisplay().getWidth();
+        int screenHeight = mWindowManager.getDefaultDisplay().getHeight();
+        WindowManager.LayoutParams layoutParams = null;
+        if (layoutParams == null) {
+            layoutParams = new WindowManager.LayoutParams();
+
+            this.measure(screenWidth, screenHeight);
+            layoutParams.type = WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
+            layoutParams.format = PixelFormat.RGBA_8888;
+            layoutParams.gravity = Gravity.LEFT | Gravity.TOP;
+            layoutParams.width = this.getMeasuredWidth();
+            layoutParams.height = this.getMeasuredHeight();
+
+            layoutParams.x = mX - layoutParams.width / 2;
+            layoutParams.y = mY;// - layoutParams.height;
+        }
+        mWindowManager.addView(this, layoutParams);
+        mOnShow = true;
+    }
+
+    private void removeWindow() {
+        mWindowManager.removeView(this);
+        mOnShow = false;
+        if (mListener != null)
+            mListener.onWindowClosed(this);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+
+        if (event.getAction() == MotionEvent.ACTION_DOWN
+                && isOutOfBounds(event)) {
+            disMiss();
+        }
+        return true;
+    }
+
+    private boolean isOutOfBounds(MotionEvent event) {
+        int padding = 20;
+        int[] location = new int[2];
+        this.getLocationOnScreen(location);
+        int height = this.getMeasuredHeight();
+        int width = this.getMeasuredWidth();
+        if (event.getRawX() > location[0] + width || event.getRawX() < location[0]) {
+            return true;
+        }
+        float xxx = event.getRawY();
+        if (event.getRawY() > location[1] + height + padding || event.getRawY() < location[1]) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void onClick(View v) {
+        Integer stackId = (Integer) v.getTag();
+        try {
+            ActivityManagerNative.getDefault().moveTaskToFront(stackId, 0, null);
+        } catch (Exception e) {
+        }
+        disMiss();
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskPreviewPanel.java b/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskPreviewPanel.java
new file mode 100644
index 0000000..adb8ecd
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/dock/TaskPreviewPanel.java
@@ -0,0 +1,260 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.dock;
+
+import java.util.ArrayList;
+
+import android.app.ActivityManager;
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.graphics.drawable.BitmapDrawable;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.android.systemui.R;
+
+public class TaskPreviewPanel extends LinearLayout implements View.OnClickListener {
+    private static final String TAG = "TaskPreviewPanel";
+    private static final boolean DEBUG = false;
+
+    protected int[] mItemsDrawId;
+    protected ListView mListView;
+
+    private WindowManager mWindowManager;  
+    private ActivityManager mActivityManager;
+
+    private Context mContext;
+
+    private LayoutInflater mInflater;
+    
+    private int mX;
+    private int mY;
+    
+    private boolean mOnShow = false;
+    
+    ArrayList<TaskDescription> mTasks;
+    private String mPackageName;
+    
+    OnTaskThumbnailListener mThumbnailListener ;
+    
+    public TaskPreviewPanel(Context context,ArrayList<TaskDescription> tasks,String packageName,OnTaskThumbnailListener listener) {
+        super(context);
+        mThumbnailListener = listener;
+        mTasks = tasks;
+        mPackageName = packageName;
+        init(context);
+    }
+
+    public String getPackageName() {
+        return mPackageName;
+    }
+    
+    interface OnTaskThumbnailListener {
+        public void onTaskThumbnailClosed(TaskPreviewPanel window);
+    }
+    
+    public void setWindowListener(OnTaskThumbnailListener listener) {
+        mThumbnailListener = listener;
+    }
+    
+    private void init(Context context) {
+        mContext = context;
+        LinearLayout.LayoutParams params =
+                new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
+        this.setOnHoverListener(mHover);
+        this.setLayoutParams(params);
+        this.setOrientation(LinearLayout.HORIZONTAL);
+        this.setBackground(mContext.getResources().getDrawable(R.drawable.dock_context_menu_bk));
+        if (mWindowManager == null) {
+            mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        }
+        if (mActivityManager == null) {
+            mActivityManager = (ActivityManager) mContext
+                    .getSystemService(Context.ACTIVITY_SERVICE);
+        }
+        
+        mInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        int index = 0;
+        for(TaskDescription task : mTasks) {
+            View itemView = mInflater.inflate(R.layout.task_preview_item, null);
+            TextView mTitleView = (TextView)itemView.findViewById(R.id.task_title);
+            mTitleView.setText(task.getLabel());
+            
+            ImageView imgIcon = (ImageView)itemView.findViewById(R.id.task_icon);
+            ImageView imgThumbnail  = (ImageView)itemView.findViewById(R.id.task_thumbnail);
+            
+            if (task.getIcon() == null) {
+                task.setIcon(task.resolveInfo.activityInfo.loadIcon(mContext.getPackageManager()));
+            }
+            //imgView.setBackground(task.resolveInfo.activityInfo.loadIcon(mContext.getPackageManager()));
+            imgIcon.setBackground(task.getIcon());
+            
+            if (task.getThumbnail() == null) {
+                ActivityManager.TaskThumbnail thumbnail = mActivityManager.getTaskThumbnail(task.taskId);
+                if (thumbnail != null)
+                    task.setThumbnail(new BitmapDrawable(mContext.getResources(), thumbnail.mainThumbnail));
+            }
+            imgThumbnail.setBackground(task.getThumbnail());
+            itemView.setOnClickListener(this);
+            itemView.setOnHoverListener(mHover);
+            itemView.setTag(index);
+            index = index + 1;
+            this.addView(itemView);
+        }
+    }
+    
+    private int mCurrentMouseState = 0;
+    OnHoverListener mHover = new OnHoverListener() {
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            int what = event.getAction();  
+            switch(what){  
+             case MotionEvent.ACTION_HOVER_ENTER:
+                 if (DEBUG) {
+                     Log.d(TAG,"test ACTION_HOVER_ENTER");
+                 }
+                 mCurrentMouseState = 1;
+                 break;
+             case MotionEvent.ACTION_HOVER_MOVE:
+                 mCurrentMouseState = 2;
+                 if (DEBUG) {
+                     Log.d(TAG,"test ACTION_HOVER_MOVE");
+                 }
+                 if (isOutOfBounds(event)) {
+                     if (DEBUG) {
+                         Log.d(TAG,"test ACTION_HOVER_MOVE outOfBounds");
+                     }
+                     disMiss();
+                 }
+                 break;
+             case MotionEvent.ACTION_HOVER_EXIT:
+                 if (DEBUG) {
+                     Log.d(TAG,"test ACTION_HOVER_EXIT");
+                 }
+                 mCurrentMouseState = 0;
+                 break;
+            }
+            return false;
+        }
+    };
+    
+    public void show() {
+        if (mOnShow == false) {
+            addWindow(mContext);
+        }
+    }
+    
+    public void showAtPos(int x,int y) {
+        mX = x;
+        mY = y;
+    }
+    
+    public void showAtView(View v) {
+        int[] location = new int[2];
+        v.getLocationOnScreen(location);
+        mY = location[1]; 
+        mX = location[0] + ( v.getRight() -v.getLeft())/2;
+        show();
+    }
+    
+    public void cancelDisMiss() {
+        mHandler.removeMessages(DELLAY_DISMISS_WINDOW);
+    }
+    
+    public void disMiss() {
+        if (mOnShow == true) {
+            removeWindow();
+        }
+    }
+    
+    private static int DELLAY_DISMISS_WINDOW = 1;
+    public void delayDisMiss(int millis) {
+        mHandler.sendMessageDelayed(mHandler.obtainMessage(DELLAY_DISMISS_WINDOW), millis);
+    }
+    
+    Handler mHandler = new Handler(Looper.getMainLooper()){
+        public void handleMessage(Message msg) {
+            if (msg.what == DELLAY_DISMISS_WINDOW) {
+                if (mCurrentMouseState == 0)
+                    disMiss();
+            }
+        }
+    };
+    
+    private void addWindow(Context context) {
+        int screenWidth = mWindowManager.getDefaultDisplay().getWidth();
+        int screenHeight = mWindowManager.getDefaultDisplay().getHeight();
+        WindowManager.LayoutParams layoutParams = null;
+        if (layoutParams == null) {
+            layoutParams = new WindowManager.LayoutParams();
+            
+            this.measure(screenWidth, screenHeight);
+            layoutParams.type = WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
+            layoutParams.format = PixelFormat.RGBA_8888;
+            layoutParams.gravity = Gravity.LEFT | Gravity.TOP;
+            layoutParams.width = this.getMeasuredWidth();
+            layoutParams.height = this.getMeasuredHeight();
+            
+            layoutParams.x = mX - layoutParams.width/2;
+            layoutParams.y = mY ;//- layoutParams.height;
+        }
+        mWindowManager.addView(this, layoutParams);
+        mOnShow = true;
+    }
+
+    private void removeWindow() {
+        mWindowManager.removeView(this);
+        mOnShow = false;
+        if (mThumbnailListener != null)
+            mThumbnailListener.onTaskThumbnailClosed(this);
+    }
+    
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        
+        if (event.getAction() == MotionEvent.ACTION_DOWN
+                && isOutOfBounds(event)) {
+            disMiss();
+        }
+        return true;
+    }
+    private boolean isOutOfBounds(MotionEvent event) {
+        int padding = 20;
+        int[] location = new int[2];
+        this.getLocationOnScreen(location);
+        int height = this.getMeasuredHeight();
+        int width = this.getMeasuredWidth();
+        if (event.getRawX() > location[0] + width || event.getRawX() < location[0]) {
+            return true;
+        }
+        float xxx = event.getRawY();
+        if (event.getRawY() > location[1] + height + padding || event.getRawY() < location[1]) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void onClick(View v) {
+        Integer index = (Integer)v.getTag();
+        TaskDescription task = mTasks.get(index);
+        try {
+            ActivityManagerNative.getDefault().setFocusedStack(task.stackId);
+        } catch (Exception e) {
+        }
+        disMiss();
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 8046eb5..29d8a08 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -48,6 +48,16 @@ import android.widget.ImageView;
 import android.widget.LinearLayout;
 
 import com.android.systemui.R;
+//CHAOZHUO START
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.hardware.smartpad.SmartpadManager;
+import com.android.systemui.statusbar.dock.Dock;
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 import com.android.systemui.statusbar.policy.DeadZone;
 import com.android.systemui.statusbar.policy.KeyButtonView;
 
@@ -194,7 +204,28 @@ public class NavigationBarView extends LinearLayout {
         if (root != null) {
             root.setDrawDuringWindowsAnimating(true);
         }
+//CHAOZHUO_START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(SmartpadManager.ACTION_SMARTPAD_STATE);
+            getContext().registerReceiver(mPenSwitchReceiver, filter);
+        }
+//CHAOZHUO END
+    }
+
+//CHAOZHUO START
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            try {
+                getContext().unregisterReceiver(mPenSwitchReceiver);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
     }
+//CHAOZHUO END
 
     public BarTransitions getBarTransitions() {
         return mBarTransitions;
@@ -208,7 +239,67 @@ public class NavigationBarView extends LinearLayout {
         mOnVerticalChangedListener = onVerticalChangedListener;
         notifyVerticalChangedListener(mVertical);
     }
+//CHAOZHUO START
+    private Dock mDock;
+    public void setDock(Dock dock) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mDock = dock;
+        }
+    }
+
+    private void initPenKeyboardIcon() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            SmartpadManager smartpadManager = (SmartpadManager) getContext().getSystemService(Context.SMARTPAD_SERVICE);
+            if (smartpadManager != null) {
+                int penKeyState = smartpadManager.getPenKeyState();
+                // boolean kbdPlugged = SmartpadManager.getKbdPlugged();
+                updatePenIconState(penKeyState);
+            }
+
+            getPenKeyButton().setOnClickListener(new View.OnClickListener() {
+                public void onClick(View v) {
+                    SmartpadManager smartpadManager = (SmartpadManager) getContext().getSystemService(Context.SMARTPAD_SERVICE);
+                    if (smartpadManager != null) {
+                        int penKeyState = smartpadManager.getPenKeyState();
+                        if (penKeyState == SmartpadManager.PEN_KEY_STATE_ON) {
+                            smartpadManager.setPenKeyState(SmartpadManager.PEN_KEY_STATE_OFF);
+                            updatePenIconState(SmartpadManager.PEN_KEY_STATE_OFF);
+                        } else {
+                            smartpadManager.setPenKeyState(SmartpadManager.PEN_KEY_STATE_ON);
+                            updatePenIconState(SmartpadManager.PEN_KEY_STATE_ON);
+                        }
+                    }
+                }
+            });
+        }
+    }
+
+    private void updatePenIconState(int penKeyState) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (penKeyState == SmartpadManager.PEN_KEY_STATE_ON) {
+                getPenKeyButton().setImageResource(R.drawable.ic_sys_pen);
+            } else {
+                getPenKeyButton().setImageResource(R.drawable.ic_sys_keyboard);
+            }
+        }
+    }
 
+    private final BroadcastReceiver mPenSwitchReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                String action = intent.getAction();
+                if (action.equals(SmartpadManager.ACTION_SMARTPAD_STATE)) {
+                    SmartpadManager smartpadManager = (SmartpadManager) getContext().getSystemService(Context.SMARTPAD_SERVICE);
+                    if (smartpadManager != null) {
+                        int penKeyState = smartpadManager.getPenKeyState();
+                        updatePenIconState(penKeyState);    
+                    }
+                }
+            }
+        }
+    };
+//CHAOZHUO END
     @Override
     public boolean onTouchEvent(MotionEvent event) {
         if (mTaskSwitchHelper.onTouchEvent(event)) {
@@ -222,7 +313,15 @@ public class NavigationBarView extends LinearLayout {
 
     @Override
     public boolean onInterceptTouchEvent(MotionEvent event) {
-        return mTaskSwitchHelper.onInterceptTouchEvent(event);
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON && mDock.isAppIconDraging) {
+            return false;
+        } else {
+//CHAOZHUO END
+            return mTaskSwitchHelper.onInterceptTouchEvent(event);
+//CHAOZHUO START
+        }
+//CHAOZHUO END
     }
 
     public void abortCurrentGesture() {
@@ -234,7 +333,28 @@ public class NavigationBarView extends LinearLayout {
     public View getCurrentView() {
         return mCurrentView;
     }
+//CHAOZHUO START
+    public View getRemoveWindowTip() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        return mCurrentView.findViewById(R.id.remove_window_tip);
+        }
+        return null;
+    }
+
+    public View getAllAppsButton() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        return mCurrentView.findViewById(R.id.all_apps);
+        }
+        return null;
+    }
 
+    private ImageView getPenKeyButton() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            return (ImageView) mCurrentView.findViewById(R.id.yeti_0);
+        }
+        return null;
+    }
+//CHAOZHUO END
     public View getRecentsButton() {
         return mCurrentView.findViewById(R.id.recent_apps);
     }
@@ -252,7 +372,13 @@ public class NavigationBarView extends LinearLayout {
     }
 
     public View getImeSwitchButton() {
-        return mCurrentView.findViewById(R.id.ime_switcher);
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            return mCurrentView.findViewById(R.id.yeti_1);
+        } else {
+            return mCurrentView.findViewById(R.id.ime_switcher);
+        }
+//CHAOZHUO END
     }
 
     private void getIcons(Resources res) {
@@ -301,7 +427,9 @@ public class NavigationBarView extends LinearLayout {
         ((ImageView)getRecentsButton()).setImageDrawable(mVertical ? mRecentLandIcon : mRecentIcon);
 
         final boolean showImeButton = ((hints & StatusBarManager.NAVIGATION_HINT_IME_SHOWN) != 0);
-        getImeSwitchButton().setVisibility(showImeButton ? View.VISIBLE : View.INVISIBLE);
+//CHAOZHUO START
+        getImeSwitchButton().setVisibility(showImeButton ? View.VISIBLE : (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? View.GONE : INVISIBLE));
+//CHAOZHUO END
         // Update menu button in case the IME state has changed.
         setMenuVisibility(mShowMenu, true);
 
@@ -346,6 +474,9 @@ public class NavigationBarView extends LinearLayout {
         getBackButton()   .setVisibility(disableBack       ? View.INVISIBLE : View.VISIBLE);
         getHomeButton()   .setVisibility(disableHome       ? View.INVISIBLE : View.VISIBLE);
         getRecentsButton().setVisibility(disableRecent     ? View.INVISIBLE : View.VISIBLE);
+//CHAOZHUO START
+        //FIXME zhishen disableAllApps?
+//CHAOZHUO END
     }
 
     private boolean inLockTask() {
@@ -447,12 +578,26 @@ public class NavigationBarView extends LinearLayout {
         mRotatedViews[Surface.ROTATION_90] = findViewById(R.id.rot90);
 
         mRotatedViews[Surface.ROTATION_270] = mRotatedViews[Surface.ROTATION_90];
-
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mRotatedViews[Surface.ROTATION_0].setBackgroundColor(Color.BLACK);
+        mRotatedViews[Surface.ROTATION_90].setBackgroundColor(Color.BLACK);
+        }
+//CHAOZHUO END
         mCurrentView = mRotatedViews[Surface.ROTATION_0];
 
         getImeSwitchButton().setOnClickListener(mImeSwitcherClickListener);
 
         updateRTLOrder();
+
+//CHAOZHUO START
+        postDelayed(new Runnable() {
+            public void run() {
+                initPenKeyboardIcon();
+            }
+        }, 1000);
+
+//CHAOZHUO END
     }
 
     public boolean isVertical() {
@@ -464,9 +609,25 @@ public class NavigationBarView extends LinearLayout {
         for (int i=0; i<4; i++) {
             mRotatedViews[i].setVisibility(View.GONE);
         }
+//CHAOZHUO START
+        FrameLayout dockContainer = null;
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        dockContainer = (FrameLayout) mCurrentView.findViewById(R.id.dock_view);
+        dockContainer.removeAllViews();
+        }
+//CHAOZHUO END
         mCurrentView = mRotatedViews[rot];
         mCurrentView.setVisibility(View.VISIBLE);
         updateLayoutTransitionsEnabled();
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        dockContainer = (FrameLayout) mCurrentView.findViewById(R.id.dock_view);
+        dockContainer.removeAllViews();
+        if (mDock != null) {
+            dockContainer.addView(mDock);
+        }
+        }
+//CHAOZHUO END
 
         getImeSwitchButton().setOnClickListener(mImeSwitcherClickListener);
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java
index e03bcfb..83d7aea 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java
@@ -20,9 +20,15 @@ import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ObjectAnimator;
 import android.animation.ValueAnimator;
+//CHAOZHUO START
+import android.app.ActivityManagerNative;
+//CHAOZHUO END
 import android.content.Context;
 import android.content.res.Configuration;
 import android.content.res.Resources;
+//CHAOZHUO START
+import android.os.RemoteException;
+//CHAOZHUO END
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.MotionEvent;
@@ -40,6 +46,10 @@ import com.android.systemui.statusbar.FlingAnimationUtils;
 import com.android.systemui.statusbar.StatusBarState;
 import com.android.systemui.statusbar.policy.HeadsUpManager;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 
@@ -246,6 +256,18 @@ public abstract class PanelView extends FrameLayout {
 
         switch (event.getActionMasked()) {
             case MotionEvent.ACTION_DOWN:
+//CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                long currentTime = System.currentTimeMillis();
+                final long deltaTime = (currentTime - mDownEventTime);
+                if (deltaTime < DOUBLE_TAP_TIMEOUT && deltaTime > DOUBLE_TAP_MIN_TIME) {
+                    mDownEventTime = 0;
+                    handleDoubleTap();
+                    return true;
+                }
+                mDownEventTime = System.currentTimeMillis();
+                }
+//CHAOZHUO END
                 startExpandMotion(x, y, false /* startTracking */, mExpandedHeight);
                 mJustPeeked = false;
                 mPanelClosedOnDown = isFullyCollapsed();
@@ -268,9 +290,13 @@ public abstract class PanelView extends FrameLayout {
                             || mPeekPending || mPeekAnimator != null;
                     onTrackingStarted();
                 }
+//CHAOZHUO START
+                if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
                 if (isFullyCollapsed() && !mHeadsUpManager.hasPinnedHeadsUp()) {
                     schedulePeek();
                 }
+                }
+//CHAOZHUO END
                 break;
 
             case MotionEvent.ACTION_POINTER_UP:
@@ -524,7 +550,21 @@ public abstract class PanelView extends FrameLayout {
         }
         return false;
     }
-
+//CHAOZHUO START
+    private static final int DOUBLE_TAP_TIMEOUT = ViewConfiguration.getDoubleTapTimeout();
+    private static final int DOUBLE_TAP_MIN_TIME = ViewConfiguration.getDoubleTapMinTime();
+    private long mDownEventTime;
+    private void handleDoubleTap() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        int handled = 0;
+        try {
+            handled = ActivityManagerNative.getDefault().switchCurrentAppWindowMode(true);
+        } catch (RemoteException re) {
+            re.printStackTrace();
+        }
+        }
+    }
+//CHAOZHUO END
     /**
      * @return Whether a pair of coordinates are inside the visible view content bounds.
      */
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index a6eff4b..a26deff 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -28,6 +28,9 @@ import android.app.PendingIntent;
 import android.app.StatusBarManager;
 import android.content.BroadcastReceiver;
 import android.content.ComponentCallbacks2;
+//CHAOZHUO START
+import android.content.ComponentName;
+//CHAOZHUO END
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
@@ -76,6 +79,9 @@ import android.util.DisplayMetrics;
 import android.util.EventLog;
 import android.util.Log;
 import android.view.Display;
+//CHAOZHUO START
+import android.view.Gravity;
+//CHAOZHUO END
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
@@ -132,6 +138,10 @@ import com.android.systemui.statusbar.ScrimView;
 import com.android.systemui.statusbar.SignalClusterView;
 import com.android.systemui.statusbar.SpeedBumpView;
 import com.android.systemui.statusbar.StatusBarState;
+//CHAOZHUO START
+import com.android.systemui.statusbar.dock.Dock;
+import com.android.systemui.statusbar.dock.DockEnv;
+//CHAOZHUO END
 import com.android.systemui.statusbar.phone.UnlockMethodCache.OnUnlockMethodChangedListener;
 import com.android.systemui.statusbar.policy.AccessibilityController;
 import com.android.systemui.statusbar.policy.BatteryController;
@@ -160,6 +170,10 @@ import com.android.systemui.statusbar.stack.StackStateAnimator;
 import com.android.systemui.statusbar.stack.StackViewState;
 import com.android.systemui.volume.VolumeComponent;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -658,6 +672,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     // ================================================================================
     // Constructing the view
     // ================================================================================
+
     protected PhoneStatusBarView makeStatusBarView() {
         final Context context = mContext;
 
@@ -715,9 +730,18 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
             boolean showNav = mWindowManagerService.hasNavigationBar();
             if (DEBUG) Log.v(TAG, "hasNavigationBar=" + showNav);
             if (showNav) {
+//CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                Dock dock = (Dock) LayoutInflater.from(mContext).inflate(R.layout.dock_panel, null);
+                dock.init();
+                mNavigationBarView =
+                    (NavigationBarView) View.inflate(context, R.layout.navigation_bar_phoenix, null);
+                mNavigationBarView.setDock(dock);
+                } else {
                 mNavigationBarView =
                     (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
-
+                }
+//CHAOZHUO END
                 mNavigationBarView.setDisabledFlags(mDisabled1);
                 mNavigationBarView.setBar(this);
                 mNavigationBarView.setOnVerticalChangedListener(
@@ -1068,7 +1092,20 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         }
         return mNaturalBarHeight;
     }
-
+//CHAOZHUO START
+    private View.OnClickListener mAllAppsClickListener = 
+    new View.OnClickListener() {
+        public void onClick(View v) {
+            final Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+            mainIntent.addCategory(Intent.CATEGORY_HOME);
+            ComponentName cn = new ComponentName("com.android.launcher3", "com.android.launcher3.Launcher");
+            mainIntent.setComponent(cn);
+            mainIntent.putExtra("com.android.launcher3.intent.extra.START_APP_MENU", true);
+            mainIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            mContext.startActivity(mainIntent);
+        }
+    };
+//CHAOZHUO END
     private View.OnClickListener mRecentsClickListener = new View.OnClickListener() {
         public void onClick(View v) {
             awakenDreams();
@@ -1127,7 +1164,11 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
 
     private void prepareNavigationBarView() {
         mNavigationBarView.reorient();
-
+//CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mNavigationBarView.getAllAppsButton().setOnClickListener(mAllAppsClickListener);
+        }
+//CHAOZHUO END
         mNavigationBarView.getRecentsButton().setOnClickListener(mRecentsClickListener);
         mNavigationBarView.getRecentsButton().setOnTouchListener(mRecentsPreloadOnTouchListener);
         mNavigationBarView.getRecentsButton().setLongClickable(true);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
index 2d2098f..b1b74b7 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
@@ -30,12 +30,22 @@ import com.android.systemui.DejankUtils;
 import com.android.systemui.EventLogTags;
 import com.android.systemui.R;
 
+//CHAOZHUO START
+import android.app.ActivityManager;
+import android.app.ActivityManager.RecentTaskInfo;
+import android.app.TaskStateListener;
+import android.widget.TextView;
+//CHAOZHUO END
+
 public class PhoneStatusBarView extends PanelBar {
     private static final String TAG = "PhoneStatusBarView";
     private static final boolean DEBUG = PhoneStatusBar.DEBUG;
     private static final boolean DEBUG_GESTURES = false;
 
     PhoneStatusBar mBar;
+//CHAOZHUO START
+    private TextView mTipView;
+//CHAOZHUO END
 
     PanelView mLastFullyOpenedPanel = null;
     PanelView mNotificationPanel;
@@ -69,10 +79,62 @@ public class PhoneStatusBarView extends PanelBar {
         mScrimController = scrimController;
     }
 
+//CHAOZHUO START
+    private void setTipVisible(boolean visible) {
+        mTipView.removeCallbacks(mHideTipRunnable);
+        if (visible) {
+            mTipView.setText(R.string.statusbar_switch_window_tip);
+            mTipView.postDelayed(mHideTipRunnable, HIDE_TIP_TIMEOUT);
+        } else {
+            mTipView.setText("");
+        }
+    }
+    private static final long HIDE_TIP_TIMEOUT = 10 * 1000;
+    private Runnable mHideTipRunnable = new Runnable() {
+        public void run() {
+            mTipView.setText("");
+        }
+    };
+
+    TaskStateListener listener = new TaskStateListener() {
+        @Override
+        public void onTaskCreate(ActivityManager.RecentTaskInfo info) {
+        }
+
+        @Override
+        public void onTaskClose(ActivityManager.RecentTaskInfo info) {
+        }
+
+        @Override
+        public void onTaskFocuseChange(ActivityManager.RecentTaskInfo info) {
+        }
+
+        @Override
+        public void onTaskMinimized(ActivityManager.RecentTaskInfo info) {
+            if (info.taskFullScreen) {
+                setTipVisible(true);
+            } else {
+                setTipVisible(false);
+            }
+        }
+
+        public void onTaskProcessStarted(RecentTaskInfo info) {
+        };
+
+        public void onTaskActivityWindowVisible(RecentTaskInfo info) {
+        };
+    };
+//CHAOZHUO END
+
     @Override
     public void onFinishInflate() {
         mBarTransitions.init();
         new BatteryPercentShow(getContext(),this).register();
+        
+//CHAOZHUO START
+        mTipView = (TextView) findViewById(R.id.tip_area);
+        mTipView.setText("");
+//CHAOZHUO END
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseGestureDetector.java b/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseGestureDetector.java
new file mode 100644
index 0000000..16beffe
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseGestureDetector.java
@@ -0,0 +1,48 @@
+//CHAOZHUO START
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.startup.mouse;
+
+import android.content.Context;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+
+//CHAOZHUO added by chenyaohuang BEGIN
+public class MouseGestureDetector extends GestureDetector{
+    private boolean mIsFromDock = false;;
+    public MouseGestureDetector(Context context, OnGestureListener listener) {
+        this(context, listener, false);
+    }
+
+    public MouseGestureDetector(Context context, OnGestureListener listener, boolean isFromeDock) {
+        super(context, listener);
+        mIsFromDock = isFromeDock;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent ev) {
+//        当onTouch的action为cancel时，是否需要将cancel action转为up action;主要针对dock栏的appicon上划到外部区域时，会调用cancel action
+        if (ev.getAction() == MotionEvent.ACTION_CANCEL && mIsFromDock) {
+            ev.setAction(MotionEvent.ACTION_UP);
+        }
+        return super.onTouchEvent(ev);
+    }
+}
+
+
+// CHAOZHUO added by chenyaohuang END
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseTouchDelegate.java b/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseTouchDelegate.java
new file mode 100644
index 0000000..33e1caa
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseTouchDelegate.java
@@ -0,0 +1,22 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.startup.mouse;
+
+import android.view.MotionEvent;
+import android.view.View;
+
+public interface MouseTouchDelegate {
+    public void clearFocus();
+
+    public void onLongPress(MotionEvent e, View v);
+
+    public boolean onMouseLeftDoubleTap(MotionEvent e, View v);
+
+    public boolean onSingleTapUp(MotionEvent e, View v);
+
+    public boolean onSingleTapUpMouseLeft(MotionEvent e, View v);
+
+    public boolean onSingleTapUpMouseRight(MotionEvent e, View v);
+
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY, View v);
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseViewDelegate.java b/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseViewDelegate.java
new file mode 100644
index 0000000..ac5a1f2
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/startup/mouse/MouseViewDelegate.java
@@ -0,0 +1,107 @@
+//CHAOZHUO START
+package com.android.systemui.statusbar.startup.mouse;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+
+public class MouseViewDelegate implements View.OnTouchListener {
+    private static final String TAG = "MouseViewDelegate";
+    private static final boolean DEBUG = false;
+    private View mView;
+    public MouseViewDelegate(Context context, View v) {
+        this(context, v, false);
+    }
+
+    public MouseViewDelegate(Context context, View v, boolean isFromDock) {
+        mView = v;
+        mView.setClickable(true);
+        mGestureDetector = new MouseGestureDetector(mView.getContext(),
+                mGestureListener, isFromDock);
+        mView.setOnTouchListener(this);
+    }
+
+    private MouseTouchDelegate mDelegate;
+    private MotionEvent mCurrentDownEvent;
+
+    public void init(MouseTouchDelegate delegate) {
+        mDelegate = delegate;
+    }
+
+    @Override
+    public boolean onTouch(View v, MotionEvent event) {
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (mCurrentDownEvent != null) {
+                mCurrentDownEvent.recycle();
+            }
+            mCurrentDownEvent = MotionEvent.obtain(event);
+        }
+        boolean handled = false;
+        if (mGestureDetector != null) {
+            handled = mGestureDetector.onTouchEvent(event);
+        }
+        return handled;
+    }
+
+    private MouseGestureDetector.SimpleOnGestureListener mGestureListener = new MouseGestureDetector.SimpleOnGestureListener() {
+        @Override
+        public void onLongPress(MotionEvent e) {
+            if (DEBUG) {
+                Log.e(TAG,"MouseViewDelegate onLongPress");
+            }
+            if (mDelegate != null) {
+                mDelegate.onLongPress(e, mView);
+            }
+        }
+
+        @Override
+        public boolean onSingleTapUp(MotionEvent e) {
+            if (DEBUG) {
+                Log.e(TAG,"MouseViewDelegate onSingleTapUp");
+            }
+            boolean handled = false;
+            if (mDelegate != null) {
+                if (isMouseLeft(mCurrentDownEvent) && mDelegate.onSingleTapUpMouseLeft(e, mView)) {
+                    handled = true;
+                } else if (isMouseRight(mCurrentDownEvent) && mDelegate.onSingleTapUpMouseRight(e, mView)) {
+                    handled = true;
+                }
+                if (!handled) {
+                    return mDelegate.onSingleTapUp(e, mView);
+                }
+            }
+            return false;
+        }
+
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+            if (DEBUG) {
+                Log.e(TAG,"MouseViewDelegate onFling");
+            }
+            if (mDelegate != null) {
+                return mDelegate.onFling(e1, e2, velocityX, velocityY, mView);
+            }
+            return false;
+        };
+
+    };
+    private MouseGestureDetector mGestureDetector;
+
+    private boolean isMouseLeft(MotionEvent e) {
+        return e.getToolType(0) == MotionEvent.TOOL_TYPE_MOUSE
+                && e.getButtonState() == MotionEvent.BUTTON_PRIMARY;
+    }
+
+    private boolean isMouseMiddle(MotionEvent e) {
+        return e.getToolType(0) == MotionEvent.TOOL_TYPE_MOUSE
+                && e.getButtonState() == MotionEvent.BUTTON_TERTIARY;
+    }
+
+    private boolean isMouseRight(MotionEvent e) {
+        return e.getToolType(0) == MotionEvent.TOOL_TYPE_MOUSE
+                && e.getButtonState() == MotionEvent.BUTTON_SECONDARY;
+    }
+
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java b/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java
index a319beb..c27b498 100644
--- a/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java
+++ b/packages/WallpaperCropper/src/com/android/wallpapercropper/WallpaperCropActivity.java
@@ -42,6 +42,10 @@ import android.view.View;
 import android.view.WindowManager;
 import android.widget.Toast;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import com.android.gallery3d.common.Utils;
 import com.android.gallery3d.exif.ExifInterface;
 import com.android.photos.BitmapRegionTileSource;
@@ -441,6 +445,12 @@ public class WallpaperCropActivity extends Activity {
         if (onBitmapCroppedHandler != null) {
             cropTask.setOnBitmapCropped(onBitmapCroppedHandler);
         }
+		//CHAOZHUO START
+		if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        // add by cd to avoid set wallpaper can't overlap screen bug
+        cropTask.setNoCrop(true);
+		}
+		//CHAOZHUO END
         cropTask.execute();
     }
 
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 4e479bc..e97df78 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -170,18 +170,30 @@ import android.content.pm.IPackageManager;
 import android.content.pm.InstrumentationInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
-import android.content.pm.ParceledListSlice;
-import android.content.pm.UserInfo;
 import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.pm.ParceledListSlice;
 import android.content.pm.PathPermission;
 import android.content.pm.ProviderInfo;
 import android.content.pm.ResolveInfo;
 import android.content.pm.ServiceInfo;
+import android.content.pm.UserInfo;
 import android.content.res.CompatibilityInfo;
+//CHAOZHUO START
+import android.content.res.MultiWindowCompatibility;
+//CHAOZHUO END
 import android.content.res.Configuration;
+//CHAOZHUO START
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.Point;
+import android.graphics.Rect;
+//CHAOZHUO END
 import android.net.Proxy;
 import android.net.ProxyInfo;
 import android.net.Uri;
+//CHAOZHUO START
+import android.os.BatteryStats;
+//CHAOZHUO END
 import android.os.Binder;
 import android.os.Build;
 import android.os.Bundle;
@@ -201,6 +213,9 @@ import android.os.Looper;
 import android.os.Message;
 import android.os.Parcel;
 import android.os.ParcelFileDescriptor;
+//CHAOZHUO START
+import android.os.PersistableBundle;
+//CHAOZHUO END
 import android.os.PowerManagerInternal;
 import android.os.Process;
 import android.os.RemoteCallbackList;
@@ -213,9 +228,21 @@ import android.os.SystemProperties;
 import android.os.UpdateLock;
 import android.os.UserHandle;
 import android.os.UserManager;
+//CHAOZHUO START
+import android.os.storage.IMountService;
+import android.os.storage.StorageManager;
+//CHAOZHUO END
 import android.provider.Settings;
+//CHAOZHUO START
+import android.service.voice.IVoiceInteractionSession;
+import android.text.TextUtils;
+//CHAOZHUO END
 import android.text.format.DateUtils;
 import android.text.format.Time;
+//CHAOZHUO START
+import android.util.ArrayMap;
+import android.util.ArraySet;
+//CHAOZHUO END
 import android.util.AtomicFile;
 import android.util.EventLog;
 import android.util.Log;
@@ -223,14 +250,65 @@ import android.util.Pair;
 import android.util.PrintWriterPrinter;
 import android.util.Slog;
 import android.util.SparseArray;
+//CHAOZHUO START
+import android.util.SparseIntArray;
+//CHAOZHUO END
 import android.util.TimeUtils;
 import android.util.Xml;
+//CHAOZHUO START
+import android.view.Display;
+//CHAOZHUO END
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.WindowManager;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
+//CHAOZHUO START
+import com.android.internal.R;
+import com.android.internal.annotations.GuardedBy;
+import com.android.internal.app.IAppOpsService;
+import com.android.internal.app.IVoiceInteractor;
+import com.android.internal.app.ProcessMap;
+import com.android.internal.app.ProcessStats;
+import com.android.internal.os.BackgroundThread;
+import com.android.internal.os.BatteryStatsImpl;
+import com.android.internal.os.ProcessCpuTracker;
+import com.android.internal.os.TransferPipe;
+import com.android.internal.os.Zygote;
+import com.android.internal.util.FastPrintWriter;
+import com.android.internal.util.FastXmlSerializer;
+import com.android.internal.util.MemInfoReader;
+import com.android.internal.util.Preconditions;
+import com.android.server.AppOpsService;
+import com.android.server.AttributeCache;
+import com.android.server.IntentResolver;
+import com.android.server.LocalServices;
+import com.android.server.ServiceThread;
+import com.android.server.SystemService;
+import com.android.server.SystemServiceManager;
+import com.android.server.Watchdog;
+import com.android.server.am.ActivityStack.ActivityState;
+import com.android.server.firewall.IntentFirewall;
+import com.android.server.pm.Installer;
+import com.android.server.pm.UserManagerService;
+import com.android.server.statusbar.StatusBarManagerInternal;
+import com.android.server.wm.AppTransition;
+import com.android.server.wm.WindowManagerService;
+import com.chaozhuo.onlineconfig.CZOnlineConfigManager;
+import com.google.android.collect.Lists;
+import com.google.android.collect.Maps;
+
 import dalvik.system.VMRuntime;
+import libcore.io.IoUtils;
+
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+import org.xmlpull.v1.XmlSerializer;
+//CHAOZHUO END
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -260,6 +338,20 @@ import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicLong;
+//CHAOZHUO START
+import android.app.AppOpsManager;
+import android.app.ApplicationThreadNative;
+import android.app.IActivityContainer;
+import android.app.IActivityContainerCallback;
+import android.app.IAppTask;
+import android.app.ITaskStackListener;
+import android.content.res.MultiWindowCompatibility;
+import android.text.TextUtils;
+import android.view.Display;
+import android.widget.Toast;
+
+import com.android.internal.statusbar.IStatusBarService;
+//CHAOZHUO END
 
 public final class ActivityManagerService extends ActivityManagerNative
         implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {
@@ -439,13 +531,19 @@ public final class ActivityManagerService extends ActivityManagerNative
     /** Task stack change listeners. */
     private RemoteCallbackList<ITaskStackListener> mTaskStackListeners =
             new RemoteCallbackList<ITaskStackListener>();
-
+    //CHAOZHUO START
+    private RemoteCallbackList<ActivityManager.ITaskStateListenerCallback> mTaskStateListeners =
+            new RemoteCallbackList<ActivityManager.ITaskStateListenerCallback>();
+    //CHAOZHUO END
     public IntentFirewall mIntentFirewall;
 
     // Whether we should show our dialogs (ANR, crash, etc) or just perform their
     // default actuion automatically.  Important for devices without direct input
     // devices.
     private boolean mShowDialogs = true;
+    //CHAOZHUO START
+    MultiWindowManager mMultiWindowMgr;
+    //CHAOZHUO END
 
     BroadcastQueue mFgBroadcastQueue;
     BroadcastQueue mBgBroadcastQueue;
@@ -1388,6 +1486,21 @@ public final class ActivityManagerService extends ActivityManagerNative
     static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 59;
     static final int APP_LAUNCH_BOOST_DEACTIVATE_MSG = 60;
 
+    //CHAOZHUO START
+    static final int SHOW_FIRST_ACTIVITY_OPEN_MSG = 70;
+    static final int SHOW_TOO_MANY_ACTIVIYT_MSG = 71;
+    static final int SHOW_NO_SUPPORT_WINDOW_MSG = 72;
+
+    static final int NOTIFY_TASK_CREATE_LISTENERS_MSG = 80;
+    static final int NOTIFY_FOCUSED_TASK_CHANGE_LISTENERS_MSG = 81;
+    static final int NOTIFY_TASK_CLOSE_LISTENERS_MSG = 82;
+    static final int NOTIFY_TASK_WINDOW_MODE_CHANGED_MSG = 83;
+    // CHAOZHUO FanGuofeng
+    static final int NOTIFY_TASK_PROCESS_STARTED_MSG = 84;
+    static final int NOTIFY_TASK_ACTIVITY_WINDOW_VISIBLE = 85;
+    // CHAOZHUO FanGuofeng
+    //CHAOZHUO END
+
     static final int FIRST_ACTIVITY_STACK_MSG = 100;
     static final int FIRST_BROADCAST_QUEUE_MSG = 200;
     static final int FIRST_COMPAT_MODE_MSG = 300;
@@ -1622,6 +1735,32 @@ public final class ActivityManagerService extends ActivityManagerNative
             case DISPATCH_UIDS_CHANGED_MSG: {
                 dispatchUidsChanged();
             } break;
+          //CHAOZHUO START
+            case SHOW_FIRST_ACTIVITY_OPEN_MSG:{
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                ActivityRecord r = (ActivityRecord)msg.obj;
+                AppOpenTips tip = new AppOpenTips(ActivityManagerService.this,
+                        mContext,r,AppOpenTips.FIRST_OPEN);
+                tip.show();
+            }
+            }break;
+            case SHOW_TOO_MANY_ACTIVIYT_MSG:{
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                ActivityRecord r = (ActivityRecord)msg.obj;
+                AppOpenTips tip = new AppOpenTips(ActivityManagerService.this,
+                        mContext,r,AppOpenTips.TOO_MANY_OPENED);
+                tip.show();
+            }
+            }break;
+            case SHOW_NO_SUPPORT_WINDOW_MSG: {
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                ActivityRecord r = (ActivityRecord)msg.obj;
+                AppOpenTips tip = new AppOpenTips(ActivityManagerService.this,
+                        mContext,r,AppOpenTips.CANNOT_SWITCH);
+                tip.show();
+                }
+            }break;
+          //CHAOZHUO END
             }
         }
     }
@@ -2085,6 +2224,122 @@ public final class ActivityManagerService extends ActivityManagerNative
             case APP_LAUNCH_BOOST_DEACTIVATE_MSG : {
                 mLocalPowerManager.powerHint(POWER_HINT_APP_LAUNCH, 0);
             } break;
+            
+            //CHAOZHUO START
+            case NOTIFY_FOCUSED_TASK_CHANGE_LISTENERS_MSG: {
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                synchronized (ActivityManagerService.this) {
+                    ActivityManager.RecentTaskInfo info = (ActivityManager.RecentTaskInfo)msg.obj;
+                    int i = mTaskStateListeners.beginBroadcast();
+                    while (i > 0) {
+                        i--;
+                        try {
+                            // Make a one-way callback to the listener
+                            mTaskStateListeners.getBroadcastItem(i).onTaskFocuseChange(info);
+                        } catch (RemoteException e){
+                            // Handled by the RemoteCallbackList
+                        }
+                    }
+                    mTaskStateListeners.finishBroadcast();
+                }
+                }
+                break;
+            }
+            case NOTIFY_TASK_CLOSE_LISTENERS_MSG:{
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                synchronized (ActivityManagerService.this) {
+                    ActivityManager.RecentTaskInfo info = (ActivityManager.RecentTaskInfo)msg.obj;
+                    int i = mTaskStateListeners.beginBroadcast();
+                    while (i > 0) {
+                        i--;
+                        try {
+                            // Make a one-way callback to the listener
+                            mTaskStateListeners.getBroadcastItem(i).onTaskClose(info);
+                        } catch (RemoteException e){
+                            // Handled by the RemoteCallbackList
+                        }
+                    }
+                    mTaskStateListeners.finishBroadcast();
+                }
+                }
+                break;
+            }
+            case NOTIFY_TASK_CREATE_LISTENERS_MSG:{
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                synchronized (ActivityManagerService.this) {
+                    ActivityManager.RecentTaskInfo info = (ActivityManager.RecentTaskInfo)msg.obj;
+                    int i = mTaskStateListeners.beginBroadcast();
+                    while (i > 0) {
+                        i--;
+                        try {
+                            // Make a one-way callback to the listener
+                            mTaskStateListeners.getBroadcastItem(i).onTaskCreate(info);
+                        } catch (RemoteException e){
+                            // Handled by the RemoteCallbackList
+                        }
+                    }
+                    mTaskStateListeners.finishBroadcast();
+                }
+                }
+                break;
+            }
+            case NOTIFY_TASK_WINDOW_MODE_CHANGED_MSG:{
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                synchronized (ActivityManagerService.this) {
+                    ActivityManager.RecentTaskInfo info = (ActivityManager.RecentTaskInfo)msg.obj;
+                    int i = mTaskStateListeners.beginBroadcast();
+                    while (i > 0) {
+                        i--;
+                        try {
+                            // Make a one-way callback to the listener
+                            mTaskStateListeners.getBroadcastItem(i).onTaskMinimized(info);
+                        } catch (RemoteException e){
+                            // Handled by the RemoteCallbackList
+                        }
+                    }
+                    mTaskStateListeners.finishBroadcast();
+                }
+                }
+                break;
+            }
+
+            // CHAOZHUO FanGuofeng
+            case NOTIFY_TASK_PROCESS_STARTED_MSG: {
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                synchronized (ActivityManagerService.this) {
+                    ActivityManager.RecentTaskInfo info = (ActivityManager.RecentTaskInfo)msg.obj;
+                    int i = mTaskStateListeners.beginBroadcast();
+                    while (i > 0) {
+                        i--;
+                        try {
+                            mTaskStateListeners.getBroadcastItem(i).onTaskProcessStarted(info);
+                        } catch (RemoteException e){
+                        }
+                    }
+                    mTaskStateListeners.finishBroadcast();
+                }
+                }
+                break;
+            }
+            case NOTIFY_TASK_ACTIVITY_WINDOW_VISIBLE: {
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                synchronized (ActivityManagerService.this) {
+                    ActivityManager.RecentTaskInfo info = (ActivityManager.RecentTaskInfo)msg.obj;
+                    int i = mTaskStateListeners.beginBroadcast();
+                    while (i > 0) {
+                        i--;
+                        try {
+                            mTaskStateListeners.getBroadcastItem(i).onTaskActivityWindowVisible(info);
+                        } catch (RemoteException e){
+                        }
+                    }
+                    mTaskStateListeners.finishBroadcast();
+                }
+                }
+                break;
+            }
+            // CHAOZHUO FanGuofeng
+            //CHAOZHUO END
             }
         }
     };
@@ -2396,6 +2651,11 @@ public final class ActivityManagerService extends ActivityManagerNative
 
         mConfigurationSeq = mConfiguration.seq = 1;
         mProcessCpuTracker.init();
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mMultiWindowMgr = new MultiWindowManager(this);
+        }
+        //CHAOZHUO END
 
         mCompatModePackages = new CompatModePackages(this, systemDir, mHandler);
         mIntentFirewall = new IntentFirewall(new IntentFirewallInterface(), mHandler);
@@ -2730,6 +2990,21 @@ public final class ActivityManagerService extends ActivityManagerNative
     @Override
     public void setFocusedStack(int stackId) {
         if (DEBUG_FOCUS) Slog.d(TAG_FOCUS, "setFocusedStack: stackId=" + stackId);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            final long origId = Binder.clearCallingIdentity();
+            synchronized (ActivityManagerService.this) {
+                ActivityStack stack = mStackSupervisor.getStack(stackId);
+                if (stack != null && mStackSupervisor.getFocusedStack() != stack ) {
+                    ActivityRecord r = stack.topRunningActivityLocked(null);
+                    if (r != null) {
+                        setFocusedActivityLocked(r, "setFocusedStack");
+                        moveTaskToFront(r.task.taskId, 0, null);
+                    }
+                }
+            }
+            Binder.restoreCallingIdentity(origId);
+        } else {
         synchronized (ActivityManagerService.this) {
             ActivityStack stack = mStackSupervisor.getStack(stackId);
             if (stack != null) {
@@ -2740,6 +3015,8 @@ public final class ActivityManagerService extends ActivityManagerNative
                 }
             }
         }
+        }
+        //CHAOZHUO END
     }
 
     /** Sets the task stack listener that gets callbacks when a task stack changes. */
@@ -6216,6 +6493,11 @@ public final class ActivityManagerService extends ActivityManagerNative
             ApplicationInfo appInfo = app.instrumentationInfo != null
                     ? app.instrumentationInfo : app.info;
             app.compat = compatibilityInfoForPackageLocked(appInfo);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            app.mwCompat = new MultiWindowCompatibility(mMultiWindowMgr.getAppRunningMode(processName));
+            }
+            //CHAOZHUO END
             if (profileFd != null) {
                 profileFd = profileFd.dup();
             }
@@ -6225,9 +6507,14 @@ public final class ActivityManagerService extends ActivityManagerNative
                     profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,
                     app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,
                     isRestrictedBackupMode || !normalMode, app.persistent,
-                    new Configuration(mConfiguration), app.compat,
+                    //CHAOZHUO START
+                    new Configuration(mConfiguration), app.compat,app.mwCompat,
+                    //CHAOZHUO END
                     getCommonServicesLocked(app.isolated),
                     mCoreSettingsObserver.getCoreSettingsLocked());
+            //CHAOZHUO START
+            //mMultiWindowMgr.newProcessCreated(thread,processName);
+            //CHAOZHUO END
             updateLruProcessLocked(app, false, null);
             app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();
         } catch (Exception e) {
@@ -6523,6 +6810,12 @@ public final class ActivityManagerService extends ActivityManagerNative
                 scheduleStartProfilesLocked();
             }
         }
+
+        /******************* CHAOZHUO START *******************/
+        if(CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            CZOnlineConfigManager.getInstance().init(mContext);
+        }
+        /******************* CHAOZHUO END *******************/
     }
 
     @Override
@@ -8576,7 +8869,34 @@ public final class ActivityManagerService extends ActivityManagerNative
             return res;
         }
     }
+    //CHAOZHUO START
+    @Override
+    public List<ActivityManager.RecentTaskInfo> getRecentRunningTasks(int maxNum) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        final int callingUid = Binder.getCallingUid();
+//        userId = handleIncomingUser(Binder.getCallingPid(), callingUid, userId,
+//                false, ALLOW_FULL_ONLY, "getRecentTasks", null);
+        ArrayList<ActivityManager.RecentTaskInfo> res;
+
+        synchronized (this) {
+            ArrayList<TaskRecord> tasks = mStackSupervisor.getTasksLocked( callingUid);
+            int N = tasks.size();
+            res = new ArrayList<ActivityManager.RecentTaskInfo>(
+                    maxNum < N ? maxNum : N);
+            for (int i=0; i<N && maxNum > 0; i++) {
+                TaskRecord tr = tasks.get(i);
 
+                ActivityManager.RecentTaskInfo rti = createRecentTaskInfoFromTaskRecord(tr);
+
+                res.add(rti);
+                maxNum--;
+            }
+        }
+        return res;
+        }
+        return null;
+    }
+    //CHAOZHUO END
     @Override
     public ActivityManager.TaskThumbnail getTaskThumbnail(int id) {
         synchronized (this) {
@@ -8900,11 +9220,27 @@ public final class ActivityManagerService extends ActivityManagerNative
                     "removeTask()");
             long ident = Binder.clearCallingIdentity();
             try {
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                boolean ret = false;
+                ret = removeTaskByIdLocked(taskId, true);
+                if (ret) {
+                    tr = mStackSupervisor.anyTaskForIdLocked(taskId);
+                    if (tr != null && tr.stack != null && tr.mActivities.size() != 0) {
+                    StackInfo info = getStackInfo(tr.stack.mStackId);
+                    String processName = tr.mActivities.get(0).processName;
+                    mMultiWindowMgr.storeWindowPos(processName, info.bounds);
+                    }
+                }
+                return ret;
+                } else {
                 String pn= cn.getPackageName();
                 if(isIgnoredPkg(pn))
                     return removeTaskByIdLocked(taskId, false);
                 else
                     return removeTaskByIdLocked(taskId, true);
+                }
+                //CHAOZHUO END
             } finally {
                 Binder.restoreCallingIdentity(ident);
             }
@@ -8946,6 +9282,11 @@ public final class ActivityManagerService extends ActivityManagerNative
             if (prev != null && prev.isRecentsActivity()) {
                 task.setTaskToReturnTo(ActivityRecord.RECENTS_ACTIVITY_TYPE);
             }
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            setFocusedActivityLocked(task.topRunningActivityLocked(null), "moveTaskToFront");
+            }
+            //CHAOZHUO END
             mStackSupervisor.findTaskToMoveToFrontLocked(task, flags, options, "moveTaskToFront");
         } finally {
             Binder.restoreCallingIdentity(origId);
@@ -9001,7 +9342,12 @@ public final class ActivityManagerService extends ActivityManagerNative
     }
 
     private final void moveTaskBackwardsLocked(int task) {
-        Slog.e(TAG, "moveTaskBackwards not yet implemented!");
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        //Slog.e(TAG, "moveTaskBackwards not yet implemented!");
+        this.moveTaskToBack(task);
+        }
+        //CHAOZHUO END
     }
 
     @Override
@@ -9094,8 +9440,12 @@ public final class ActivityManagerService extends ActivityManagerNative
 
     @Override
     public List<StackInfo> getAllStackInfos() {
+        //CHAOZHUO START
+        if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
         enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,
                 "getAllStackInfos()");
+        }
+        //CHAOZHUO END
         long ident = Binder.clearCallingIdentity();
         try {
             synchronized (this) {
@@ -10509,7 +10859,58 @@ public final class ActivityManagerService extends ActivityManagerNative
     public void notifyCleartextNetwork(int uid, byte[] firstPacket) {
         mHandler.obtainMessage(NOTIFY_CLEARTEXT_NETWORK_MSG, uid, 0, firstPacket).sendToTarget();
     }
+    //CHAOZHUO START
+    void notifyTaskCreateLocked(final ActivityManager.RecentTaskInfo info) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Message nmsg = mHandler.obtainMessage(NOTIFY_TASK_CREATE_LISTENERS_MSG);
+        nmsg.obj = info;
+        mHandler.sendMessage(nmsg);
+        }
+    }
+
+    void notifyTaskWindowModeChangedLocked(final ActivityManager.RecentTaskInfo info) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Message nmsg = mHandler.obtainMessage(NOTIFY_TASK_WINDOW_MODE_CHANGED_MSG);
+        nmsg.obj = info;
+        mHandler.sendMessage(nmsg);
+        }
+    }
+
+    void notifyFocusedTaskChangedLocked(final ActivityManager.RecentTaskInfo info) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mHandler.removeMessages(NOTIFY_FOCUSED_TASK_CHANGE_LISTENERS_MSG);
+        Message nmsg = mHandler.obtainMessage(NOTIFY_FOCUSED_TASK_CHANGE_LISTENERS_MSG);
+        nmsg.obj = info;
+        mHandler.sendMessage(nmsg);
+        }
+    }
+
+    void notifyTaskClosedLocked(final ActivityManager.RecentTaskInfo info) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Message nmsg = mHandler.obtainMessage(NOTIFY_TASK_CLOSE_LISTENERS_MSG);
+        nmsg.obj = info;
+        mHandler.sendMessage(nmsg);
+        }
+    }
+
+    // CHAOZHUO FanGuofeng
+    void notifyTaskProcessStarted(final ActivityManager.RecentTaskInfo info) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Message nmsg = mHandler.obtainMessage(NOTIFY_TASK_PROCESS_STARTED_MSG);
+        nmsg.obj = info;
+        mHandler.sendMessage(nmsg);
+        }
+    }
 
+    void notifyTaskActivityWindowVisible(final ActivityManager.RecentTaskInfo info) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        Message nmsg = mHandler.obtainMessage(NOTIFY_TASK_ACTIVITY_WINDOW_VISIBLE);
+        nmsg.obj = info;
+        mHandler.sendMessage(nmsg);
+        }
+    }
+    // CHAOZHUO FanGuofeng
+    //CHAOZHUO END
     @Override
     public boolean shutdown(int timeout) {
         if (checkCallingPermission(android.Manifest.permission.SHUTDOWN)
@@ -11120,6 +11521,8 @@ public final class ActivityManagerService extends ActivityManagerNative
 
     @Override
     public boolean convertFromTranslucent(IBinder token) {
+        //CHAOZHUO START
+        if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
         final long origId = Binder.clearCallingIdentity();
         try {
             synchronized (this) {
@@ -11138,6 +11541,10 @@ public final class ActivityManagerService extends ActivityManagerNative
         } finally {
             Binder.restoreCallingIdentity(origId);
         }
+        } else {
+            return false;
+        }
+        //CHAOZHUO END
     }
 
     @Override
@@ -17505,6 +17912,7 @@ public final class ActivityManagerService extends ActivityManagerNative
                 }
                 newConfig.seq = mConfigurationSeq;
                 mConfiguration = newConfig;
+
                 Slog.i(TAG, "Config changes=" + Integer.toHexString(changes) + " " + newConfig);
                 mUsageStatsService.reportConfigurationChange(newConfig, mCurrentUserId);
                 //mUsageStatsService.noteStartConfig(newConfig);
@@ -20853,4 +21261,260 @@ public final class ActivityManagerService extends ActivityManagerNative
             }
         }
     }
+    //CHAOZHUO START
+
+    /*
+     *  Phoenix Os Add
+     */
+
+    ActivityManager.RecentTaskInfo getTaskInfo(TaskRecord tr) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        ActivityManager.RecentTaskInfo rti = new ActivityManager.RecentTaskInfo();
+        rti.id = tr.taskId;
+        //rti.id = tr.numActivities > 0 ? tr.taskId : -1;
+        rti.persistentId = tr.taskId;
+        rti.baseIntent = new Intent(tr.intent != null ? tr.intent
+                : tr.affinityIntent);
+        rti.origActivity = tr.origActivity;
+        rti.description = tr.lastDescription;
+        rti.stackId = tr.stack.mStackId;
+        rti.taskFullScreen = tr.numFullscreen != 0;
+        return rti;
+        }
+        return null;
+    }
+
+
+    @Override
+    public boolean moveAppWindow(IBinder binder,int x,int y) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        boolean succeed = false;
+        long ident = Binder.clearCallingIdentity();
+        final ActivityRecord record;
+        synchronized(this) {
+            record = ActivityRecord.isInStackLocked(binder);
+            if (record == null) {
+                throw new IllegalArgumentException();
+            }
+        }
+        succeed = mMultiWindowMgr.moveAppWindow(record, x, y);
+        Binder.restoreCallingIdentity(ident);
+        return succeed;
+        }
+        return false;
+    }
+
+    int mDragActivityState = ActivityInfo.ACTIVITY_DRAG_MOVE_NONE;
+    IStatusBarService mStatusBar = null;
+    @Override
+    public void dragMoveActivity(IBinder token,int state) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        long ident = Binder.clearCallingIdentity();
+        try {
+            if (mStatusBar == null)
+                mStatusBar = IStatusBarService.Stub.asInterface(
+                    ServiceManager.getService("statusbar"));
+            if (mStatusBar != null) {
+                mStatusBar.dragMoveActivityState(state);
+            }
+        } catch (RemoteException e) {
+            mStatusBar = null;
+        }
+        if (state == ActivityInfo.ACTIVITY_DRAG_MOVE_EXIT &&
+                mDragActivityState == ActivityInfo.ACTIVITY_DRAG_MOVE_CLOSE) {
+            int taskId = getTaskForActivity(token, false);
+            if (taskId != -1) {
+                removeTask(taskId);
+            }
+        }
+        mDragActivityState = state;
+        Slog.i("DragMove", "state:" + state);
+        Binder.restoreCallingIdentity(ident);
+        }
+    }
+
+    @Override
+    public boolean pinedActivityStack(IBinder token,boolean pin) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        boolean succeed = false;
+        long ident = Binder.clearCallingIdentity();
+        synchronized(this) {
+            final ActivityRecord r = ActivityRecord.isInStackLocked(token);
+            if (r == null) {
+                return false;
+            }
+            r.mPin = pin;
+            mWindowManager.pinActivityWindow(token, pin);
+        }
+
+        Binder.restoreCallingIdentity(ident);
+        return succeed;
+        }
+        return false;
+    }
+    @Override
+    public int switchCurrentAppWindowMode(boolean windowMode){
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        int ret = 1;
+        if (mFocusedActivity == null)
+            return ret;
+        if (mFocusedActivity.window_mode)
+            return 2;
+        if(!mFocusedActivity.window_mode && !mFocusedActivity.task.stack.isHomeStack()
+                && mFocusedActivity.supportWindowMode /*&& mFocusedActivity.task.numFullscreen == 1*/) {
+            setAppWindowMode(mFocusedActivity.appToken,true);
+            ret = 0;
+        }
+        if (ret != 0) {
+            mUiHandler.sendMessage(mUiHandler.obtainMessage(SHOW_NO_SUPPORT_WINDOW_MSG));
+        }
+        return ret;
+        }
+        return -1;
+    }
+    @Override
+    public void moveHomeToBack(){
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        final long origId = Binder.clearCallingIdentity();
+        mStackSupervisor.moveHomeStackToBack();
+        Binder.restoreCallingIdentity(origId);
+        }
+    }
+
+    @Override
+    public void setAppWindowMode(IBinder token, boolean windowMode) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized(this) {
+            long origId = Binder.clearCallingIdentity();
+            final ActivityRecord r = ActivityRecord.isInStackLocked(token);
+            if (r == null) {
+                return ;
+            }
+            r.setWindowMode(windowMode);
+            mWindowManager.setAppWindowMode(token, windowMode);
+            mMultiWindowMgr.updateWindowMode(r, windowMode);
+            if (!windowMode && r.mPin) {
+                r.mPin = false;
+                mWindowManager.pinActivityWindow(token, false);
+            }
+            mStackSupervisor.showWindowOpenModeTips(r);
+
+            notifyTaskWindowModeChangedLocked(getTaskInfo(r.task));
+            mStackSupervisor.resumeTopActivitiesLocked();
+            Binder.restoreCallingIdentity(origId);
+        }
+        }
+    }
+
+    @Override
+    public void setAppTitle(IBinder token, String title) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized(this) {
+            final ActivityRecord r = ActivityRecord.isInStackLocked(token);
+            if (r == null) {
+                throw new IllegalArgumentException();
+            }
+            r.task.lastDescription = title;
+        }
+        }
+    }
+
+    @Override
+    public List<ActivityManager.RecentTaskInfo> getRecentTasks(int[] taskIds,
+            int flags, int userId) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,
+                false, true, "getRecentTasks", null);
+
+        synchronized (this) {
+            enforceCallingPermission(android.Manifest.permission.GET_TASKS,
+                    "getRecentTasks()");
+            final boolean detailed = checkCallingPermission(
+                    android.Manifest.permission.GET_DETAILED_TASKS)
+                    == PackageManager.PERMISSION_GRANTED;
+
+            IPackageManager pm = AppGlobals.getPackageManager();
+
+            int addNum = 0;
+
+            List<ActivityManager.RecentTaskInfo> tasks = getRecentRunningTasks(20);
+
+            final int N = tasks.size();
+            ArrayList<ActivityManager.RecentTaskInfo> res
+                    = new ArrayList<ActivityManager.RecentTaskInfo>(taskIds.length);
+            for (int i=0; i<N && addNum<taskIds.length ; i++) {
+                ActivityManager.RecentTaskInfo info = tasks.get(i);
+                boolean match = false;
+                for(int j = 0;j<taskIds.length;j++) {
+                    if (info.id == taskIds[j]){
+                        match = true;
+                        break;
+                    }
+                }
+                if (match) {
+                    res.add(info);
+                    addNum++;
+                }
+            }
+            return res;
+        }
+        }
+        return null;
+    }
+
+    @Override
+    public void registerTaskListener(ActivityManager.ITaskStateListenerCallback callback) throws RemoteException {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized (ActivityManagerService.this) {
+            if (callback != null) {
+                mTaskStateListeners.register(callback);
+            }
+        }
+        }
+    }
+
+    @Override
+    public void showResizingFrame(Rect rect) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mWindowManager.showResizingFrame(rect);
+        }
+    }
+    @Override
+    public void hideResizingFrame() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mWindowManager.hideResizingFrame();
+        }
+    }
+    public void moveTaskToBack(int taskId) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        enforceCallingPermission(android.Manifest.permission.REORDER_TASKS,
+                "moveTaskToBack()");
+
+        synchronized(this) {
+            TaskRecord tr = mStackSupervisor.anyTaskForIdLocked(taskId);
+            if (tr != null) {
+                // Todo by daniel
+//                if (tr == mStackSupervisor.mLockTaskModeTask) {
+//                    mStackSupervisor.showLockTaskToast();
+//                    return;
+//                }
+                if (DEBUG_STACK) Slog.d(TAG, "moveTaskToBack: moving task=" + tr);
+                ActivityStack stack = tr.stack;
+                if (stack.mResumedActivity != null && stack.mResumedActivity.task == tr) {
+                    if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),
+                            Binder.getCallingUid(), -1, -1, "Task to back")) {
+                        return;
+                    }
+                }
+                final long origId = Binder.clearCallingIdentity();
+                try {
+                    stack.moveTaskToBackLocked(taskId);
+                } finally {
+                    Binder.restoreCallingIdentity(origId);
+                }
+            }
+        }
+        }
+    }
+    //CHAOZHUO END
 }
diff --git a/services/core/java/com/android/server/am/ActivityRecord.java b/services/core/java/com/android/server/am/ActivityRecord.java
index 94063a9..7c2680e 100755
--- a/services/core/java/com/android/server/am/ActivityRecord.java
+++ b/services/core/java/com/android/server/am/ActivityRecord.java
@@ -49,6 +49,9 @@ import android.os.Process;
 import android.os.RemoteException;
 import android.os.SystemClock;
 import android.os.UserHandle;
+//CHAOZHUO START
+import android.text.TextUtils;
+//CHAOZHUO END
 import android.util.EventLog;
 import android.util.Log;
 import android.util.Slog;
@@ -56,6 +59,10 @@ import android.util.TimeUtils;
 import android.view.IApplicationToken;
 import android.view.WindowManager;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlSerializer;
@@ -105,6 +112,12 @@ final class ActivityRecord {
     final String taskAffinity; // as per ActivityInfo.taskAffinity
     final boolean stateNotNeeded; // As per ActivityInfo.flags
     boolean fullscreen; // covers the full screen?
+    //CHAOZHUO START
+    boolean opaque; // covers the full screen?
+    boolean window_mode;
+    boolean supportWindowMode;
+    boolean mPin;
+    //CHAOZHUO END
     final boolean noDisplay;  // activity is not displayed?
     final boolean componentSpecified;  // did caller specifiy an explicit component?
     final boolean rootVoiceInteraction;  // was this the root activity of a voice interaction?
@@ -543,9 +556,17 @@ final class ActivityRecord {
                             && ent.array.getBoolean(
                                     com.android.internal.R.styleable.Window_windowSwipeToDismiss,
                                             false)));
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            opaque = ent != null && !ent.array.getBoolean(
+                    com.android.internal.R.styleable.Window_windowIsFloating, false)
+                    && !translucent;
+            } else {
             fullscreen = ent != null && !ent.array.getBoolean(
                     com.android.internal.R.styleable.Window_windowIsFloating, false)
                     && !translucent;
+            }
+            //CHAOZHUO END
             noDisplay = ent != null && ent.array.getBoolean(
                     com.android.internal.R.styleable.Window_windowNoDisplay, false);
 
@@ -579,6 +600,17 @@ final class ActivityRecord {
             mActivityType = APPLICATION_ACTIVITY_TYPE;
             immersive = false;
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        window_mode = _service.mMultiWindowMgr.getAppRunningMode(packageName)
+                == MultiWindowManager.WINDOW_MODE && isApplicationActivity();
+        supportWindowMode = _service.mMultiWindowMgr.getAppConfigMode(packageName)
+                != MultiWindowManager.MODE_ONLY_FULLSCREEN;
+        mPin = false;
+
+        fullscreen = !window_mode  && opaque;
+        }
+        //CHAOZHUO END
     }
 
     void setTask(TaskRecord newTask, TaskRecord taskToAffiliateWith) {
@@ -586,6 +618,10 @@ final class ActivityRecord {
             task.stack.removeTask(task, "setTask");
         }
         task = newTask;
+        //CHAOZHUO START
+//        if (newTask.numFullscreen > 0)
+//            window_mode = false;
+        //CHAOZHUO END
         setTaskToAffiliateWith(taskToAffiliateWith);
     }
 
@@ -598,6 +634,16 @@ final class ActivityRecord {
     }
 
     boolean changeWindowTranslucency(boolean toOpaque) {
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (opaque == toOpaque) {
+            return false;
+        }
+
+        // Keep track of the number of fullscreen activities in this task.
+
+        fullscreen = toOpaque && !window_mode;
+        } else {
         if (fullscreen == toOpaque) {
             return false;
         }
@@ -606,6 +652,8 @@ final class ActivityRecord {
         task.numFullscreen += toOpaque ? +1 : -1;
 
         fullscreen = toOpaque;
+        }
+        //CHAOZHUO END
         return true;
     }
 
@@ -761,6 +809,17 @@ final class ActivityRecord {
             pendingOptions = options;
         }
     }
+    //CHAOZHUO START    
+    void setWindowMode(boolean window) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (window_mode != window && isApplicationActivity()) {
+            window_mode = window;
+            fullscreen = !window_mode && opaque;
+            task.numFullscreen += window ? -1 : 1;
+        }
+        }
+    }
+    //CHAOZHUO END
 
     void applyOptionsLocked() {
         if (pendingOptions != null
@@ -1049,6 +1108,11 @@ final class ActivityRecord {
                     mStackSupervisor.scheduleIdleLocked();
                 }
             }
+            // CHAOZHUO START FanGuofeng
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                service.notifyTaskActivityWindowVisible(service.getTaskInfo(task));
+            }
+            // CHAOZHUO END FanGuofeng
             service.scheduleAppGcsLocked();
         }
         service.appLaunchBoost(false);
diff --git a/services/core/java/com/android/server/am/ActivityStack.java b/services/core/java/com/android/server/am/ActivityStack.java
index 6e34876..caab987 100644
--- a/services/core/java/com/android/server/am/ActivityStack.java
+++ b/services/core/java/com/android/server/am/ActivityStack.java
@@ -75,7 +75,13 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
+//CHAOZHUO START
+import android.text.TextUtils;
+//CHAOZHUO END
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 /**
  * State and management of a single stack of activities.
  */
@@ -240,6 +246,9 @@ final class ActivityStack {
 
     /** Run all ActivityStacks through this */
     final ActivityStackSupervisor mStackSupervisor;
+    //CHAOZHUO START    
+    public boolean mIsFrontedStack = true;
+    //CHAOZHUO END
 
     Configuration mOverrideConfig;
     /** True if the stack was forced to full screen because {@link TaskRecord#mResizeable} is false
@@ -501,8 +510,22 @@ final class ActivityStack {
             // TODO(multi-display): Focus stack currently adjusted in call to move home stack.
             // Needs to also work if focus is moving to the non-home display.
             if (isOnHomeDisplay()) {
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                mStackSupervisor.setFocusedStack(this);
+                } else {
                 mStackSupervisor.moveHomeStack(homeStack, reason, lastFocusStack);
+                }
+                //CHAOZHUO END
+            }
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (!isStackBehindVisible()) {
+                boolean pausing = mStackSupervisor.pauseBackStacks(
+                        mStackSupervisor.mUserLeaving, true, true);
             }
+            }
+            //CHAOZHUO END
             final TaskRecord task = topTask();
             if (task != null) {
                 mWindowManager.moveTaskToTop(task.taskId);
@@ -827,10 +850,14 @@ final class ActivityStack {
         }
         ActivityRecord prev = mResumedActivity;
         if (prev == null) {
+            //CHAOZHUO START
+            if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
             if (!resuming) {
                 Slog.wtf(TAG, "Trying to pause when nothing is resumed");
                 mStackSupervisor.resumeTopActivitiesLocked();
             }
+            }
+            //CHAOZHUO END
             return false;
         }
 
@@ -1027,6 +1054,11 @@ final class ActivityStack {
                         if (DEBUG_PAUSE) Slog.v(TAG_PAUSE, "To many pending stops, forcing idle");
                         mStackSupervisor.scheduleIdleLocked();
                     } else {
+                        //CHAOZHUO START
+                        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                        mStackSupervisor.scheduleIdleLocked();
+                        }
+                        //CHAOZHUO END
                         mStackSupervisor.checkReadyForSleepLocked();
                     }
                 }
@@ -1174,7 +1206,13 @@ final class ActivityStack {
                 while (activityNdx < numActivities) {
                     final ActivityRecord activity = activities.get(activityNdx);
                     if (!activity.finishing) {
+                        //CHAOZHUO START
+                        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                        return historyStack.mFullscreen && activity.opaque ? null : activity;
+                        } else {
                         return historyStack.mFullscreen && activity.fullscreen ? null : activity;
+                        }
+                        //CHAOZHUO END
                     }
                     ++activityNdx;
                 }
@@ -1207,14 +1245,27 @@ final class ActivityStack {
 
     // Checks if any of the stacks above this one has a fullscreen activity behind it.
     // If so, this stack is hidden, otherwise it is visible.
-    private boolean isStackVisibleLocked() {
+    //CHAOZHUO START
+    boolean isStackVisibleLocked() {
+    //CHAOZHUO END
         if (!isAttached()) {
             return false;
         }
-
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (!mIsFrontedStack) {
+            return false;
+        }
+        
+        if (mResumedActivity != null && mResumedActivity.mPin) {
+            return true;
+        }
+        } else {
         if (mStackSupervisor.isFrontStack(this)) {
             return true;
         }
+        }
+        //CHAOZHUO END
 
         /**
          * Start at the task above this one and go up, looking for a visible
@@ -1242,16 +1293,62 @@ final class ActivityStack {
                     // 2. Either:
                     // - Full Screen Activity OR
                     // - On top of Home and our stack is NOT home
+                    //CHAOZHUO START
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    if(r.isHomeActivity()) {
+                        return false;
+                    }
+                    if (r.window_mode)
+                    	break;
+                    if (!r.finishing && (r.fullscreen)) {
+                        return false;
+                    }
+                    } else {
                     if (!r.finishing && r.visible && (r.fullscreen ||
                             (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()))) {
                         return false;
                     }
+                    }
+                    //CHAOZHUO END
                 }
             }
         }
 
         return true;
     }
+    //CHAOZHUO START
+    boolean isStackBehindVisible() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        final ArrayList<TaskRecord> tasks = getAllTasks();
+        if (!mIsFrontedStack)
+            return true;
+        for (int taskNdx = 0; taskNdx < tasks.size(); taskNdx++) {
+            final TaskRecord task = tasks.get(taskNdx);
+            final ArrayList<ActivityRecord> activities = task.mActivities;
+            for (int activityNdx = 0; activityNdx < activities.size(); activityNdx++) {
+                final ActivityRecord r = activities.get(activityNdx);
+
+                // Conditions for an activity to obscure the stack we're
+                // examining:
+                // 1. Not Finishing AND Visible AND:
+                // 2. Either:
+                // - Full Screen Activity OR
+                // - On top of Home and our stack is NOT home
+                if(r.isHomeActivity()) {
+                    return false;
+                }
+                if (r.window_mode)
+                	break;
+                if (!r.finishing && (r.fullscreen)) {
+                    return false;
+                }
+            }
+        }
+        return true;
+        }
+        return false;
+    }
+    //CHAOZHUO END
 
     /**
      * Make sure that all activities that need to be visible (that is, they
@@ -1280,6 +1377,9 @@ final class ActivityStack {
         // make sure any activities under it are now visible.
         boolean aboveTop = true;
         boolean behindFullscreen = !isStackVisibleLocked();
+        //CHAOZHUO START
+        boolean aboveOpaque = false;
+        //CHAOZHUO END
         boolean noStackActivityResumed = (isInStackLocked(starting) == null);
 
         for (int taskNdx = mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
@@ -1296,7 +1396,9 @@ final class ActivityStack {
                 aboveTop = false;
                 // mLaunchingBehind: Activities launching behind are at the back of the task stack
                 // but must be drawn initially for the animation as though they were visible.
-                if (!behindFullscreen || r.mLaunchTaskBehind) {
+                //CHAOZHUO START
+                if ((!behindFullscreen || r.mLaunchTaskBehind ) && !aboveOpaque) {
+                //CHAOZHUO END
                     if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,
                             "Make visible? " + r + " finishing=" + r.finishing
                             + " state=" + r.state);
@@ -1435,6 +1537,13 @@ final class ActivityStack {
                         if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY, "Already invisible: " + r);
                     }
                 }
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                if (r.opaque) {
+                    aboveOpaque = true;
+                }
+                }
+                //CHAOZHUO END
             }
         }
 
@@ -1604,15 +1713,29 @@ final class ActivityStack {
             // Only resume home if on home display
             final int returnTaskType = prevTask == null || !prevTask.isOverHomeStack() ?
                     HOME_ACTIVITY_TYPE : prevTask.getTaskToReturnTo();
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (!mWindowManager.isStackFullScreen(mStackId) && !isHomeStack())
+                return false;
+            return isOnHomeDisplay() && isHomeStack() &&
+                    mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);
+            } else {
             return isOnHomeDisplay() &&
                     mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);
+            }
+            //CHAOZHUO END
         }
 
         next.delayedResume = false;
+        //CHAOZHUO START
+        boolean isStackVisible = CZSwitchManager.BUILD_MAIN_SWITCH_ON ? isStackVisibleLocked() : true;
+        //CHAOZHUO END
 
         // If the top activity is the resumed one, nothing to do.
+        //CHAOZHUO START
         if (mResumedActivity == next && next.state == ActivityState.RESUMED &&
-                    mStackSupervisor.allResumedActivitiesComplete()) {
+                    mStackSupervisor.allResumedActivitiesComplete()&& isStackVisible) {
+        //CHAOZHUO END
             // Make sure we have executed any pending transitions, since there
             // should be nothing left to do at this point.
             mWindowManager.executeAppTransition();
@@ -1623,6 +1746,13 @@ final class ActivityStack {
             if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();
             return false;
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (!isStackVisible && next != null) {
+            return false;
+        }
+        }
+        //CHAOZHUO END
 
         final TaskRecord nextTask = next.task;
         if (prevTask != null && prevTask.stack == this &&
@@ -1725,7 +1855,16 @@ final class ActivityStack {
         // We need to start pausing the current activity so the top one
         // can be resumed...
         boolean dontWaitForPause = (next.info.flags&ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != 0;
-        boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);
+        //CHAOZHUO START
+        boolean pausing = false;
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (!isStackBehindVisible()) {
+            mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);
+        }
+        } else {
+            pausing = mStackSupervisor.pauseBackStacks(userLeaving, true, dontWaitForPause);
+        }
+        //CHAOZHUO END
         if (mResumedActivity != null) {
             if (DEBUG_STATES) Slog.d(TAG_STATES,
                     "resumeTopActivityLocked: Pausing " + mResumedActivity);
@@ -2103,7 +2242,9 @@ final class ActivityStack {
                         task.addActivityToTop(r);
                         r.putInHistory();
                         mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,
-                                r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,
+                                //CHAOZHUO START
+                                r.task.taskId, mStackId, r.info.screenOrientation, CZSwitchManager.BUILD_MAIN_SWITCH_ON ? r.window_mode : r.fullscreen,
+                                //CHAOZHUO END
                                 (r.info.flags & ActivityInfo.FLAG_SHOW_FOR_ALL_USERS) != 0,
                                 r.userId, r.info.configChanges, task.voiceSession != null,
                                 r.mLaunchTaskBehind);
@@ -2170,6 +2311,12 @@ final class ActivityStack {
                     r.appToken, r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,
                     (r.info.flags & ActivityInfo.FLAG_SHOW_FOR_ALL_USERS) != 0, r.userId,
                     r.info.configChanges, task.voiceSession != null, r.mLaunchTaskBehind);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mWindowManager.setAppWindowMode(r.appToken,r.window_mode);
+            //r.appToken.
+            }
+            //CHAOZHUO END
             boolean doShow = true;
             if (newTask) {
                 // Even though this activity is starting fresh, we still need
@@ -2618,6 +2765,8 @@ final class ActivityStack {
         if (mStackSupervisor.isFrontStack(this) && mService.mFocusedActivity == r) {
             ActivityRecord next = topRunningActivityLocked(null);
             final String myReason = reason + " adjustFocus";
+            //CHAOZHUO START
+            if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
             if (next != r) {
                 final TaskRecord task = r.task;
                 if (r.frontOfTask && task == topTask() && task.isOverHomeStack()) {
@@ -2637,6 +2786,8 @@ final class ActivityStack {
                     }
                 }
             }
+            }
+            //CHAOZHUO END
 
             final ActivityRecord top = mStackSupervisor.topRunningActivityLocked();
             if (top != null) {
@@ -2986,7 +3137,14 @@ final class ActivityStack {
         if (DEBUG_ALL) Slog.v(TAG, "Enqueueing pending finish: " + r);
         mStackSupervisor.mFinishingActivities.add(r);
         r.resumeKeyDispatchingLocked();
-        mStackSupervisor.getFocusedStack().resumeTopActivityLocked(null);
+        //CHAOZHUO START
+        boolean result = mStackSupervisor.getFocusedStack().resumeTopActivityLocked(null);
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (!result && r.frontOfTask && mTaskHistory.size() <= 1) {
+            mStackSupervisor.scheduleIdleLocked();
+        }
+        }
+        //CHAOZHUO END
         return r;
     }
 
@@ -3213,10 +3371,19 @@ final class ActivityStack {
         if (task != null && task.removeActivity(r)) {
             if (DEBUG_STACK) Slog.i(TAG_STACK,
                     "removeActivityFromHistoryLocked: last activity removed from " + this);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (mStackSupervisor.isFrontStack(this) && mWindowManager.isStackFullScreen(mStackId) && task == topTask() &&
+                    task.isOverHomeStack()) {
+                //mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(), reason);
+            }
+            } else {
             if (mStackSupervisor.isFrontStack(this) && task == topTask() &&
                     task.isOverHomeStack()) {
                 mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(), reason);
             }
+            }
+            //CHAOZHUO END
             removeTask(task, reason);
         }
         cleanUpActivityServicesLocked(r);
@@ -3646,7 +3813,11 @@ final class ActivityStack {
     final void moveTaskToFrontLocked(TaskRecord tr, boolean noAnimation, Bundle options,
             AppTimeTracker timeTracker, String reason) {
         if (DEBUG_SWITCH) Slog.v(TAG_SWITCH, "moveTaskToFront: " + tr);
-
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {        
+        mIsFrontedStack = true;
+        }
+        //CHAOZHUO END
         final int numTasks = mTaskHistory.size();
         final int index = mTaskHistory.indexOf(tr);
         if (numTasks == 0 || index < 0)  {
@@ -3669,6 +3840,11 @@ final class ActivityStack {
         // Shift all activities with this task up to the top
         // of the stack, keeping them in the same internal order.
         insertTaskAtTop(tr, null);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        moveToFront(reason);
+        }
+        //CHAOZHUO END
 
         // Set focus to the top running activity of this stack.
         ActivityRecord r = topRunningActivityLocked(null);
@@ -3684,8 +3860,17 @@ final class ActivityStack {
         } else {
             updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT, options);
         }
-
-        mStackSupervisor.resumeTopActivitiesLocked();
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (isStackBehindVisible())
+            resumeTopActivityInnerLocked(null, null);
+        else 
+            mStackSupervisor.resumeTopActivitiesLocked();
+        } else {
+            mStackSupervisor.resumeTopActivitiesLocked();
+        }
+        //CHAOZHUO END
+        
         EventLog.writeEvent(EventLogTags.AM_TASK_TO_FRONT, tr.userId, tr.taskId);
 
         if (VALIDATE_TOKENS) {
@@ -3710,7 +3895,17 @@ final class ActivityStack {
             Slog.i(TAG, "moveTaskToBack: bad taskId=" + taskId);
             return false;
         }
-
+        //CHAOZHUO START
+        boolean stackBehindVisible = false;
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (!mIsFrontedStack) {
+            Slog.e(TAG, "moveTaskToBack: not in front=" + taskId);
+        }
+        stackBehindVisible = isStackBehindVisible();
+        mIsFrontedStack = false;
+        }
+        //CHAOZHUO END
+        
         Slog.i(TAG, "moveTaskToBack: " + tr);
         mStackSupervisor.removeLockedTaskLocked(tr);
 
@@ -3756,6 +3951,11 @@ final class ActivityStack {
         mTaskHistory.remove(tr);
         mTaskHistory.add(0, tr);
         updateTaskMovement(tr, false);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        startPausingLocked(true, false,false,true);
+        }
+        //CHAOZHUO END
 
         // There is an assumption that moving a task to the back moves it behind the home activity.
         // We make sure here that some activity in the stack will launch home.
@@ -3770,8 +3970,14 @@ final class ActivityStack {
                 task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
             }
         }
-
-        mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK, false);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        // Todo by Daniel this call will lead to app window dismiss delay Reason unknown So... 
+        // mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK, false);
+        } else {
+            mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK, false);
+        }
+        //CHAOZHUO END
         mWindowManager.moveTaskToBottom(taskId);
 
         if (VALIDATE_TOKENS) {
@@ -3779,6 +3985,33 @@ final class ActivityStack {
         }
 
         final TaskRecord task = mResumedActivity != null ? mResumedActivity.task : null;
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+//        if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
+//            if (!mService.mBooting && !mService.mBooted) {
+//                // Not ready yet!
+//                return false;
+//            }
+//            final int taskToReturnTo = tr.getTaskToReturnTo();
+//            tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
+//            return mStackSupervisor.resumeHomeStackTask(taskToReturnTo, null, "moveTaskToBack");
+//        }
+
+        ActivityStack nextStack = null;
+        for (int i = tr.stack.mStacks.size() - 1; i >= 0; i--) {
+            final ActivityStack stack = tr.stack.mStacks.get(i);
+            if (stack != tr.stack) {
+                nextStack = stack;
+                break;
+            }
+        }
+        tr.stack.mStacks.remove(tr.stack);
+        tr.stack.mStacks.add(0, tr.stack);
+
+        mStackSupervisor.setFocusedStack(nextStack);
+        if (!stackBehindVisible)
+            mStackSupervisor.resumeTopActivitiesLocked(nextStack,null,null);
+        } else {
         if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
             if (!mService.mBooting && !mService.mBooted) {
                 // Not ready yet!
@@ -3790,6 +4023,8 @@ final class ActivityStack {
         }
 
         mStackSupervisor.resumeTopActivitiesLocked();
+        }
+        //CHAOZHUO END
         return true;
     }
 
@@ -3989,6 +4224,11 @@ final class ActivityStack {
             r.app.thread.scheduleRelaunchActivity(r.appToken, results, newIntents, changes,
                     !andResume, new Configuration(mService.mConfiguration),
                     new Configuration(mOverrideConfig));
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mService.mMultiWindowMgr.updateWindowMode(r, r.window_mode);
+            }
+            //CHAOZHUO END
             // Note: don't need to call pauseIfSleepingLocked() here, because
             // the caller will only pass in 'andResume' if this activity is
             // currently resumed, which implies we aren't sleeping.
@@ -4016,7 +4256,9 @@ final class ActivityStack {
                 if (r.appToken == token) {
                     return true;
                 }
-                if (r.fullscreen && !r.finishing) {
+                //CHAOZHUO START
+                if ((CZSwitchManager.BUILD_MAIN_SWITCH_ON ? r.opaque : r.fullscreen) && !r.finishing) {
+                //CHAOZHUO END
                     return false;
                 }
             }
@@ -4291,6 +4533,11 @@ final class ActivityStack {
         if (notMoving) {
             mStackSupervisor.removeLockedTaskLocked(task);
             mWindowManager.removeTask(task.taskId);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mService.notifyTaskClosedLocked(mService.getTaskInfo(task));
+            }
+            //CHAOZHUO END
         }
 
         final ActivityRecord r = mResumedActivity;
@@ -4328,15 +4575,23 @@ final class ActivityStack {
         if (mTaskHistory.isEmpty()) {
             if (DEBUG_STACK) Slog.i(TAG_STACK, "removeTask: removing stack=" + this);
             final boolean notHomeStack = !isHomeStack();
+            //CHAOZHUO START
+            if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
             if (isOnHomeDisplay()) {
                 String myReason = reason + " leftTaskHistoryEmpty";
                 if (mFullscreen || !adjustFocusToNextVisibleStackLocked(null, myReason)) {
                     mStackSupervisor.moveHomeStack(notHomeStack, myReason);
                 }
             }
+            }
+            //CHAOZHUO END
             if (mStacks != null) {
                 mStacks.remove(this);
+                //CHAOZHUO START
+                if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
                 mStacks.add(0, this);
+                }
+                //CHAOZHUO END
             }
             if (notHomeStack) {
                 mActivityContainer.onTaskListEmptyLocked();
@@ -4352,6 +4607,13 @@ final class ActivityStack {
         TaskRecord task = new TaskRecord(mService, taskId, info, intent, voiceSession,
                 voiceInteractor);
         addTask(task, toTop, false);
+
+        // CHAOZHUO START fanguofeng
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mService.notifyTaskCreateLocked(mService.getTaskInfo(task));
+        }
+        // CHAOZHUO END fanguofeng
+
         return task;
     }
 
@@ -4391,7 +4653,13 @@ final class ActivityStack {
         // We override the configuration only when the stack's dimensions are different from
         // the display. In this manner, we know that if the override configuration is empty,
         // the stack is necessarily full screen.
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mFullscreen = true;//Configuration.EMPTY.equals(mOverrideConfig);
+        } else {
         mFullscreen = Configuration.EMPTY.equals(mOverrideConfig);
+        }
+        //CHAOZHUO END
         return !mOverrideConfig.equals(oldConfig);
     }
 
diff --git a/services/core/java/com/android/server/am/ActivityStackSupervisor.java b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
index 17a86ca..89aad1c 100644
--- a/services/core/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
@@ -126,6 +126,15 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Set;
+//CHAOZHUO START
+import java.util.HashMap;
+import android.text.TextUtils;
+import android.graphics.Rect;
+//CHAOZHUO END
+
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 public final class ActivityStackSupervisor implements DisplayListener {
     private static final String TAG = TAG_WITH_CLASS_NAME ? "ActivityStackSupervisor" : TAG_AM;
@@ -428,6 +437,10 @@ public final class ActivityStackSupervisor implements DisplayListener {
      * Use {@link ActivityStack#isStackVisibleLocked} to determine if a specific
      * stack is visible or not. */
     boolean isFrontStack(ActivityStack stack) {
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        return stack.mIsFrontedStack && stack.isStackVisibleLocked();
+        } else {
         if (stack == null) {
             return false;
         }
@@ -437,6 +450,8 @@ public final class ActivityStackSupervisor implements DisplayListener {
             stack = parent.task.stack;
         }
         return stack == mFocusedStack;
+        }
+        //CHAOZHUO END
     }
 
     void moveHomeStack(boolean toFront, String reason) {
@@ -510,8 +525,10 @@ public final class ActivityStackSupervisor implements DisplayListener {
         }
 
         mHomeStack.moveHomeStackTaskToTop(homeStackTaskType);
+        //CHAOZHUO START
         ActivityRecord r = getHomeActivity();
-        if (r != null) {
+        if (r != null && (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? r.isHomeActivity() : true)) {
+        //CHAOZHUO END
             mService.setFocusedActivityLocked(r, reason);
             return resumeTopActivitiesLocked(mHomeStack, prev, null);
         }
@@ -552,12 +569,15 @@ public final class ActivityStackSupervisor implements DisplayListener {
         if (!restoreFromRecents) {
             return task;
         }
-
+//CHAOZHUO START
+        if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
         if (!restoreRecentTaskLocked(task)) {
             if (DEBUG_RECENTS) Slog.w(TAG_RECENTS,
                     "Couldn't restore task id=" + id + " found in recents");
             return null;
         }
+        }
+//CHAOZHUO END
         if (DEBUG_RECENTS) Slog.w(TAG_RECENTS, "Restored task id=" + id + " from in recents");
         return task;
     }
@@ -645,10 +665,13 @@ public final class ActivityStackSupervisor implements DisplayListener {
             ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;
             for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {
                 final ActivityStack stack = stacks.get(stackNdx);
-                if (!isFrontStack(stack) || stack.numActivities() == 0) {
+                //CHAOZHUO START
+                final ActivityRecord resumedActivity = stack.mResumedActivity;
+                if (!isFrontStack(stack) || stack.numActivities() == 0
+                        || (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? resumedActivity == null : false)) {
                     continue;
                 }
-                final ActivityRecord resumedActivity = stack.mResumedActivity;
+                //CHAOZHUO END
                 if (resumedActivity == null || !resumedActivity.idle) {
                     if (DEBUG_STATES) Slog.d(TAG_STATES, "allResumedActivitiesIdle: stack="
                              + stack.mStackId + " " + resumedActivity + " not idle");
@@ -709,7 +732,9 @@ public final class ActivityStackSupervisor implements DisplayListener {
             ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;
             for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {
                 final ActivityStack stack = stacks.get(stackNdx);
-                if (!isFrontStack(stack) && stack.mResumedActivity != null) {
+                //CHAOZHUO START
+                if ((!isFrontStack(stack) || (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? !stack.isStackVisibleLocked() : false)) && stack.mResumedActivity != null) {
+                //CHAOZHUO END
                     if (DEBUG_STATES) Slog.d(TAG_STATES, "pauseBackStacks: stack=" + stack +
                             " mResumedActivity=" + stack.mResumedActivity);
                     someActivityPaused |= stack.startPausingLocked(userLeaving, false, resuming,
@@ -808,6 +833,12 @@ public final class ActivityStackSupervisor implements DisplayListener {
 
         // Return to the home stack.
         final ArrayList<ActivityStack> stacks = mHomeStack.mStacks;
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (stacks == null)
+            return null;
+        }
+        //CHAOZHUO END
         for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {
             final ActivityStack stack = stacks.get(stackNdx);
             if (stack != focusedStack && isFrontStack(stack)) {
@@ -819,6 +850,26 @@ public final class ActivityStackSupervisor implements DisplayListener {
         }
         return null;
     }
+    //CHAOZHUO START
+    ArrayList<TaskRecord> getTasksLocked(int callingUid) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        ArrayList<TaskRecord> runningTaskLists =
+                new ArrayList<TaskRecord>();
+        final int numDisplays = mActivityDisplays.size();
+        for (int displayNdx = 0; displayNdx < numDisplays; ++displayNdx) {
+            ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;
+            for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {
+                final ActivityStack stack = stacks.get(stackNdx);
+                if (stack.isHomeStack())
+                    continue;
+                runningTaskLists.addAll(stack.getAllTasks());
+            }
+        }
+        return runningTaskLists;
+        }
+        return null;
+    }
+    //CHAOZHUO END
 
     void getTasksLocked(int maxNum, List<RunningTaskInfo> list, int callingUid, boolean allowed) {
         // Gather all of the running tasks for each stack into runningTaskLists.
@@ -1214,6 +1265,11 @@ public final class ActivityStackSupervisor implements DisplayListener {
         }
         mService.updateLruProcessLocked(app, true, null);
         mService.updateOomAdjLocked();
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mService.mMultiWindowMgr.updateProcessPrefSize(r);
+        }
+        //CHAOZHUO END
 
         final TaskRecord task = r.task;
         if (task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE ||
@@ -1286,6 +1342,13 @@ public final class ActivityStackSupervisor implements DisplayListener {
                     new Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,
                     task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,
                     newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mService.mMultiWindowMgr.updateWindowMode(r, r.window_mode);
+            showWindowOpenModeTips(r);
+            }
+            //CHAOZHUO END
+
 
             if ((app.info.privateFlags&ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != 0) {
                 // This may be a heavy-weight process!  Note that the package
@@ -1361,6 +1424,36 @@ public final class ActivityStackSupervisor implements DisplayListener {
 
         return true;
     }
+    
+    //CHAOZHUO START
+    void showWindowOpenModeTips(ActivityRecord r) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        boolean firstTimeWindowMode = Settings.Secure.getInt(mService.mContext.getContentResolver(),
+                Settings.Secure.FIRST_TIME_OPEN_WINDOW_ACTIVITY, 0) == 0;
+        boolean firstTimeFullScreenMode = Settings.Secure.getInt(mService.mContext.getContentResolver(),
+                Settings.Secure.FIRST_TIME_OPEN_FULLSCREEN_ACTIVITY, 0) == 0;
+        
+        boolean userSetupComplete = Settings.Secure.getIntForUser(mService.mContext.getContentResolver(),
+                Settings.Secure.USER_SETUP_COMPLETE, 0, UserHandle.USER_CURRENT) != 0;
+
+        if (r.isApplicationActivity() && userSetupComplete && ((r.window_mode && firstTimeWindowMode)
+                || (!r.window_mode && firstTimeFullScreenMode))) {
+            Message msg = Message.obtain();
+            msg.arg1 = 1;
+            msg.obj = r;
+            msg.what = ActivityManagerService.SHOW_FIRST_ACTIVITY_OPEN_MSG;
+            mService.mUiHandler.sendMessageDelayed(msg, 2*1000);
+            if (r.window_mode) {
+                Settings.Secure.putInt(mService.mContext.getContentResolver(),
+                        Settings.Secure.FIRST_TIME_OPEN_WINDOW_ACTIVITY, 1);
+            } else {
+                Settings.Secure.putInt(mService.mContext.getContentResolver(),
+                        Settings.Secure.FIRST_TIME_OPEN_FULLSCREEN_ACTIVITY, 1);
+            }
+        }
+        }
+    }
+    //CHAOZHUO END
 
     void startSpecificActivityLocked(ActivityRecord r,
             boolean andResume, boolean checkConfig) {
@@ -1392,6 +1485,13 @@ public final class ActivityStackSupervisor implements DisplayListener {
             // restart the application.
         }
 
+        //CHAOZHUO START
+        // CHAOZHUO FanGuofeng
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        mService.notifyTaskProcessStarted(mService.getTaskInfo(r.task));
+        }
+        // CHAOZHUO FanGuofeng
+        //CHAOZHUO END
         mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,
                 "activity", r.intent.getComponent(), false, false, true);
     }
@@ -1443,7 +1543,19 @@ public final class ActivityStackSupervisor implements DisplayListener {
                 }
             }
         }
-
+        //CHAOZHUO START
+        // CHAOZHUO WULIANG
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (TextUtils.equals(Intent.ACTION_CHOOSER, intent.getAction())
+                && sourceRecord != null
+                && sourceRecord.task != null
+                && sourceRecord.task.stack != null
+                && sourceRecord.task.stack.isHomeStack()) {
+            intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
+        }
+        }
+        // CHAOZHUO WULIANG END
+        //CHAOZHUO END
         final int launchFlags = intent.getFlags();
 
         if ((launchFlags & Intent.FLAG_ACTIVITY_FORWARD_RESULT) != 0 && sourceRecord != null) {
@@ -1759,7 +1871,9 @@ public final class ActivityStackSupervisor implements DisplayListener {
 
         // On leanback only devices we should keep all activities in the same stack.
         if (!mLeanbackOnlyDevice &&
-                (r.isApplicationActivity() || (task != null && task.isApplicationTask()))) {
+        //CHAOZHUO START
+                ((CZSwitchManager.BUILD_MAIN_SWITCH_ON ? !r.isHomeActivity() : r.isApplicationActivity()) || (task != null && task.isApplicationTask()))) {
+        //CHAOZHUO END
 
             ActivityStack stack;
 
@@ -1784,7 +1898,8 @@ public final class ActivityStackSupervisor implements DisplayListener {
                 r.mInitialActivityContainer = null;
                 return container.mStack;
             }
-
+            //CHAOZHUO START
+            if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
             if (mFocusedStack != mHomeStack && (!newTask ||
                     mFocusedStack.mActivityContainer.isEligibleForNewTasks())) {
                 if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG_FOCUS,
@@ -1801,11 +1916,23 @@ public final class ActivityStackSupervisor implements DisplayListener {
                     return stack;
                 }
             }
-
+            }
+            //CHAOZHUO END
             // Need to create an app stack for this user.
+            //CHAOZHUO START
+            Rect rect = null;
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                rect = mService.mMultiWindowMgr.newTaskStackCreated(r);
+            }
+            //CHAOZHUO END
             stack = createStackOnDisplay(getNextStackId(), Display.DEFAULT_DISPLAY);
             if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG_FOCUS, "computeStackFocus: New stack r="
                     + r + " stackId=" + stack.mStackId);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mService.resizeStack(stack.mStackId, rect);
+            }
+            //CHAOZHUO END
             return stack;
         }
         return mHomeStack;
@@ -1824,6 +1951,53 @@ public final class ActivityStackSupervisor implements DisplayListener {
         task.stack.moveToFront(reason);
         return true;
     }
+    
+    //CHAOZHUO START
+    private int mHomeStackIndex = 0;
+    public void setFocusedStack(ActivityStack stack) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (DEBUG_STACK) Slog.d(TAG, "setFocusedStack: old=" +
+                mFocusedStack + " new=" + stack +
+                " Callers=" + Debug.getCallers(10));
+        if (stack.isHomeStack() && mFocusedStack != stack) {
+            mHomeStackIndex = stack.mStacks.indexOf(stack);
+        }
+        mFocusedStack = stack;
+        mFocusedStack.mStacks.remove(mFocusedStack);
+        mFocusedStack.mStacks.add(mFocusedStack);
+
+        try {
+            if (mFocusedStack.getAllTasks() != null &&
+                    mFocusedStack.getAllTasks().size() != 0)
+                mService.notifyFocusedTaskChangedLocked(mService.getTaskInfo(mFocusedStack.getAllTasks().get(0)));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        }
+    }
+
+    void moveHomeStackToBack() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mFocusedStack == mHomeStack) {
+        	int homeIndex = mHomeStack.mStacks
+                    .indexOf(mHomeStack);
+        	if (homeIndex > 0) {
+            ActivityStack stack = mHomeStack.mStacks.get(mHomeStack.mStacks
+                    .indexOf(mHomeStack) - 1);
+            mHomeStack.mStacks.remove(mHomeStack);
+            mHomeStack.mStacks.add(mHomeStackIndex, mHomeStack);
+            if (mHomeStack.mResumedActivity != null
+                    && mHomeStack.mResumedActivity.task != null)
+                mWindowManager.moveTaskToBottom(mHomeStack.mResumedActivity.task.taskId);
+            if (stack.mIsFrontedStack) {
+                mService.setFocusedStack(stack.mStackId);
+            }
+            resumeTopActivitiesLocked();
+        	}
+        }
+        }
+    }
+    //CHAOZHUO END
 
     final int startActivityUncheckedLocked(final ActivityRecord r, ActivityRecord sourceRecord,
             IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, int startFlags,
@@ -2117,7 +2291,13 @@ public final class ActivityStackSupervisor implements DisplayListener {
                     if (!movedToFront) {
                         if (DEBUG_TASKS) Slog.d(TAG_TASKS, "Bring to front target: " + targetStack
                                 + " from " + intentActivity);
+                        //CHAOZHUO START
+                        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                        targetStack.moveTaskToFrontLocked(r.task, noAnimation, options, r.appTimeTracker, "intentActivityFound");
+                        } else {
                         targetStack.moveToFront("intentActivityFound");
+                        }
+                        //CHAOZHUO END
                     }
 
                     // If the caller has requested that the target task be
@@ -2307,6 +2487,13 @@ public final class ActivityStackSupervisor implements DisplayListener {
         if (r.resultTo == null && inTask == null && !addingToTask
                 && (launchFlags & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {
             newTask = true;
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (isTooManyWindowActivity()) {
+                mService.mUiHandler.sendMessage(mService.mUiHandler.obtainMessage(
+                        ActivityManagerService.SHOW_TOO_MANY_ACTIVIYT_MSG));
+                return ActivityManager.START_TOO_MANY_OPENED_ACTIVITY;
+            }
+            }
             targetStack = computeStackFocus(r, newTask);
             targetStack.moveToFront("startingNewTask");
 
@@ -2463,6 +2650,35 @@ public final class ActivityStackSupervisor implements DisplayListener {
         }
         return ActivityManager.START_SUCCESS;
     }
+    
+    // CHAOZHUO START
+    private static final int MAX_WINDOWMIZE_COUNT = 8;
+    boolean isTooManyWindowActivity() {
+        boolean ret = false;
+        int fullScrencCount = 0;
+        for (int displayNdx = mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {
+            final ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;
+            for (int stackNdx = stacks.size() - 1; stackNdx >= 0; --stackNdx) {
+                final ActivityStack stack = stacks.get(stackNdx);
+                if (stack == null || stack.isHomeStack())
+                    continue;
+                for(int index = stack.getAllTasks().size() -1;index >=0 ; --index) {
+                    final TaskRecord task = stack.getAllTasks().get(index);
+                    if (task == null)
+                        continue;
+                    final ActivityRecord activity = task.getTopActivity();
+                    if (activity != null && activity.window_mode) {
+                        fullScrencCount ++;
+                    }
+                }
+            }
+        }
+        if (fullScrencCount >= MAX_WINDOWMIZE_COUNT) {
+            ret = true;
+        }
+        return ret;
+    }
+    // CHAOZHUO END
 
     final void doPendingActivityLaunchesLocked(boolean doResume) {
         while (!mPendingActivityLaunches.isEmpty()) {
@@ -3297,6 +3513,16 @@ public final class ActivityStackSupervisor implements DisplayListener {
 
     void ensureActivitiesVisibleLocked(ActivityRecord starting, int configChanges) {
         // First the front stacks. In case any are not fullscreen and are in front of home.
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (starting != null && starting.task != null && starting.task.stack != null) {
+            ActivityStack stack = starting.task.stack;
+            if (!stack.isStackBehindVisible()) {
+                return;
+            }
+        }
+        }
+        //CHAOZHUO END
         for (int displayNdx = mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {
             final ArrayList<ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks;
             final int topStackNdx = stacks.size() - 1;
@@ -3813,6 +4039,11 @@ public final class ActivityStackSupervisor implements DisplayListener {
         }
         info.taskIds = taskIds;
         info.taskNames = taskNames;
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        info.infront = stack.mIsFrontedStack;
+        }
+        //CHAOZHUO END
         return info;
     }
 
diff --git a/services/core/java/com/android/server/am/AppFirstOpenTips.java b/services/core/java/com/android/server/am/AppFirstOpenTips.java
new file mode 100644
index 0000000..75c8676
--- /dev/null
+++ b/services/core/java/com/android/server/am/AppFirstOpenTips.java
@@ -0,0 +1,172 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.am;
+
+import android.app.ActivityManager.StackInfo;
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.os.Message;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+
+final class AppFirstOpenTips {
+	private static final String TAG = "AppFirstOpenTips";
+
+	private static final int DISMISS = 1;
+	private static View mContentView;
+	private Context mContext;
+
+	WindowManager mWindowManager;
+
+	private final ActivityManagerService mService;
+	ActivityRecord mActivity;
+	boolean mWindowMode;
+	boolean mFirstOpen;
+
+	private int mGravity;
+	private int mLayoutRes;
+
+	public AppFirstOpenTips(ActivityManagerService service, Context context,
+			ActivityRecord activity, boolean firstOpen) {
+		mContext = context;
+		mService = service;
+
+		if (mWindowManager == null) {
+			mWindowManager = (WindowManager) context
+					.getSystemService(Context.WINDOW_SERVICE);
+		}
+		mActivity = activity;
+		LayoutInflater inflater = LayoutInflater.from(mContext);
+		
+		mWindowMode = activity.window_mode;
+		mFirstOpen = firstOpen;
+		if (firstOpen) {
+			if (mWindowMode) {
+				mGravity =  Gravity.TOP | Gravity.LEFT;
+				mLayoutRes = com.android.internal.R.layout.app_first_open_window_tips;
+			} else {
+				mGravity = Gravity.CENTER_HORIZONTAL | Gravity.TOP;
+				mLayoutRes = com.android.internal.R.layout.app_first_open_fullscreen_tips;
+			}
+		} else {
+			mGravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
+			mLayoutRes = com.android.internal.R.layout.app_too_many_window_tips;
+		}
+		
+		if (mContentView != null)
+			removeWindow();
+
+		mContentView = inflater.inflate(mLayoutRes, null);
+		mContentView.setOnTouchListener(mTouch);
+		
+		View getIt = mContentView.findViewById(com.android.internal.R.id.app_first_open_got_it);
+		if (getIt != null) {
+			getIt.setOnClickListener(new OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					removeWindow();
+				}
+			});
+		}
+	}
+
+	public void show() {
+		addWindow(mContext);
+		Message msg = mHandler.obtainMessage();
+		msg.what = DISMISS;
+		mHandler.sendMessageDelayed(msg, 8 * 1000);
+	}
+
+	private void addWindow(Context context) {
+		WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
+
+		layoutParams.type = WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
+		layoutParams.format = PixelFormat.RGBA_8888;
+		layoutParams.gravity = mGravity;
+		layoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;
+		layoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;
+		
+		if (mWindowMode && mFirstOpen) {
+	        int screenWidth = mWindowManager.getDefaultDisplay().getWidth();
+	        int screenHeight = mWindowManager.getDefaultDisplay().getHeight();
+	        mContentView.measure(screenWidth, screenHeight);
+	        
+	        final int width = mContentView.getMeasuredWidth();
+
+			StackInfo info = mService
+					.getStackInfo(mActivity.task.stack.mStackId);
+			Rect rect = info.bounds;
+			
+			final int xPos = rect.left + (rect.width() - width) / 2;
+
+			layoutParams.x = xPos;
+			layoutParams.y = rect.top + 50;// - layoutParams.height;
+		}
+		mWindowManager.addView(mContentView, layoutParams);
+	}
+
+	private void removeWindow() {
+		if (mContentView != null) {
+			mWindowManager.removeView(mContentView);
+			mContentView = null;
+		}
+	}
+
+	private final Handler mHandler = new Handler() {
+		public void handleMessage(Message msg) {
+			switch (msg.what) {
+			case DISMISS:
+				removeWindow();
+			}
+		}
+	};
+
+	private OnTouchListener mTouch = new OnTouchListener() {
+
+		@Override
+		public boolean onTouch(View v, MotionEvent event) {
+			if (event.getAction() == MotionEvent.ACTION_DOWN
+	                && isOutOfBounds(event)) {
+				removeWindow();
+	        }
+			return false;
+		}
+
+	};
+	private boolean isOutOfBounds(MotionEvent event) {
+        int padding = 20;
+        int[] location = new int[2];
+        mContentView.getLocationOnScreen(location);
+        int height = mContentView.getMeasuredHeight();
+        int width = mContentView.getMeasuredWidth();
+        if (event.getRawX() > location[0] + width || event.getRawX() < location[0]) {
+            return true;
+        }
+        float xxx = event.getRawY();
+        if (event.getRawY() > location[1] + height + padding || event.getRawY() < location[1]) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/services/core/java/com/android/server/am/AppOpenTips.java b/services/core/java/com/android/server/am/AppOpenTips.java
new file mode 100644
index 0000000..6dc0339
--- /dev/null
+++ b/services/core/java/com/android/server/am/AppOpenTips.java
@@ -0,0 +1,186 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.am;
+
+import android.app.ActivityManager.StackInfo;
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+
+final class AppOpenTips {
+    private static final String TAG = "AppFirstOpenTips";
+    public static final int FIRST_OPEN      = 1;
+    public static final int TOO_MANY_OPENED = 2;
+    public static final int CANNOT_SWITCH   = 3;
+
+    private static final int DISMISS = 1;
+    private static View mContentView = null;
+    private Context mContext;
+
+    WindowManager mWindowManager;
+
+    private final ActivityManagerService mService;
+    ActivityRecord mActivity;
+    boolean mWindowMode;
+
+    private int mGravity;
+    private int mLayoutRes;
+    private int mTipsType = FIRST_OPEN;
+
+    public AppOpenTips(ActivityManagerService service, Context context,
+            ActivityRecord activity, int type) {
+        mContext = context;
+        mService = service;
+        mTipsType = type;
+
+        if (mWindowManager == null) {
+            mWindowManager = (WindowManager) context
+                    .getSystemService(Context.WINDOW_SERVICE);
+        }
+        mActivity = activity;
+        LayoutInflater inflater = LayoutInflater.from(mContext);
+
+        if (mTipsType == FIRST_OPEN) {
+            mWindowMode = activity.window_mode;
+            if (mWindowMode) {
+                mGravity =  Gravity.TOP | Gravity.LEFT;
+                mLayoutRes = com.android.internal.R.layout.app_first_open_window_tips;
+            } else {
+                mGravity = Gravity.CENTER_HORIZONTAL | Gravity.TOP;
+                mLayoutRes = com.android.internal.R.layout.app_first_open_fullscreen_tips;
+            }
+        } else if (mTipsType == TOO_MANY_OPENED){
+            mGravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
+            mLayoutRes = com.android.internal.R.layout.app_too_many_window_tips;
+        } else if (mTipsType == CANNOT_SWITCH) {
+            mGravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
+            mLayoutRes = com.android.internal.R.layout.app_switch_to_window_nosupport;
+        }
+        
+        if (mContentView != null)
+            removeWindow();
+
+        mContentView = inflater.inflate(mLayoutRes, null);
+        mContentView.setOnTouchListener(mTouch);
+        
+        View getIt = mContentView.findViewById(com.android.internal.R.id.app_first_open_got_it);
+        if (getIt != null) {
+            getIt.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    removeWindow();
+                }
+            });
+        }
+    }
+
+    public void show() {
+        addWindow(mContext);
+        Message msg = mHandler.obtainMessage();
+        msg.what = DISMISS;
+        mHandler.removeMessages(DISMISS);
+        mHandler.sendMessageDelayed(msg, 5 * 1000);
+    }
+
+    private void addWindow(Context context) {
+        WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
+
+        layoutParams.type = WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
+        layoutParams.format = PixelFormat.RGBA_8888;
+        layoutParams.gravity = mGravity;
+        layoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;
+        layoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;
+        
+        if (mWindowMode && mTipsType == FIRST_OPEN) {
+            int screenWidth = mWindowManager.getDefaultDisplay().getWidth();
+            int screenHeight = mWindowManager.getDefaultDisplay().getHeight();
+            mContentView.measure(screenWidth, screenHeight);
+            
+            final int width = mContentView.getMeasuredWidth();
+
+            StackInfo info = mService
+                    .getStackInfo(mActivity.task.stack.mStackId);
+            Rect rect = info.bounds;
+            
+            final int xPos = rect.left + (rect.width() - width) / 2;
+
+            layoutParams.x = xPos;
+            layoutParams.y = rect.top + 50;// - layoutParams.height;
+        } else if (mTipsType == CANNOT_SWITCH ||
+                mTipsType == TOO_MANY_OPENED) {
+            layoutParams.y = 100;
+        }
+        mWindowManager.addView(mContentView, layoutParams);
+    }
+
+    private void removeWindow() {
+        if (mContentView != null) {
+            try{
+                mWindowManager.removeView(mContentView);
+            } catch(Exception e) {
+            }
+            mContentView = null;
+        }
+    }
+
+    private final Handler mHandler = new Handler(Looper.getMainLooper()) {
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+            case DISMISS:
+                removeWindow();
+            }
+        }
+    };
+
+    private OnTouchListener mTouch = new OnTouchListener() {
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN
+                    && isOutOfBounds(event)) {
+                removeWindow();
+            }
+            return false;
+        }
+
+    };
+    private boolean isOutOfBounds(MotionEvent event) {
+        int padding = 20;
+        int[] location = new int[2];
+        mContentView.getLocationOnScreen(location);
+        int height = mContentView.getMeasuredHeight();
+        int width = mContentView.getMeasuredWidth();
+        if (event.getRawX() > location[0] + width || event.getRawX() < location[0]) {
+            return true;
+        }
+        float xxx = event.getRawY();
+        if (event.getRawY() > location[1] + height + padding || event.getRawY() < location[1]) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/services/core/java/com/android/server/am/BroadcastQueue.java b/services/core/java/com/android/server/am/BroadcastQueue.java
index 6de8579..63c03b1 100644
--- a/services/core/java/com/android/server/am/BroadcastQueue.java
+++ b/services/core/java/com/android/server/am/BroadcastQueue.java
@@ -986,7 +986,7 @@ public final class BroadcastQueue {
                     skip = true;
                 }
             }
-
+            
             if (skip) {
                 if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,
                         "Skipping delivery of ordered [" + mQueueName + "] "
diff --git a/services/core/java/com/android/server/am/MultiWindowManager.java b/services/core/java/com/android/server/am/MultiWindowManager.java
new file mode 100644
index 0000000..bbea004
--- /dev/null
+++ b/services/core/java/com/android/server/am/MultiWindowManager.java
@@ -0,0 +1,694 @@
+//CHAOZHUO START
+package com.android.server.am;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlSerializer;
+
+import android.app.ActivityManager.StackInfo;
+import android.app.IApplicationThread;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.os.Handler;
+import android.util.AtomicFile;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.util.Slog;
+import android.util.Xml;
+import android.view.DisplayInfo;
+
+import com.android.internal.util.FastXmlSerializer;
+import com.android.server.wm.WindowManagerService;
+
+import com.chaozhuo.onlineconfig.CZOnlineConfigConstants;
+import com.chaozhuo.onlineconfig.CZOnlineConfigInfo;
+import com.chaozhuo.onlineconfig.CZOnlineConfigManager;
+import com.chaozhuo.onlineconfig.CZOnlineConfigManager.ConfigUpdateListener;
+
+public class MultiWindowManager {
+    private static final String TAG = "MultiWindowManager";
+    private static final boolean DEBUG = true;
+
+    private static final String DEFAULT_FILE_PATH = "/system/etc/compat_app.conf";
+
+    static final long WRITE_DELAY = 50 * 1000;
+
+    ActivityManagerService mService;
+    final AtomicFile mFile;
+    final Handler mHandler;
+    boolean mWriteScheduled;
+    DisplayInfo mDisplayInfo;
+    boolean mBigScreenInWidth;
+    boolean mBigScreenInHeight;
+
+    int mSystemUiMode = 0;
+
+    // App Config
+    public static final int MODE_NONE = 0;
+    public static final int MODE_DEFAULT_WINDOW = 1;
+    public static final int MODE_ONLY_FULLSCREEN = 2;
+
+
+    // App Running Mode
+    public static final int WINDOW_MODE = 1;
+    public static final int FULLSCREEN_MODE = 2;
+
+    private static int sWindowFrameTopHeight = 0;
+    private static int sStatusBarHeight = 0;
+    private static int sNavigationBarHeight = 0;
+    private static int sMinWeiXinWidth = 0;
+
+    DisplayMetrics mRealDisplayMetrics = null;
+
+    // todo
+    public static Rect sWindowFrameShadowInsets = new Rect(11, 11, 11, 20);
+
+    private static int sWindowMargin = 0;
+
+
+
+    public MultiWindowManager(ActivityManagerService service) {
+//        Debug.waitForDebugger();
+        mService = service;
+        mHandler = new Handler();
+
+        File dataDir = Environment.getDataDirectory();
+        File systemDir = new File(dataDir, "system");
+        mFile = new AtomicFile(new File(systemDir, "app_window_settings.xml"));
+        loadAppWindowRects();
+
+        CZOnlineConfigManager.getInstance().addConfigUpdateListener(CZOnlineConfigConstants.CONFIG_NAME_WINDOW_OPEN_MODE_3,
+                new ConfigUpdateListener() {
+                    @Override
+                    public void onConfigUpdated(String name, int version, String filePath) {
+                        if (DEBUG) {
+                            Log.d(TAG, "onConfigUpdated, reloading...");
+                        }
+                        loadConfigList();
+                    }
+                });
+    }
+
+    public boolean moveAppWindow(ActivityRecord r,int dx,int dy) {
+        boolean succeed = true;
+        int stackId = r.task.stack.mStackId;
+        String processName = r.processName;
+
+        StackInfo info = mService.getStackInfo(stackId);
+        Rect rect = info.bounds;
+        rect.offset(dx, dy);
+
+        storeWindowPos(processName, rect);
+        mService.mWindowManager.moveStack(stackId, rect.left,rect.top);
+        return succeed;
+    }
+
+
+    public Rect newTaskStackCreated(ActivityRecord r) {
+        String name = r.processName;
+        Rect focusAppWindow = null;
+
+        ActivityStack focusStack = mService.getFocusedStack();
+        StackInfo info = null;
+        if (focusStack != null && !focusStack.isHomeStack()) {
+            info = mService.mStackSupervisor.getStackInfoLocked(mService
+                    .getFocusedStack() == null ? -1 : mService
+                    .getFocusedStack().mStackId);
+        }
+        if (info != null)
+            focusAppWindow = info.bounds;
+
+        Rect outRect = getStoredWindowPos(name);
+        if (outRect != null) {
+            int index = name.indexOf(':');
+            String packageName = name;
+            if (index != -1)
+                packageName = name.substring(0, index);
+            Rect last = getLastAppWindowPos(packageName, -1);
+            if (last != null) {
+                outRect.set(last);
+                outRect.offset(sWindowMargin, sWindowMargin);
+            }
+
+        } else {
+            outRect = getAppDefaultWindowPos(name, focusAppWindow);
+        }
+        adjustWindowPos(outRect, focusAppWindow);
+        return outRect;
+    }
+
+    public void updateProcessPrefSize(ActivityRecord record) {
+        ActivityStack stack = record.task.stack;
+        StackInfo info = mService.getStackInfo(stack.mStackId);
+        Rect rect = info.bounds;
+        updateAppPrefSize(record.app.thread,getAppSize(record.processName,rect));
+    }
+
+    private void updateAppPrefSize(IApplicationThread thread, Rect rect) {
+        try {
+        	if (rect == null)
+        		rect = new Rect(0,0,0,0);
+            thread.scheduleUpdateAppPrefSize(rect);
+        } catch (Exception e) {
+        	e.printStackTrace();
+        }
+    }
+
+    private void loadDimens() {
+        Context context = mService.mContext;
+        try {
+            sWindowMargin = (int) context.getResources().getDimension(
+                    com.android.internal.R.dimen.window_screen_margin);
+            sStatusBarHeight = (int ) context.getResources().getDimension(
+                    com.android.internal.R.dimen.status_bar_height);
+            sNavigationBarHeight = context.getResources().getDimensionPixelSize(
+                    com.android.internal.R.dimen.navigation_bar_height);
+            Drawable windowFrameDrawable = context.getResources().getDrawable(
+                    com.android.internal.R.drawable.window_frame_bk);
+
+            windowFrameDrawable.getPadding(sWindowFrameShadowInsets);
+
+            WindowManagerService service = mService.mWindowManager;
+            DisplayInfo displayInfo = service.getDefaultDisplayInfoLocked();
+
+            mRealDisplayMetrics = new DisplayMetrics();
+            displayInfo.getAppMetrics(mRealDisplayMetrics);
+            sMinWeiXinWidth = (int)(mRealDisplayMetrics.density * 580);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+//    public Rect getWindowPosForRotationChange(String name,int stackId,final Rect lastRect) {
+//        if (DEBUG)
+//            Log.d(TAG,"getWindowPosForRotationChange Orientation:" + mService.mConfiguration.orientation + "  Name:" + name);
+//        Rect outRect = this.getStoredWindowPos(name, false);
+//        if (outRect != null) {
+//            if (!outRect.equals(getMaximizeWindowRect(mService.mWindowManager))) {
+//                int index = name.indexOf(':');
+//                String packageName = name;
+//                if (index != -1)
+//                    packageName = name.substring(0, index);
+//                Rect last = getLastAppWindowPos(packageName,stackId);
+//                if (last != null) {
+//                    outRect.offsetTo(last.left + sWindowMargin, last.top + sWindowMargin);
+//                }
+//            } else {
+//                return outRect;
+//            }
+//        } else {
+//            outRect = getAppDefaultWindowPos(name, null);
+//        }
+//        adjustWindowPos(outRect,lastRect);
+//        return outRect;
+//    }
+
+    private void adjustWindowPos(Rect rect, final Rect focsedWindow) {
+        WindowManagerService service = mService.mWindowManager;
+        DisplayInfo displayInfo = service.getDefaultDisplayInfoLocked();
+        int width = displayInfo.appWidth;
+        int height = displayInfo.appHeight;
+        if (rect.right > width + sWindowFrameShadowInsets.right
+                || rect.left < -sWindowFrameShadowInsets.left) {
+            rect.offsetTo(-sWindowFrameShadowInsets.left, rect.top);
+        }
+        if (rect.bottom > height + sWindowFrameShadowInsets.bottom
+                || rect.top < sStatusBarHeight - sWindowFrameShadowInsets.top) {
+            rect.offsetTo(rect.left, sStatusBarHeight - sWindowFrameShadowInsets.top);
+        }
+        if (focsedWindow != null && rect.left == focsedWindow.left
+                && rect.top == focsedWindow.top) {
+            rect.offset(sWindowMargin, sWindowMargin);
+        }
+    }
+
+
+    private Rect getLastAppWindowPos(String name,int currentStackId) {
+        Rect rect = null;
+        ActivityStack focusStack = mService.getFocusedStack();
+        if (focusStack.mStacks == null)
+            return rect;
+        for (int ndx = focusStack.mStacks.size() - 1; ndx >= 0; --ndx) {
+            ActivityStack stack = focusStack.mStacks.get(ndx);
+
+            if (stack.mStackId == 0 || !stack.mIsFrontedStack || stack.mStackId == currentStackId)
+                continue;
+            String packageName = null;
+            if (stack.topActivity() != null) {
+                packageName = stack.topActivity().packageName;
+            }
+
+            if (packageName != null && packageName.equalsIgnoreCase(name)) {
+                StackInfo info = mService.getStackInfo(stack.mStackId);
+                rect = info.bounds;
+                break;
+            }
+        }
+        return rect;
+    }
+
+    private Rect getAppDefaultWindowPos(String name, Rect focusAppWindow) {
+        Rect outRect = new Rect();
+        int left, right, top, bottom = 0;
+        DisplayInfo displayInfo = mService.mWindowManager
+                .getDefaultDisplayInfoLocked();
+        final int width = displayInfo.logicalHeight > displayInfo.logicalWidth ?
+                displayInfo.logicalHeight : displayInfo.logicalWidth;
+        final int height = displayInfo.logicalHeight > displayInfo.logicalWidth ?
+                displayInfo.logicalWidth : displayInfo.logicalHeight;
+
+        int compatWindowMargin = sWindowMargin;
+
+        top = compatWindowMargin - sWindowFrameShadowInsets.top;
+        left = compatWindowMargin - sWindowFrameShadowInsets.left;
+        bottom = height - 3 * compatWindowMargin;
+        right = (bottom - top) * 3 / 4 + left;
+
+        outRect.set(left, top, right, bottom);
+//        if ("com.tencent.mm".equals(name) && outRect.width() < sMinWeiXinWidth) {
+//            outRect.right = left + sMinWeiXinWidth;
+//        }
+        if (focusAppWindow != null) {
+            if (focusAppWindow.right + outRect.width() + sWindowMargin > width)
+                outRect.offsetTo(2*sWindowMargin, 2*sWindowMargin);
+            else
+                outRect.offsetTo(focusAppWindow.right + 2*sWindowMargin,
+                        2*sWindowMargin);
+        }
+
+        if (focusAppWindow != null && windowOverlapped(outRect)) {
+            outRect.offset(sWindowMargin , -sWindowMargin);
+            if (windowOverlapped(outRect)) {
+                outRect.offset(-sWindowMargin, sWindowMargin);
+            }
+        }
+        return outRect;
+    }
+
+    private boolean windowOverlapped(Rect rect) {
+        boolean ret = false;
+        for (StackInfo info : mService.getAllStackInfos()) {
+            if (rect.equals(info.bounds)) {
+                ret = true;
+                break;
+            }
+        }
+        return ret;
+    }
+
+    public void updateWindowMode(ActivityRecord r,boolean windowMode) {
+        String processName = r.app.processName;
+        int pos = processName.indexOf(':');
+        if (pos == -1)
+            pos = processName.length();
+
+        Rect rect = new Rect();
+        mService.mWindowManager.getStackBounds(r.task.stack.mStackId, rect);
+        if (rect.top + sWindowFrameShadowInsets.top <= sStatusBarHeight) {
+            rect.offsetTo(rect.left, sStatusBarHeight - sWindowFrameShadowInsets.top);
+            mService.mWindowManager.resizeStack(r.task.stack.mStackId, rect);
+        }
+
+        String packageName = processName.substring(0, pos);
+        Entry entry = mEntries.get(packageName);
+        if (entry != null) {
+            entry.mode = windowMode ? WINDOW_MODE : FULLSCREEN_MODE;
+        } else {
+            entry = new Entry(packageName);
+            entry.mode = windowMode ? WINDOW_MODE : FULLSCREEN_MODE;
+            mEntries.put(packageName, entry);
+        }
+
+        try{
+            r.app.thread.scheduleUpdateAppWindowMode(r.appToken, windowMode);
+        } catch(Exception e){
+
+        }
+
+        
+        Rect prefSize = null;
+        if (windowMode) {
+        	prefSize = rect;
+        }
+    	updateAppPrefSize(r.app.thread,prefSize);
+        
+        scheduleWriteLocked();
+    }
+
+    public int getAppRunningMode(String name) {
+        int run_mode = FULLSCREEN_MODE;
+        int app_config = 0;
+        int pos = name.indexOf(':');
+        if (pos == -1)
+            pos = name.length();
+
+        String packageName = name.substring(0, pos);
+
+        app_config = getAppConfigMode(packageName);
+        Entry entry = mEntries.get(packageName);
+
+        if (entry != null ) {
+            if (entry.mode == FULLSCREEN_MODE) {
+                run_mode = FULLSCREEN_MODE;
+            } else if (app_config != MODE_ONLY_FULLSCREEN){
+                run_mode = WINDOW_MODE;
+            }
+        } else {
+            if (app_config == MODE_DEFAULT_WINDOW)
+                run_mode = WINDOW_MODE;
+            else
+                run_mode = FULLSCREEN_MODE;
+        }
+        return run_mode;
+    }
+
+    public int getAppConfigMode(String name) {
+        int config_mode = MODE_NONE;
+
+        if (configList == null) {
+            loadConfigList();
+        }
+        Integer in = configList.get(name);
+        if (in != null) {
+            if (in == 1)
+                config_mode = MODE_DEFAULT_WINDOW;
+            else if (in == 2)
+                config_mode = MODE_ONLY_FULLSCREEN;
+        }
+        return config_mode;
+    }
+
+    private void loadConfigList() {
+        configList = new HashMap<String, Integer>();
+
+        final File file;
+        CZOnlineConfigInfo oci = CZOnlineConfigInfo.getStoredConfigInfo(CZOnlineConfigConstants.CONFIG_NAME_WINDOW_OPEN_MODE_3);
+        if (oci != null) {
+            file = new File(oci.mFilePath);
+        } else {
+            file = new File(DEFAULT_FILE_PATH);
+        }
+
+        if (file.exists()) {
+            FileInputStream fis = null;
+            BufferedReader reader = null;
+            try {
+                fis = new FileInputStream(file);
+                reader = new BufferedReader(new InputStreamReader(fis));
+                String line = reader.readLine();
+                while (line != null) {
+                    int index = line.indexOf(' ');
+                    if (index != -1) {
+                        String packageName = line.substring(0, index);
+                        int mode = Integer.valueOf(line.substring(index + 1));
+                        configList.put(packageName, mode);
+                    }
+                    line = reader.readLine();
+                }
+            } catch (FileNotFoundException ex) {
+                ex.printStackTrace();
+            } catch (IOException ex) {
+                ex.printStackTrace();
+            } finally {
+                try {
+                    reader.close();
+                    fis.close();
+                } catch (IOException ex) {
+                }
+            }
+        }
+
+    }
+
+    private HashMap<String, Integer> configList = null;
+
+
+    public void storeWindowPos(String name, Rect r) {
+        if (r != null && r != null && r.left == 0 && r.top == 0 && r.right == 0 && r.bottom == 0) {
+            // Right now all we are storing is overscan; if there is no overscan,
+            // we have no need for the entry.
+            mEntries.remove(name);
+            return;
+        }
+        Entry entry = mEntries.get(name);
+        if (entry == null) {
+            entry = new Entry(name);
+            mEntries.put(name, entry);
+        }
+
+        int orientation = mService.mConfiguration.orientation;
+
+        if (DEBUG)
+            Log.d(TAG,"StoreWindowPos Orientation:" + mService.mConfiguration.orientation + "  Name:" + name + " Rect:" + r.toString());
+
+        if (r == null) {
+            entry.mode = FULLSCREEN_MODE;
+        } else {
+            if (r.top + sWindowFrameShadowInsets.top <= sStatusBarHeight)
+                return;
+            if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+               entry.portraitRect.set(r);
+            } else {
+                entry.landscapeRect.set(r);
+            }
+            entry.mode = WINDOW_MODE;
+        }
+        scheduleWriteLocked();
+    }
+
+    public Rect getAppSize(String name, Rect windowPos) {
+        if (name.equals("com.android.systemui") || name.equals("system_process"))
+            return new Rect();
+        if (sWindowMargin == 0) {
+            loadDimens();
+        }
+        if (getAppRunningMode(name) == FULLSCREEN_MODE)
+            return null;
+
+        if (windowPos == null) {
+            windowPos = getStoredWindowPos(name);
+            if (windowPos == null) {
+                windowPos = getAppDefaultWindowPos(name, null);
+            }
+        }
+
+        Rect outRect = new Rect();
+        outRect.left = windowPos.left + sWindowFrameShadowInsets.left;
+        outRect.top = windowPos.top + sWindowFrameShadowInsets.top + sWindowFrameTopHeight;
+        outRect.bottom = windowPos.bottom - sWindowFrameShadowInsets.bottom;
+        outRect.right = windowPos.right - sWindowFrameShadowInsets.right;
+        if (DEBUG)
+            Log.d(TAG,"getAppSize Orientation:" + mService.mConfiguration.orientation + "  Name:" + name + " Rect:" + windowPos.toString());
+        return outRect;
+    }
+
+    private Rect getStoredWindowPos(String name) {
+        Rect windowPos = null;
+        Entry entry = mEntries.get(name);
+        if (entry != null) {
+            windowPos = new Rect();
+
+            int orientation = mService.mConfiguration.orientation;
+            if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+                windowPos.set(entry.portraitRect);
+            } else {
+                windowPos.set(entry.landscapeRect);
+            }
+            // 窗口尺寸不符合要求
+            if (windowPos.right <= windowPos.left
+                    || windowPos.bottom <= windowPos.top
+                    || windowPos.width() > mRealDisplayMetrics.widthPixels * 1.1
+                    || windowPos.height() > mRealDisplayMetrics.heightPixels * 1.1) {
+                windowPos = null;
+            }
+        }
+        if (DEBUG)
+            Log.d(TAG, "getStoredWindowPos Orientation:"
+                    + mService.mConfiguration.orientation + "  Name:" + name
+                    + " Rect:" + windowPos);
+        return windowPos;
+    }
+
+    final Runnable mWriteRunner = new Runnable() {
+        public void run() {
+            synchronized (MultiWindowManager.this) {
+                mWriteScheduled = false;
+                AsyncTask<Void, Void, Void> task = new AsyncTask<Void, Void, Void>() {
+                    @Override
+                    protected Void doInBackground(Void... params) {
+                        writeSettingsLocked();
+                        return null;
+                    }
+                };
+                task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,
+                        (Void[]) null);
+            }
+        }
+    };
+
+    private void scheduleWriteLocked() {
+        if (!mWriteScheduled) {
+            mWriteScheduled = true;
+            mHandler.postDelayed(mWriteRunner, WRITE_DELAY);
+        }
+    }
+
+    private final HashMap<String, Entry> mEntries = new HashMap<String, Entry>();
+
+    public static class Entry {
+        public final String packageName;
+        public int mode;
+        public Rect portraitRect;
+        public Rect landscapeRect;
+
+        public Entry(String _name) {
+            packageName = _name;
+            portraitRect = new Rect();
+            landscapeRect = new Rect();
+        }
+    }
+
+    private void loadAppWindowRects() {
+        FileInputStream stream;
+        try {
+            stream = mFile.openRead();
+        } catch (FileNotFoundException e) {
+            Slog.i(TAG, "No existing display settings " + mFile.getBaseFile()
+                    + "; starting empty");
+            return;
+        }
+        boolean success = false;
+        try {
+            XmlPullParser parser = Xml.newPullParser();
+            parser.setInput(stream, "utf-8");
+            Entry entry = null;
+            String entryKey = null;
+            int event = parser.getEventType();
+            while (event != XmlPullParser.END_DOCUMENT) {
+                switch (event) {
+                case XmlPullParser.START_DOCUMENT:
+                    break;
+                case XmlPullParser.START_TAG:
+                    if ("system_app_window_mode".equals(parser.getName())) {
+                        mSystemUiMode = getIntAttribute(parser,"system_mode");
+                    } else if ("pkg".equals(parser.getName())) {
+                        String name = parser.getAttributeValue(null, "name");
+                        if (name != null) {
+                            entryKey = name;
+                            entry = new Entry(name);
+                            entry.mode = getIntAttribute(parser, "mode");
+                        }
+                    } else if ("orientation".equals(parser.getName())) {
+                        String ori = parser.getAttributeValue(null,"value");
+                        if (entry == null)
+                            break;
+                        if (ori.equalsIgnoreCase("portrait")) {
+                            entry.portraitRect.left = getIntAttribute(parser, "left");
+                            entry.portraitRect.top = getIntAttribute(parser, "top");
+                            entry.portraitRect.right = getIntAttribute(parser, "right");
+                            entry.portraitRect.bottom = getIntAttribute(parser, "bottom");
+                        } else {
+                            entry.landscapeRect.left = getIntAttribute(parser, "left");
+                            entry.landscapeRect.top = getIntAttribute(parser, "top");
+                            entry.landscapeRect.right = getIntAttribute(parser, "right");
+                            entry.landscapeRect.bottom = getIntAttribute(parser, "bottom");
+                        }
+                    } else {
+                        break;
+                    }
+                    break;
+                case XmlPullParser.END_TAG:
+                    if ("pkg".equals(parser.getName())) {
+                        mEntries.put(entryKey, entry);
+                        entryKey = null;
+                        entry = null;
+                    }
+                    break;
+                }
+                event = parser.next();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return ;
+    }
+
+    private int getIntAttribute(XmlPullParser parser, String name) {
+        try {
+            String str = parser.getAttributeValue(null, name);
+            return str != null ? Integer.parseInt(str) : 0;
+        } catch (NumberFormatException e) {
+            return 0;
+        }
+    }
+
+    private void writeSettingsLocked() {
+        FileOutputStream stream;
+        try {
+            stream = mFile.startWrite();
+        } catch (IOException e) {
+            Slog.w(TAG, "Failed to write display settings: " + e);
+            return;
+        }
+
+        try {
+            XmlSerializer out = new FastXmlSerializer();
+            out.setOutput(stream, "utf-8");
+            out.startDocument(null, true);
+            out.startTag(null, "app_window_settings");
+
+            out.startTag(null, "system_app_window_mode");
+            out.attribute(null, "system_mode", Integer.toString(mSystemUiMode));
+            out.endTag(null, "system_app_window_mode");
+
+            for (Entry entry : mEntries.values()) {
+                if (entry.landscapeRect != null && entry.portraitRect != null) {
+                    out.startTag(null, "pkg");
+                    out.attribute(null, "name", entry.packageName);
+                    out.attribute(null, "mode", Integer.toString(entry.mode));
+
+                    out.startTag(null, "orientation");
+                    out.attribute(null, "value", "portrait");
+                    out.attribute(null, "left", Integer.toString(entry.portraitRect.left));
+                    out.attribute(null, "top", Integer.toString(entry.portraitRect.top));
+                    out.attribute(null, "right", Integer.toString(entry.portraitRect.right));
+                    out.attribute(null, "bottom",
+                            Integer.toString(entry.portraitRect.bottom));
+                    out.endTag(null, "orientation");
+
+                    out.startTag(null, "orientation");
+                    out.attribute(null, "value", "landscape");
+                    out.attribute(null, "left", Integer.toString(entry.landscapeRect.left));
+                    out.attribute(null, "top", Integer.toString(entry.landscapeRect.top));
+                    out.attribute(null, "right", Integer.toString(entry.landscapeRect.right));
+                    out.attribute(null, "bottom",
+                            Integer.toString(entry.landscapeRect.bottom));
+                    out.endTag(null, "orientation");
+
+                    out.endTag(null, "pkg");
+                }
+            }
+
+            out.endTag(null, "app_window_settings");
+            out.endDocument();
+            mFile.finishWrite(stream);
+        } catch (IOException e) {
+            Slog.w(TAG, "Failed to write display settings, restoring backup.",
+                    e);
+            mFile.failWrite(stream);
+        }
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/services/core/java/com/android/server/am/ProcessRecord.java b/services/core/java/com/android/server/am/ProcessRecord.java
index 697b4e2..f081787 100644
--- a/services/core/java/com/android/server/am/ProcessRecord.java
+++ b/services/core/java/com/android/server/am/ProcessRecord.java
@@ -36,6 +36,9 @@ import android.content.ComponentName;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.res.CompatibilityInfo;
+//CHAOZHUO START
+import android.content.res.MultiWindowCompatibility;
+//CHAOZHUO END
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.Process;
@@ -46,6 +49,10 @@ import android.util.ArrayMap;
 import android.util.PrintWriterPrinter;
 import android.util.TimeUtils;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.PrintWriter;
 import java.util.ArrayList;
 
@@ -121,6 +128,9 @@ final class ProcessRecord {
     int adjSeq;                 // Sequence id for identifying oom_adj assignment cycles
     int lruSeq;                 // Sequence id for identifying LRU update cycles
     CompatibilityInfo compat;   // last used compatibility mode
+    //CHAOZHUO START
+    MultiWindowCompatibility mwCompat;   // last used compatibility mode
+    //CHAOZHUO END
     IBinder.DeathRecipient deathRecipient; // Who is watching for the death.
     ComponentName instrumentationClass;// class installed to instrument app
     ApplicationInfo instrumentationInfo; // the application being instrumented
diff --git a/services/core/java/com/android/server/am/TaskRecord.java b/services/core/java/com/android/server/am/TaskRecord.java
index 9da30bf..92311f0 100644
--- a/services/core/java/com/android/server/am/TaskRecord.java
+++ b/services/core/java/com/android/server/am/TaskRecord.java
@@ -53,6 +53,10 @@ import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlSerializer;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -122,7 +126,9 @@ final class TaskRecord {
 
     String stringName;      // caching of toString() result.
     int userId;             // user for which this task was created
-
+    //CHAOZHUO START
+    // numFullscreen represent num of activity not int window mode
+    //CHAOZHUO END
     int numFullscreen;      // Number of fullscreen activities.
 
     boolean mResizeable;    // Activities in the task resizeable. Based on the resizable setting of
@@ -387,7 +393,9 @@ final class TaskRecord {
         } else {
             autoRemoveRecents = false;
         }
-        mResizeable = info.resizeable;
+        //CHAOZHUO START
+        mResizeable = CZSwitchManager.BUILD_MAIN_SWITCH_ON ? true : info.resizeable;
+        //CHAOZHUO END
         mLockTaskMode = info.lockTaskLaunchMode;
         mPrivileged = (info.applicationInfo.privateFlags & PRIVATE_FLAG_PRIVILEGED) != 0;
         setLockTaskAuth();
@@ -497,7 +505,11 @@ final class TaskRecord {
 
     void disposeThumbnail() {
         mLastThumbnail = null;
+        //CHAOZHUO START
+        if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
         lastDescription = null;
+        }
+        //CHAOZHUO END
     }
 
     /** Returns the intent for the root activity for this task */
@@ -586,7 +598,9 @@ final class TaskRecord {
 
     void addActivityAtIndex(int index, ActivityRecord r) {
         // Remove r first, and if it wasn't already in the list and it's fullscreen, count it.
-        if (!mActivities.remove(r) && r.fullscreen) {
+        //CHAOZHUO START
+        if (!mActivities.remove(r) && (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? !r.window_mode : r.fullscreen)) {
+        //CHAOZHUO END
             // Was not previously in list.
             numFullscreen++;
         }
@@ -612,7 +626,9 @@ final class TaskRecord {
 
     /** @return true if this was the last activity in the task */
     boolean removeActivity(ActivityRecord r) {
-        if (mActivities.remove(r) && r.fullscreen) {
+        //CHAOZHUO START
+        if (mActivities.remove(r) && (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? !r.window_mode : r.fullscreen)) {
+        //CHAOZHUO END
             // Was previously in list.
             numFullscreen--;
         }
@@ -1009,7 +1025,9 @@ final class TaskRecord {
         int nextTaskId = INVALID_TASK_ID;
         int callingUid = -1;
         String callingPackage = "";
-        boolean resizeable = false;
+        //CHAOZHUO START
+        boolean resizeable = CZSwitchManager.BUILD_MAIN_SWITCH_ON ? true : false;
+        //CHAOZHUO END
         boolean privileged = false;
 
         for (int attrNdx = in.getAttributeCount() - 1; attrNdx >= 0; --attrNdx) {
diff --git a/services/core/java/com/android/server/input/InputManagerService.java b/services/core/java/com/android/server/input/InputManagerService.java
index 7f31cfd..df9974f 100644
--- a/services/core/java/com/android/server/input/InputManagerService.java
+++ b/services/core/java/com/android/server/input/InputManagerService.java
@@ -85,6 +85,10 @@ import android.view.ViewConfiguration;
 import android.view.WindowManagerPolicy;
 import android.widget.Toast;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.File;
 import java.io.FileDescriptor;
 import java.io.FileNotFoundException;
@@ -207,6 +211,9 @@ public class InputManagerService extends IInputManager.Stub
     private static native String nativeDump(long ptr);
     private static native void nativeMonitor(long ptr);
     private static native int nativeUpdateKeyboardMetaState(long ptr, int deviceId, int keyCode, boolean down, int oldMetaState);
+    //CHAOZHUO START
+    private static native void nativeUpdatePointerIcon(long ptr,PointerIcon pointIcon);
+    //CHAOZHUO END
 
     // Input event injection constants defined in InputDispatcher.h.
     private static final int INPUT_EVENT_INJECTION_SUCCEEDED = 0;
@@ -1409,6 +1416,22 @@ public class InputManagerService extends IInputManager.Stub
         return result;
     }
 
+    //CHAOZHUO START
+    // Binder call
+    @Override
+    public boolean updatePointerIcon(PointerIcon icon) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        boolean result = true;
+        try {
+            nativeUpdatePointerIcon(mPtr,icon);
+        } catch (Exception e) {
+        }
+        return result;
+        }
+        return false;
+    }
+    //CHAOZHUO END
+
     // Binder call
     @Override
     public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token) {
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 89f3f24..6d0b8ba 100755
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -149,6 +149,24 @@ import android.net.wifi.WifiManager;
 import android.provider.Settings;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+
+//CHAOZHUO START
+import com.android.internal.statusbar.IStatusBarService;
+import com.android.internal.widget.PointerLocationView;
+import com.android.server.LocalServices;
+import android.hardware.input.InputManager;
+import android.os.Binder;
+import android.provider.Settings.SettingNotFoundException;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.Toast;
+import java.util.Set;
+import java.util.ArrayList;
+//CHAOZHUO END
+
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 /**
  * WindowManagerPolicy implementation for the Android phone UI.  This
  * introduces a new method suffix, Lp, for an internal lock of the
@@ -365,7 +383,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     boolean mRecentsVisible;
     int mRecentAppsHeldModifiers;
     boolean mLanguageSwitchKeyPressed;
-
+    
     int mLidState = LID_ABSENT;
     int mCameraLensCoverState = CAMERA_LENS_COVER_ABSENT;
     boolean mHaveBuiltInKeyboard;
@@ -511,7 +529,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     boolean mHideLockScreen;
     boolean mForcingShowNavBar;
     int mForcingShowNavBarLayer;
-
+    
     // States of keyguard dismiss.
     private static final int DISMISS_KEYGUARD_NONE = 0; // Keyguard not being dismissed.
     private static final int DISMISS_KEYGUARD_START = 1; // Keyguard needs to be dismissed.
@@ -1808,7 +1826,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             startedGoingToSleep(WindowManagerPolicy.OFF_BECAUSE_OF_USER);
             finishedGoingToSleep(WindowManagerPolicy.OFF_BECAUSE_OF_USER);
         }
-
+        
         mWindowManagerInternal.registerAppTransitionListener(
                 mStatusBarController.getAppTransitionListener());
     }
@@ -2322,8 +2340,18 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         case TYPE_WALLPAPER:
             // wallpaper is at the bottom, though the window manager may move it.
             return 2;
+        //CHAOZHUO START
+            /**
+            *
+            * Make space for additional window type. This will allow to run
+            * to types of windows (fullscreen window and multiwindow) without
+            * overlapping multiwindow windows by fullscreen window.
+            */
+        case TYPE_PINEDWINDOW_APPLICATION:
+            return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? 3 : 2;
         case TYPE_PHONE:
-            return 3;
+            return CZSwitchManager.BUILD_MAIN_SWITCH_ON ? 4 : 2;
+        //CHAOZHUO END
         case TYPE_SEARCH_BAR:
         case TYPE_VOICE_INTERACTION_STARTING:
             return 4;
@@ -2907,7 +2935,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     + repeatCount + " keyguardOn=" + keyguardOn + " mHomePressed=" + mHomePressed
                     + " canceled=" + canceled);
         }
-
+        
         // If we think we might have a volume down & power key chord on the way
         // but we're not sure, then tell the dispatcher to wait a little while and
         // try again later before dispatching.
@@ -2928,7 +2956,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 return -1;
             }
         }
-
+        
         // Cancel any pending meta actions if we see any other keys being pressed between the down
         // of the meta key and its corresponding up.
         if (mPendingMetaAction && !KeyEvent.isMetaKey(keyCode)) {
@@ -3195,7 +3223,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 mPendingMetaAction = true;
             } else if (mPendingMetaAction) {
                 launchAssistAction(Intent.EXTRA_ASSIST_INPUT_HINT_KEYBOARD, event.getDeviceId());
-            }
+                }
             return -1;
         }
 
@@ -3313,7 +3341,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         // Let the application handle the key.
         return 0;
     }
-
+    
     /** {@inheritDoc} */
     @Override
     public KeyEvent dispatchUnhandledKey(WindowState win, KeyEvent event, int policyFlags) {
@@ -3858,6 +3886,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             boolean navVisible = (sysui & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0;
             boolean navTranslucent = (sysui
                     & (View.NAVIGATION_BAR_TRANSLUCENT | View.SYSTEM_UI_TRANSPARENT)) != 0;
+            //CHAOZHUO START
+            // navgationBar(Dock) Always to be translucent
+            // add by ding
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            navTranslucent = true;
+            }
+            //CHAOZHUO END
             boolean immersive = (sysui & View.SYSTEM_UI_FLAG_IMMERSIVE) != 0;
             boolean immersiveSticky = (sysui & View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0;
             boolean navAllowedHidden = immersive || immersiveSticky;
@@ -4106,8 +4141,15 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         // The LAYOUT_IN_SCREEN flag is used to determine whether the attached
         // window should be positioned relative to its parent or the entire
         // screen.
-        pf.set((fl & FLAG_LAYOUT_IN_SCREEN) == 0
-                ? attached.getFrameLw() : df);
+        // CHAOZHUO START
+        if ((fl & FLAG_LAYOUT_IN_SCREEN) == 0) {
+            Rect frameInsets = attached.getAttrs().frameInsets;
+            pf.set(attached.getFrameLw().left + frameInsets.left, attached.getFrameLw().top+ frameInsets.top,
+                    attached.getFrameLw().right - frameInsets.right,attached.getFrameLw().bottom - frameInsets.bottom);
+        } else {
+            pf.set(df);
+        }
+        // CHAOZHUO END
     }
 
     private void applyStableConstraints(int sysui, int fl, Rect r) {
@@ -5145,12 +5187,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             public void handleMessage(Message msg) {
                                 synchronized (mScreenshotLock) {
                                     if (mScreenshotConnection == myConn) {
-                                        mContext.unbindService(mScreenshotConnection);
+                                            mContext.unbindService(mScreenshotConnection);
                                         mScreenshotConnection = null;
                                         mHandler.removeCallbacks(mScreenshotTimeout);
-                                    }
                                 }
                             }
+                            }
                         };
                         msg.replyTo = new Messenger(h);
                         msg.arg1 = msg.arg2 = 0;
@@ -5174,7 +5216,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
         }
     }
-
+    
     /** {@inheritDoc} */
     @Override
     public int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags) {
diff --git a/services/core/java/com/android/server/statusbar/StatusBarManagerService.java b/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
index e9ace29..19a9ed4 100644
--- a/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
+++ b/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
@@ -37,6 +37,10 @@ import com.android.server.LocalServices;
 import com.android.server.notification.NotificationDelegate;
 import com.android.server.wm.WindowManagerService;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -226,7 +230,19 @@ public class StatusBarManagerService extends IStatusBarService.Stub {
             }
         }
     }
-
+    //CHAOZHUO START    
+    @Override
+   public void dragMoveActivityState(int state) {
+       if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mBar != null) {
+            try {
+                mBar.dragMoveActivityState(state);
+            } catch (RemoteException ex) {
+            }
+        }
+        }
+    }
+    //CHAOZHUO END
     @Override
     public void disable(int what, IBinder token, String pkg) {
         disableForUser(what, token, pkg, mCurrentUserId);
diff --git a/services/core/java/com/android/server/wm/AppWindowToken.java b/services/core/java/com/android/server/wm/AppWindowToken.java
index a210223..4e50208 100644
--- a/services/core/java/com/android/server/wm/AppWindowToken.java
+++ b/services/core/java/com/android/server/wm/AppWindowToken.java
@@ -22,6 +22,9 @@ import com.android.server.input.InputApplicationHandle;
 import com.android.server.wm.WindowManagerService.H;
 
 import android.content.pm.ActivityInfo;
+//CHAOZHUO START
+import android.graphics.Rect;
+//CHAOZHUO END
 import android.os.Message;
 import android.os.RemoteException;
 import android.util.Slog;
@@ -29,6 +32,10 @@ import android.view.IApplicationToken;
 import android.view.View;
 import android.view.WindowManager;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.PrintWriter;
 import java.util.ArrayList;
 
@@ -53,7 +60,11 @@ class AppWindowToken extends WindowToken {
     final boolean voiceInteraction;
 
     Task mTask;
+    //CHAOZHUO START
+    boolean pin = false;
     boolean appFullscreen;
+    boolean appWindowMode = false;
+    //CHAOZHUO END
     int requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
     boolean layoutConfigChanges;
     boolean showForAllUsers;
@@ -111,6 +122,9 @@ class AppWindowToken extends WindowToken {
 
     boolean mLaunchTaskBehind;
     boolean mEnteringAnimation;
+    //CHAOZHUO START
+    Rect mFrameInsets = CZSwitchManager.BUILD_MAIN_SWITCH_ON ? new Rect() : null;
+    //CHAOZHUO END
 
     AppWindowToken(WindowManagerService _service, IApplicationToken _token,
             boolean _voiceInteraction) {
@@ -140,6 +154,24 @@ class AppWindowToken extends WindowToken {
             }
         }
     }
+    
+    //CHAOZHUO START
+    boolean mPin = false;
+
+    void setPin(boolean pin) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (pin != mPin) {
+            mPin = pin;
+            int j = windows.size();
+            while (j > 0) {
+                j--;
+                WindowState win = windows.get(j);
+                win.setPin(pin);
+            }
+        }
+        }
+    }
+    //CHAOZHUO END
 
     void updateReportedVisibilityLocked() {
         if (appToken == null) {
diff --git a/services/core/java/com/android/server/wm/CZDragAndHoverDetector.java b/services/core/java/com/android/server/wm/CZDragAndHoverDetector.java
new file mode 100644
index 0000000..1e8f672
--- /dev/null
+++ b/services/core/java/com/android/server/wm/CZDragAndHoverDetector.java
@@ -0,0 +1,90 @@
+package com.android.server.wm;
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+
+class CZDragAndHoverDetector {
+    public interface OnHoverTriggeredListener {
+        public void onHoverTriggered(WindowState win);
+    }
+
+    private static final boolean DEBUG = false;
+    private static final String TAG = "CZDragAndHoverDetector";
+    private static final int MSG_HOVER_TRIGGERED = 1;
+    private static final int HOVER_TRIGGER_DURATION = 500;
+    private WindowState mWindow = null;
+
+    private OnHoverTriggeredListener mListener = null;
+    private float mMoveThreshold = 30;
+    private float mAnchorX = -1;
+    private float mAnchorY = -1;
+    Handler mHandler = new Handler(Looper.getMainLooper()) {
+        @Override
+        public void handleMessage(android.os.Message msg) {
+            if (DEBUG) {
+                Log.d(TAG, "Hover Triggered:" + mAnchorX + ", " + mAnchorY
+                        + ", " + System.currentTimeMillis());
+            }
+
+            if (mListener != null) {
+                mListener.onHoverTriggered(mWindow);
+            }
+        };
+    };
+
+    CZDragAndHoverDetector(Context context, OnHoverTriggeredListener listener) {
+        mMoveThreshold *= context.getResources().getDisplayMetrics().density;
+        mListener = listener;
+    }
+
+    void onMoveToNewWindow(WindowState win, float x, float y) {
+        if (DEBUG) {
+            Log.d(TAG, "onMoveToNewWindow:" + win + ", " + x + ", " + y);
+        }
+        if (win != null) {
+            mWindow = win;
+            refreshState(x, y);
+        }
+    }
+
+    void onMoveEvent(float x, float y) {
+        if (DEBUG) {
+            // Log.d(TAG, "onMoveEvent:" + x + ", " + y);
+        }
+
+        if (mWindow == null) {
+            return;
+        }
+
+        if (mAnchorX < 0 || mAnchorY < 0
+                || Math.abs(mAnchorX - x) > mMoveThreshold
+                || Math.abs(mAnchorY - y) > mMoveThreshold) {
+            refreshState(x, y);
+        }
+    }
+
+    void reset() {
+        mHandler.removeMessages(MSG_HOVER_TRIGGERED);
+        mWindow = null;
+        mAnchorX = -1;
+        mAnchorY = -1;
+    }
+
+    private void refreshState(float x, float y) {
+        if (DEBUG) {
+            Log.d(TAG,
+                    "refreshState:" + x + ", " + y + ", "
+                            + System.currentTimeMillis());
+        }
+
+        mHandler.removeMessages(MSG_HOVER_TRIGGERED);
+
+        mAnchorX = x;
+        mAnchorY = y;
+
+        mHandler.sendEmptyMessageDelayed(MSG_HOVER_TRIGGERED,
+                HOVER_TRIGGER_DURATION);
+    }
+}
diff --git a/services/core/java/com/android/server/wm/DimLayer.java b/services/core/java/com/android/server/wm/DimLayer.java
index e385be3..0071fc5 100644
--- a/services/core/java/com/android/server/wm/DimLayer.java
+++ b/services/core/java/com/android/server/wm/DimLayer.java
@@ -23,6 +23,10 @@ import android.util.Slog;
 import android.view.DisplayInfo;
 import android.view.SurfaceControl;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.PrintWriter;
 
 public class DimLayer {
@@ -209,6 +213,8 @@ public class DimLayer {
      * @param duration How long to take to get there in milliseconds.
      */
     void show(int layer, float alpha, long duration) {
+        //CHAOZHUO START
+        if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
         if (DEBUG) Slog.v(TAG, "show: layer=" + layer + " alpha=" + alpha
                 + " duration=" + duration);
         if (mDimSurface == null) {
@@ -239,6 +245,8 @@ public class DimLayer {
         }
         if (DEBUG) Slog.v(TAG, "show: mStartAlpha=" + mStartAlpha + " mStartTime=" + mStartTime);
         mTargetAlpha = alpha;
+        }
+        //CHAOZHUO END
     }
 
     /** Immediate hide.
diff --git a/services/core/java/com/android/server/wm/DisplayContent.java b/services/core/java/com/android/server/wm/DisplayContent.java
index 4db0b1e..15f0d18 100644
--- a/services/core/java/com/android/server/wm/DisplayContent.java
+++ b/services/core/java/com/android/server/wm/DisplayContent.java
@@ -27,6 +27,10 @@ import android.view.Display;
 import android.view.DisplayInfo;
 import android.view.Surface;
 
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
+
 import java.io.PrintWriter;
 import java.util.ArrayList;
 
@@ -205,6 +209,11 @@ class DisplayContent {
     void moveStack(TaskStack stack, boolean toTop) {
         if (!mStacks.remove(stack)) {
             Slog.wtf(TAG, "moving stack that was not added: " + stack, new Throwable());
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            return;
+        }
+        //CHAOZHUO END
         }
         mStacks.add(toTop ? mStacks.size() : 0, stack);
     }
diff --git a/services/core/java/com/android/server/wm/DragState.java b/services/core/java/com/android/server/wm/DragState.java
index 1a125d4..637599e 100644
--- a/services/core/java/com/android/server/wm/DragState.java
+++ b/services/core/java/com/android/server/wm/DragState.java
@@ -20,7 +20,6 @@ import com.android.server.input.InputApplicationHandle;
 import com.android.server.input.InputWindowHandle;
 import com.android.server.wm.WindowManagerService.DragInputEventReceiver;
 import com.android.server.wm.WindowManagerService.H;
-
 import android.content.ClipData;
 import android.content.ClipDescription;
 import android.graphics.Point;
@@ -38,6 +37,12 @@ import android.view.SurfaceControl;
 import android.view.View;
 import android.view.WindowManager;
 
+//CHAOZHUO START
+import android.app.ActivityManagerNative;
+import com.chaozhuo.system.CZSwitchManager;
+import com.android.server.wm.CZDragAndHoverDetector.OnHoverTriggeredListener;
+//CHAOZHUO END
+
 import java.util.ArrayList;
 
 /**
@@ -63,6 +68,10 @@ class DragState {
     boolean mDragInProgress;
     Display mDisplay;
 
+    // CHAOZHUO START
+    CZDragAndHoverDetector mHoverDetector;
+    // CHAOZHUO END
+
     private final Region mTmpRegion = new Region();
     private final Rect mTmpRect = new Rect();
 
@@ -74,6 +83,24 @@ class DragState {
         mFlags = flags;
         mLocalWin = localWin;
         mNotifiedWindows = new ArrayList<WindowState>();
+
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+	        OnHoverTriggeredListener listener = new OnHoverTriggeredListener() {
+	            @Override
+	            public void onHoverTriggered(WindowState win) {
+	                if(win != null && win == mTargetWindow) {
+	                    // 当拖拽到新窗口时,将新窗口应用置顶, add by cd
+	                    try {
+							ActivityManagerNative.getDefault().setFocusedStack(win.getStack().mStackId);
+						} catch (RemoteException e) {
+							Slog.w(WindowManagerService.TAG, "Error when trying to bring window foreground...", e);
+						}
+	                }
+	            }
+	        };
+
+	        mHoverDetector = new CZDragAndHoverDetector(mService.mContext, listener);
+        }
     }
 
     void reset() {
@@ -278,6 +305,10 @@ class DragState {
     }
 
     void endDragLw() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        	mHoverDetector.reset();
+        }
+
         mService.mDragState.broadcastDragEndedLw();
 
         // stop intercepting input
@@ -307,6 +338,12 @@ class DragState {
                     WindowManagerService.TAG, "<<< CLOSE TRANSACTION notifyMoveLw");
         }
 
+        // CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        	mHoverDetector.onMoveEvent(x, y);
+        }
+        // CHAOZHUO END
+
         // Tell the affected window
         WindowState touchedWin = getTouchedWinAtPointLw(x, y);
         if (touchedWin == null) {
@@ -334,6 +371,11 @@ class DragState {
                 if (myPid != mTargetWindow.mSession.mPid) {
                     evt.recycle();
                 }
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    mHoverDetector.onMoveToNewWindow(touchedWin, x, y);
+                }
+                //CHAOZHUO END
             }
             if (touchedWin != null) {
                 if (false && WindowManagerService.DEBUG_DRAG) {
@@ -424,7 +466,13 @@ class DragState {
             final int touchFlags = flags &
                     (WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                             | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);
-            if (mTmpRegion.contains(x, y) || touchFlags == 0) {
+            //CHAOZHUO START
+            /** CHAOZHUO aModify by chenduo for support global drag/drop BEGIN **/
+            // if (mTmpRegion.contains(x, y) || touchFlags == 0) {
+            if (mTmpRegion.contains(x, y)
+                    || (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? (mFlags & View.DRAG_FLAG_GLOBAL) == 0 : true) && touchFlags == 0) {
+                /** CHAOZHUO aModify by chenduo for support global drag/drop End **/
+            //CHAOZHUO END
                 // Found it
                 touchedWin = child;
                 break;
diff --git a/services/core/java/com/android/server/wm/InputMonitor.java b/services/core/java/com/android/server/wm/InputMonitor.java
index 8930e1d..fb18d76 100644
--- a/services/core/java/com/android/server/wm/InputMonitor.java
+++ b/services/core/java/com/android/server/wm/InputMonitor.java
@@ -18,6 +18,9 @@ package com.android.server.wm;
 
 import android.app.ActivityManagerNative;
 import android.graphics.Rect;
+//CHAOZHUO START
+import android.os.Debug;
+//CHAOZHUO END
 import android.os.RemoteException;
 import android.util.Log;
 import android.util.Slog;
@@ -31,6 +34,12 @@ import com.android.server.input.InputManagerService;
 import com.android.server.input.InputWindowHandle;
 
 import java.util.Arrays;
+//CHAOZHUO START
+import android.graphics.Region.Op;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
     private final WindowManagerService mService;
@@ -178,7 +187,20 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
             // Limit the outer touch to the activity stack region.
             flags |= WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
             child.getStackBounds(mTmpRect);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (child.mAttrs.type == WindowManager.LayoutParams.TYPE_APPLICATION) {
+                Rect rect = child.mAppToken.mFrameInsets;
+                mTmpRect.top = mTmpRect.top + rect.top;
+            }
+            }
+            //CHAOZHUO END
             inputWindowHandle.touchableRegion.set(mTmpRect);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            inputWindowHandle.touchableRegion.op(child.mFrame, Op.UNION);
+            }
+            //CHAOZHUO END
         } else {
             // Not modal or full screen modal
             child.getTouchableRegion(inputWindowHandle.touchableRegion);
@@ -263,7 +285,7 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
         for (int displayNdx = 0; displayNdx < numDisplays; ++displayNdx) {
             WindowList windows = mService.mDisplayContents.valueAt(displayNdx).getWindowList();
             for (int winNdx = windows.size() - 1; winNdx >= 0; --winNdx) {
-                final WindowState child = windows.get(winNdx);
+                WindowState child = windows.get(winNdx);
                 final InputChannel inputChannel = child.mInputChannel;
                 final InputWindowHandle inputWindowHandle = child.mInputWindowHandle;
                 if (inputChannel == null || inputWindowHandle == null || child.mRemoved) {
diff --git a/services/core/java/com/android/server/wm/ResizingStackFrame.java b/services/core/java/com/android/server/wm/ResizingStackFrame.java
new file mode 100644
index 0000000..5d3a05d
--- /dev/null
+++ b/services/core/java/com/android/server/wm/ResizingStackFrame.java
@@ -0,0 +1,161 @@
+//CHAOZHUO START
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.wm;
+
+import static com.android.server.wm.WindowManagerService.DEBUG_STACK;
+import static com.android.server.wm.WindowManagerService.DEBUG_SURFACE_TRACE;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.PixelFormat;
+import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.Rect;
+import android.graphics.Region;
+import android.util.Slog;
+import android.view.Display;
+import android.view.Surface;
+import android.view.Surface.OutOfResourcesException;
+import android.view.SurfaceControl;
+import android.view.SurfaceSession;
+
+import com.android.server.wm.WindowStateAnimator.SurfaceTrace;
+
+class ResizingStackFrame {
+    private static final String TAG = "ResizingStackFrame";
+    private int THICKNESS = 11;
+    private static final float ALPHA = 1.0f;
+
+    private final SurfaceControl mSurfaceControl;
+    private final Surface mSurface = new Surface();
+    private final Rect mLastBounds = new Rect();
+    final Rect mBounds = new Rect();
+    private final Rect mTmpDrawRect = new Rect();
+    Display mDisplay;
+
+    public ResizingStackFrame(Context context,Display display, SurfaceSession session) {
+        SurfaceControl ctrl = null;
+        mDisplay = display;
+        try {
+            if (DEBUG_SURFACE_TRACE) {
+                ctrl = new SurfaceTrace(session, "ResizingStackFrame",
+                    1, 1, PixelFormat.TRANSLUCENT, SurfaceControl.HIDDEN);
+            } else {
+                ctrl = new SurfaceControl(session, "ResizingStackFrame",
+                    1, 1, PixelFormat.TRANSLUCENT, SurfaceControl.HIDDEN);
+            }
+            ctrl.setLayerStack(display.getLayerStack());
+            ctrl.setAlpha(ALPHA);
+            Point size = new Point();
+            mDisplay.getSize(size);
+            ctrl.setSize(size.x, size.y);
+            mSurface.copyFrom(ctrl);
+        } catch (OutOfResourcesException e) {
+        }
+        mSurfaceControl = ctrl;
+        THICKNESS = (int)context.getResources().getDimension(com.android.internal.R.dimen.window_resizing_border) - 2;
+    }
+    
+    public void onOrientationChanged() {
+        Point size = new Point();
+        mDisplay.getSize(size);
+        mSurfaceControl.setSize(size.x, size.y);
+    }
+
+    private void draw(int color) {
+        if (false && DEBUG_STACK) Slog.i(TAG, "draw: bounds=" + mBounds.toShortString() +
+                " color=" + Integer.toHexString(color));
+        mTmpDrawRect.set(mBounds);
+        mTmpDrawRect.union(mLastBounds);
+        Canvas c = null;
+        try {
+            c = mSurface.lockCanvas(mTmpDrawRect);
+        } catch (IllegalArgumentException e) {
+        } catch (Surface.OutOfResourcesException e) {
+        }
+        if (c == null) {
+            return;
+        }
+        
+        if (true) Slog.i(TAG, "draw: on=" +
+                " mLastBounds=" + mLastBounds.toShortString() +
+                " mBounds=" + mBounds.toShortString() + " mTmpDrawRect=" + mTmpDrawRect.toShortString());
+
+        final int w = mBounds.width();
+        final int h = mBounds.height();
+        
+        // clear previous buf
+        c.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
+        
+        // Top
+        mTmpDrawRect.set(mBounds.left, mBounds.top, mBounds.right, mBounds.top + THICKNESS);
+        c.clipRect(mTmpDrawRect, Region.Op.REPLACE);
+        c.drawColor(color);
+        // Left (not including Top or Bottom stripe).
+        mTmpDrawRect.set(mBounds.left, mBounds.top + THICKNESS, mBounds.left + THICKNESS, mBounds.bottom - THICKNESS);
+        c.clipRect(mTmpDrawRect, Region.Op.REPLACE);
+        c.drawColor(color);
+        // Right (not including Top or Bottom stripe).
+        mTmpDrawRect.set(mBounds.right - THICKNESS, mBounds.top + THICKNESS, mBounds.right , mBounds.bottom - THICKNESS);
+        c.clipRect(mTmpDrawRect, Region.Op.REPLACE);
+        c.drawColor(color);
+        // Bottom
+        mTmpDrawRect.set(mBounds.left, mBounds.bottom - THICKNESS, mBounds.right, mBounds.bottom);
+        c.clipRect(mTmpDrawRect, Region.Op.REPLACE);
+        c.drawColor(color);
+
+        mSurface.unlockCanvasAndPost(c);
+    }
+
+    private void positionSurface(Rect bounds) {
+        if (false && DEBUG_STACK) Slog.i(TAG, "positionSurface: bounds=" + bounds.toShortString());
+//        mSurfaceControl.setPosition(bounds.left, bounds.top);
+    }
+
+    // Note: caller responsible for being inside
+    // Surface.openTransaction() / closeTransaction()
+    public void setVisibility(boolean on) {
+        if (true && DEBUG_STACK) Slog.i(TAG, "setVisibility: on=" + on +
+                " mLastBounds=" + mLastBounds.toShortString() +
+                " mBounds=" + mBounds.toShortString());
+        if (mSurfaceControl == null) {
+            return;
+        }
+        if (on) {
+            if (!mLastBounds.equals(mBounds)) {
+                draw( 0xAAFFFFFF);
+                // Draw the latest rectangle.
+                positionSurface(mBounds);
+                // Update the history.
+                mLastBounds.set(mBounds);
+            }
+            mSurfaceControl.show();
+        } else {
+            mSurfaceControl.hide();
+        }
+    }
+
+    public void setBounds(Rect rect) {
+        mBounds.set(rect);
+    }
+
+    public void setLayer(int layer) {
+        mSurfaceControl.setLayer(layer);
+    }
+}
+//CHAOZHUO END
\ No newline at end of file
diff --git a/services/core/java/com/android/server/wm/TaskStack.java b/services/core/java/com/android/server/wm/TaskStack.java
index 985bbfb..61fd922 100644
--- a/services/core/java/com/android/server/wm/TaskStack.java
+++ b/services/core/java/com/android/server/wm/TaskStack.java
@@ -32,6 +32,12 @@ import com.android.server.EventLogTags;
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
+//CHAOZHUO START
+import android.content.res.Configuration;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 public class TaskStack {
     /** Amount of time in milliseconds to animate the dim surface from one value to another,
@@ -140,16 +146,25 @@ public class TaskStack {
         if (mDisplayContent != null) {
             mDisplayContent.getLogicalDisplayRect(mTmpRect);
             rotation = mDisplayContent.getDisplayInfo().rotation;
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mFullscreen = mTmpRect.equals(bounds);
+            }
+            //CHAOZHUO END
             if (bounds == null) {
                 bounds = mTmpRect;
                 mFullscreen = true;
             } else {
+//CHAOZHUO START
+                if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
                 // ensure bounds are entirely within the display rect
                 if (!bounds.intersect(mTmpRect)) {
                     // Can't set bounds outside the containing display.. Sorry!
                     return false;
                 }
                 mFullscreen = mTmpRect.equals(bounds);
+                }
+//CHAOZHUO END
             }
         }
 
@@ -205,11 +220,15 @@ public class TaskStack {
             if (mRotation == newRotation) {
                 return;
             }
-
+        		
             // Device rotation changed. We don't want the stack to move around on the screen when
             // this happens, so update the stack bounds so it stays in the same place.
             final int rotationDelta = DisplayContent.deltaRotation(mRotation, newRotation);
             mDisplayContent.getLogicalDisplayRect(mTmpRect);
+
+            // CHAOZHUO START
+        	if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            //CHAOZHUO END
             switch (rotationDelta) {
                 case Surface.ROTATION_0:
                     mTmpRect2.set(mBounds);
@@ -234,6 +253,19 @@ public class TaskStack {
                     break;
             }
             setBounds(mTmpRect2);
+            // CHAOZHUO START
+        	} else {
+        		int x = mBounds.left;
+        		int y = mBounds.top;
+        		if(mBounds.right > mTmpRect.right) {
+        			x = mTmpRect.right - mBounds.width();
+        		}
+        		if (mBounds.bottom > mTmpRect.bottom) {
+        			y = mTmpRect.bottom - mBounds.bottom;
+        		}
+        		mBounds.offsetTo(x, y);
+        	}
+            //CHAOZHUO END
         }
     }
 
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 44dc4c1..e7aa02d 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -184,6 +184,13 @@ import static android.view.WindowManager.LayoutParams.TYPE_VOICE_INTERACTION;
 import static android.view.WindowManager.LayoutParams.TYPE_WALLPAPER;
 import static android.view.WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
 import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
+//CHAOZHUO START
+import android.app.AppGlobals;
+import android.view.WindowInfo;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 /** {@hide} */
 public class WindowManagerService extends IWindowManager.Stub
@@ -449,6 +456,9 @@ public class WindowManagerService extends IWindowManager.Stub
     CircularDisplayMask mCircularDisplayMask;
     EmulatorDisplayOverlay mEmulatorDisplayOverlay;
     FocusedStackFrame mFocusedStackFrame;
+    //CHAOZHUO START
+    ResizingStackFrame mResizingStackFrame;
+    //CHAOZHUO END
 
     int mFocusedStackLayer;
 
@@ -638,6 +648,11 @@ public class WindowManagerService extends IWindowManager.Stub
     PowerManagerInternal mPowerManagerInternal;
 
     float mWindowAnimationScaleSetting = 1.0f;
+    //CHAOZHUO START
+    // CHAOZHUO WULIANG
+    boolean mDisableTransitionAnimation = true;
+    // CHAOZHUO WULIANG END
+    //CHAOZHUO END
     float mTransitionAnimationScaleSetting = 1.0f;
     float mAnimatorDurationScaleSetting = 1.0f;
     boolean mAnimationsDisabled = false;
@@ -965,6 +980,17 @@ public class WindowManagerService extends IWindowManager.Stub
                 Settings.Global.WINDOW_ANIMATION_SCALE, mWindowAnimationScaleSetting);
         mTransitionAnimationScaleSetting = Settings.Global.getFloat(context.getContentResolver(),
                 Settings.Global.TRANSITION_ANIMATION_SCALE, mTransitionAnimationScaleSetting);
+        //CHAOZHUO START
+     // CHAOZHUO WULIANG
+         if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mDisableTransitionAnimation) {
+            mTransitionAnimationScaleSetting = 0.f;
+            Settings.Global.putFloat(context.getContentResolver(),
+                    Settings.Global.TRANSITION_ANIMATION_SCALE, mTransitionAnimationScaleSetting);
+        }
+        }
+        // CHAOZHUO WULIANG END
+        //CHAOZHUO END
         setAnimatorDurationScale(Settings.Global.getFloat(context.getContentResolver(),
                 Settings.Global.ANIMATOR_DURATION_SCALE, mAnimatorDurationScaleSetting));
 
@@ -994,8 +1020,14 @@ public class WindowManagerService extends IWindowManager.Stub
         SurfaceControl.openTransaction();
         try {
             createWatermarkInTransaction();
+            //CHAOZHUO START
             mFocusedStackFrame = new FocusedStackFrame(
                     getDefaultDisplayContentLocked().getDisplay(), mFxSession);
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mResizingStackFrame = new ResizingStackFrame(mContext,
+                    getDefaultDisplayContentLocked().getDisplay(), mFxSession);
+            }
+            //CHAOZHUO END
         } finally {
             SurfaceControl.closeTransaction();
         }
@@ -1407,6 +1439,13 @@ public class WindowManagerService extends IWindowManager.Stub
         int i;
         for (i = windows.size() - 1; i >= 0; --i) {
             WindowState win = windows.get(i);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (win.mAppToken != null && win.mAppToken.mPin
+            		&& win.mAppToken != mFocusedApp)
+            	continue;
+            }
+            //CHAOZHUO END
 
             if (DEBUG_INPUT_METHOD && willMove) Slog.i(TAG, "Checking window @" + i
                     + " " + win + " fl=0x" + Integer.toHexString(win.mAttrs.flags));
@@ -2574,6 +2613,13 @@ public class WindowManagerService extends IWindowManager.Stub
                 imMayMove = false;
             } else {
                 addWindowToListInOrderLocked(win, true);
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                if (win.mAppToken != null) {
+                    rebuildAppWindowListLocked();
+                }
+                }
+                //CHAOZHUO END
                 if (type == TYPE_WALLPAPER) {
                     mLastWallpaperTimeoutTime = 0;
                     displayContent.pendingLayoutChanges |= FINISH_LAYOUT_REDO_WALLPAPER;
@@ -3140,6 +3186,15 @@ public class WindowManagerService extends IWindowManager.Stub
                 win.mSystemUiVisibility = systemUiVisibility;
             }
 
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (win.mAppToken != null && attrs != null &&
+                    attrs.type == TYPE_BASE_APPLICATION) {
+                win.mAppToken.mFrameInsets.set(attrs.frameInsets);
+            }
+            }
+            //CHAOZHUO END
+
             winAnimator.mSurfaceDestroyDeferred =
                     (flags&WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
 
@@ -3911,13 +3966,19 @@ public class WindowManagerService extends IWindowManager.Stub
                             + " -- hidden on top");
                     continue;
                 }
-
+                //CHAOZHUO START
+                int orientation = 
+                    CZSwitchManager.BUILD_MAIN_SWITCH_ON ? 
+                    ((!atoken.appWindowMode) ? atoken.requestedOrientation:
+                    ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED) :
+                    atoken.requestedOrientation;
                 if (tokenNdx == 0) {
                     // Last token in this task.
-                    lastOrientation = atoken.requestedOrientation;
+                    lastOrientation = orientation;
                 }
 
-                int or = atoken.requestedOrientation;
+                int or = orientation;
+                //CHAOZHUO END
                 // If this application is fullscreen, and didn't explicitly say
                 // to use the orientation behind it, then just take whatever
                 // orientation it has and ignores whatever is under it.
@@ -4105,6 +4166,11 @@ public class WindowManagerService extends IWindowManager.Stub
         if (DEBUG_LAYERS) Slog.v(TAG, "Setting FocusedStackFrame to layer=" +
                 mFocusedStackLayer);
         mFocusedStackFrame.setLayer(mFocusedStackLayer);
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {        
+        mResizingStackFrame.setLayer(220000);
+        }
+        //CHAOZHUO END
     }
 
     void setFocusedStackFrame() {
@@ -4147,7 +4213,11 @@ public class WindowManagerService extends IWindowManager.Stub
             if (changed) {
                 mFocusedApp = newFocus;
                 mInputMonitor.setFocusedAppLw(newFocus);
+                //CHAOZHUO START
+                if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
                 setFocusedStackFrame();
+                }
+                //CHAOZHUO END
                 if (SHOW_LIGHT_TRANSACTIONS) Slog.i(TAG, ">>> OPEN TRANSACTION setFocusedApp");
                 SurfaceControl.openTransaction();
                 try {
@@ -4305,6 +4375,13 @@ public class WindowManagerService extends IWindowManager.Stub
                 return;
             }
 
+            //CHAOZHUO START
+            //disable Window Animator tem
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (true)
+                return ;
+            }
+            //CHAOZHUO END
             // If the display is frozen, we won't do anything until the
             // actual window is displayed so there is no reason to put in
             // the starting window.
@@ -4527,7 +4604,28 @@ public class WindowManagerService extends IWindowManager.Stub
             }
         }
     }
-
+    //CHAOZHUO START
+    public void setAppWindowMode(IBinder token, boolean windowMode) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized (mWindowMap) {
+            AppWindowToken atoken = findAppWindowToken(token);
+            if (atoken != null && atoken.appWindowMode != windowMode) {
+                atoken.appWindowMode = windowMode;
+                requestTraversalLocked();
+            }
+        }
+        }
+    }
+    
+    public void pinActivityWindow(IBinder token,boolean pin) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized (mWindowMap) {
+            AppWindowToken atoken = findAppWindowToken(token);
+            atoken.setPin(pin);
+        }
+        }
+    }
+    //CHAOZHUO END
     public void setWindowOpaque(IBinder token, boolean isOpaque) {
         synchronized (mWindowMap) {
             setWindowOpaqueLocked(token, isOpaque);
@@ -5114,6 +5212,8 @@ public class WindowManagerService extends IWindowManager.Stub
                 final DisplayContent displayContent = task.getDisplayContent();
                 displayContent.moveStack(stack, true);
                 if (displayContent.isDefaultDisplay) {
+                //CHAOZHUO START
+                if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
                     final TaskStack homeStack = displayContent.getHomeStack();
                     if (homeStack != stack) {
                         // When a non-home stack moves to the top, the home stack moves to the
@@ -5121,6 +5221,8 @@ public class WindowManagerService extends IWindowManager.Stub
                         displayContent.moveStack(homeStack, false);
                     }
                 }
+                //CHAOZHUO END
+                }
                 stack.moveTaskToTop(task);
                 if (mAppTransition.isTransitionSet()) {
                     task.setSendingToBottom(false);
@@ -5144,6 +5246,11 @@ public class WindowManagerService extends IWindowManager.Stub
                 }
                 final TaskStack stack = task.mStack;
                 stack.moveTaskToBottom(task);
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                stack.getDisplayContent().moveStack(stack, false);
+                }
+                //CHAOZHUO END
                 if (mAppTransition.isTransitionSet()) {
                     task.setSendingToBottom(true);
                 }
@@ -5276,12 +5383,83 @@ public class WindowManagerService extends IWindowManager.Stub
             if (stack.setBounds(bounds)) {
                 stack.resizeWindows();
                 stack.getDisplayContent().layoutNeeded = true;
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                hideResizingFrame();
+                }
+                //CHAOZHUO END
                 performLayoutAndPlaceSurfacesLocked();
             }
             return new Configuration(stack.mOverrideConfig);
         }
     }
-
+    //CHAOZHUO START
+    public void showResizingFrame(Rect bounds) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        SurfaceControl.openTransaction();
+        try {
+            mResizingStackFrame.setBounds(bounds);
+            mResizingStackFrame.setVisibility(true);
+        } finally {
+            SurfaceControl.closeTransaction();
+        }
+        }
+    }
+    
+    public void hideResizingFrame() {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        SurfaceControl.openTransaction();
+        try {
+            mResizingStackFrame.setVisibility(false);
+        } finally {
+            SurfaceControl.closeTransaction();
+        }
+        }
+    }
+    
+    public void moveStack(int stackId, int newX, int newY) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized (mWindowMap) {
+            final TaskStack stack = mStackIdToStack.get(stackId);
+            if (stack == null) {
+                throw new IllegalArgumentException("resizeStack: stackId " + stackId
+                        + " not found.");
+            }
+            Rect bounds = new Rect();
+            stack.getBounds(bounds);
+            bounds.offsetTo(newX, newY);
+            if (stack.setBounds(bounds)) {
+//                stack.resizeWindows();
+                stack.getDisplayContent().layoutNeeded = true;
+                performLayoutAndPlaceSurfacesLocked();
+            }
+        }
+        }
+    }
+    
+    public void resizeStackForRotation(int stackId, Rect bounds) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        synchronized (mWindowMap) {
+            final TaskStack stack = mStackIdToStack.get(stackId);
+            if (stack == null) {
+                throw new IllegalArgumentException("resizeStack: stackId " + stackId
+                        + " not found.");
+            }
+            if (stack.setBounds(bounds)) {
+                stack.resizeWindows();
+            }
+        }
+        }
+    }
+    
+    public boolean isStackFullScreen(int stackId) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        final TaskStack stack = mStackIdToStack.get(stackId);
+        return stack.isFullscreen();
+        }
+        return false;
+    }
+    //CHAOZHUO END
     public void getStackBounds(int stackId, Rect bounds) {
         synchronized (mWindowMap) {
             final TaskStack stack = mStackIdToStack.get(stackId);
@@ -7182,6 +7360,12 @@ public class WindowManagerService extends IWindowManager.Stub
             mActivityManager.updateConfiguration(null);
         } catch (RemoteException e) {
         }
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mResizingStackFrame != null )
+            mResizingStackFrame.onOrientationChanged();
+        }
+        //CHAOZHUO END
     }
 
     public Configuration computeNewConfiguration() {
@@ -7530,7 +7714,10 @@ public class WindowManagerService extends IWindowManager.Stub
                         outSurface.copyFrom(surface);
                         final IBinder winBinder = window.asBinder();
                         token = new Binder();
+                        /** CHAOZHUO aModify by chenduo for support global drag/drop BEGIN **/
+                        // mDragState = new DragState(this, token, surface, /*flags*/ 0, winBinder);
                         mDragState = new DragState(this, token, surface, flags, winBinder);
+                        /** CHAOZHUO aModify by chenduo for support global drag/drop End **/
                         token = mDragState.mToken = new Binder();
 
                         // 5 second timeout for this window to actually begin the drag
@@ -8208,6 +8395,8 @@ public class WindowManagerService extends IWindowManager.Stub
                     break;
 
                 case TAP_OUTSIDE_STACK: {
+                    //CHAOZHUO START
+                    if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
                     int stackId;
                     synchronized (mWindowMap) {
                         stackId = ((DisplayContent)msg.obj).stackIdFromPoint(msg.arg1, msg.arg2);
@@ -8218,6 +8407,8 @@ public class WindowManagerService extends IWindowManager.Stub
                         } catch (RemoteException e) {
                         }
                     }
+                    }
+                    //CHAOZHUO END
                 }
                 break;
                 case NOTIFY_ACTIVITY_DRAWN:
@@ -8831,13 +9022,35 @@ public class WindowManagerService extends IWindowManager.Stub
                 final int numTokens = tokens.size();
                 for (int tokenNdx = 0; tokenNdx < numTokens; ++tokenNdx) {
                     final AppWindowToken wtoken = tokens.get(tokenNdx);
-                    if (wtoken.mIsExiting) {
+                    //CHAOZHUO START
+                    if (wtoken.mIsExiting || CZSwitchManager.BUILD_MAIN_SWITCH_ON ? wtoken.mPin : false) {
+                    //CHAOZHUO END
                         continue;
                     }
                     i = reAddAppWindowsLocked(displayContent, i, wtoken);
                 }
             }
         }
+        //CHAOZHUO START
+        // And then add all the pin app tokens in Z order
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        for (int stackNdx = 0; stackNdx < numStacks; ++stackNdx) {
+            final ArrayList<Task> tasks = stacks.get(stackNdx).getTasks();
+            final int numTasks = tasks.size();
+            for (int taskNdx = 0; taskNdx < numTasks; ++taskNdx) {
+                final AppTokenList tokens = tasks.get(taskNdx).mAppTokens;
+                final int numTokens = tokens.size();
+                for (int tokenNdx = 0; tokenNdx < numTokens; ++tokenNdx) {
+                    final AppWindowToken wtoken = tokens.get(tokenNdx);
+                    if (wtoken.mIsExiting || !wtoken.mPin) {
+                        continue;
+                    }
+                    i = reAddAppWindowsLocked(displayContent, i, wtoken);
+                }
+            }
+        }
+        }
+        //CHAOZHUO END
 
         i -= lastBelow;
         if (i != numRemoved) {
@@ -10025,6 +10238,17 @@ public class WindowManagerService extends IWindowManager.Stub
 
                     final WindowStateAnimator winAnimator = w.mWinAnimator;
 
+                    //CHAOZHUO START
+                    if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                    if (w.mLastFrame.left != w.mFrame.left ||
+                            w.mLastFrame.top != w.mFrame.top) {
+                        try {
+                            w.mClient.moved(w.mFrame.left, w.mFrame.top);
+                        } catch (RemoteException e) {
+                        }
+                    }
+                    }
+                    //CHAOZHUO END
                     // If the window has moved due to its containing content frame changing, then
                     // notify the listeners and optionally animate it.
                     if (w.hasMoved()) {
@@ -10410,7 +10634,11 @@ public class WindowManagerService extends IWindowManager.Stub
         if (updateInputWindowsNeeded) {
             mInputMonitor.updateInputWindowsLw(false /*force*/);
         }
+        //CHAOZHUO START
+        if (!CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
         setFocusedStackFrame();
+        }
+        //CHAOZHUO END
 
         // Check to see if we are now in a state where the screen should
         // be enabled, because the window obscured flags have changed.
@@ -10776,7 +11004,14 @@ public class WindowManagerService extends IWindowManager.Stub
                             // Whoops, we are below the focused app...  no focus for you!
                             if (localLOGV || DEBUG_FOCUS_LIGHT) Slog.v(TAG,
                                     "findFocusedWindow: Reached focused app=" + mFocusedApp);
+                            //CHAOZHUO START
+                            // pined app will be below the focused app
+                            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                            break;
+                            } else {
                             return null;
+                            }
+                            //CHAOZHUO END
                         }
                     }
                     if (tokenNdx >= 0) {
@@ -10788,6 +11023,12 @@ public class WindowManagerService extends IWindowManager.Stub
 
             if (DEBUG_FOCUS_LIGHT) Slog.v(TAG, "findFocusedWindow: Found new focus @ " + i +
                         " = " + win);
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            if (wtoken != mFocusedApp)
+                continue;
+            }
+            //CHAOZHUO END
             return win;
         }
 
diff --git a/services/core/java/com/android/server/wm/WindowState.java b/services/core/java/com/android/server/wm/WindowState.java
index c1194a9..b70bf2e 100644
--- a/services/core/java/com/android/server/wm/WindowState.java
+++ b/services/core/java/com/android/server/wm/WindowState.java
@@ -68,6 +68,13 @@ import android.view.WindowManagerPolicy;
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
+//CHAOZHUO START
+import static android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION;
+//CHAOZHUO END
+//CHAOZHUO START
+import com.chaozhuo.system.CZSwitchManager;
+//CHAOZHUO END
 
 class WindowList extends ArrayList<WindowState> {
 }
@@ -98,7 +105,9 @@ final class WindowState implements WindowManagerPolicy.WindowState {
     final DeathRecipient mDeathRecipient;
     final WindowState mAttachedWindow;
     final WindowList mChildWindows = new WindowList();
-    final int mBaseLayer;
+    //CHAOZHUO START
+    int mBaseLayer;
+    //CHAOZHUO END
     final int mSubLayer;
     final boolean mLayoutAttached;
     final boolean mIsImWindow;
@@ -422,9 +431,15 @@ final class WindowState implements WindowManagerPolicy.WindowState {
                 mAttrs.type <= LAST_SUB_WINDOW)) {
             // The multiplier here is to reserve space for multiple
             // windows in the same type layer.
+            //CHAOZHUO START
+            if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+            mBaseLayer = attachedWindow.mBaseLayer;
+            } else {
             mBaseLayer = mPolicy.windowTypeToLayerLw(
                     attachedWindow.mAttrs.type) * WindowManagerService.TYPE_LAYER_MULTIPLIER
                     + WindowManagerService.TYPE_LAYER_OFFSET;
+            }
+            //CHAOZHUO END
             mSubLayer = mPolicy.subWindowTypeToLayerLw(a.type);
             mAttachedWindow = attachedWindow;
             if (WindowManagerService.DEBUG_ADD_REMOVE) Slog.v(TAG, "Adding " + this + " to " + mAttachedWindow);
@@ -519,6 +534,19 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             + ", list=" + mToken.windows);
         mSession.windowAddedLocked();
     }
+    //CHAOZHUO START
+    boolean mPin = false;
+    void setPin(boolean pin) {
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (mPin != pin) {
+            if (pin)
+                mBaseLayer += WindowManagerService.TYPE_LAYER_MULTIPLIER;
+            else mBaseLayer -= WindowManagerService.TYPE_LAYER_MULTIPLIER;
+            mPin = pin;
+        }
+        }
+    }
+    //CHAOZHUO END
 
     @Override
     public int getOwningUid() {
@@ -529,14 +557,52 @@ final class WindowState implements WindowManagerPolicy.WindowState {
     public String getOwningPackage() {
         return mAttrs.packageName;
     }
-
+    
     @Override
     public void computeFrameLw(Rect pf, Rect df, Rect of, Rect cf, Rect vf, Rect dcf, Rect sf,
             Rect osf) {
         mHaveFrame = true;
-
+        
         final TaskStack stack = mAppToken != null ? getStack() : null;
         final boolean nonFullscreenStack = stack != null && !stack.isFullscreen();
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+        if (stack != null && mAppToken.appWindowMode) {
+            stack.getBounds(mContainingFrame);
+//            final WindowState imeWin = mService.mInputMethodWindow;
+//            if (imeWin != null && imeWin.isVisibleNow() && mService.mInputMethodTarget == this
+//                    && mContainingFrame.bottom > cf.bottom) {
+//                // IME is up and obscuring this window. Adjust the window position so it is visible.
+//                mContainingFrame.top -= mContainingFrame.bottom - cf.bottom;
+//            }
+            if (mAttrs.type != TYPE_BASE_APPLICATION && mAttachedWindow != null) {
+                mContainingFrame.set(pf);
+            }
+            if (mAttrs.type == TYPE_APPLICATION) {
+                final Rect frameInsets = mAppToken.mFrameInsets;
+                mContainingFrame.set(mContainingFrame.left + frameInsets.left,
+                        mContainingFrame.top + frameInsets.top,mContainingFrame.right - frameInsets.right,
+                        mContainingFrame.bottom - frameInsets.bottom);
+            }
+            // Make sure the containing frame is within the content frame so we don't layout
+            // resized window under screen decorations.
+            //if (!mContainingFrame.intersect(cf)) {
+            //    mContainingFrame.set(cf);
+            //}
+            mDisplayFrame.set(mContainingFrame);
+        } else if (mLastTitle != null && mLastTitle.equals("StartUpWindow")) {
+            mContainingFrame.set(dcf);
+            pf.set(dcf);
+            of.set(dcf);
+            cf.set(dcf);
+            df.set(dcf);
+            mDisplayFrame.set(df);
+        } else {
+            mContainingFrame.set(pf);
+            mDisplayFrame.set(df);
+        }
+        } else {
+        //CHAOZHUO END
         if (nonFullscreenStack) {
             stack.getBounds(mContainingFrame);
             final WindowState imeWin = mService.mInputMethodWindow;
@@ -554,6 +620,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
         } else {
             mContainingFrame.set(pf);
             mDisplayFrame.set(df);
+        }        
         }
 
         final int pw = mContainingFrame.width();
@@ -581,14 +648,26 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             } else if (mEnforceSizeCompat) {
                 w = (int)(mRequestedWidth * mGlobalScale + .5f);
             } else {
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                w = mRequestedWidth < pw ? mRequestedWidth : pw;
+                } else {
                 w = mRequestedWidth;
+                }
+                //CHAOZHUO END
             }
             if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
                 h = ph;
             } else if (mEnforceSizeCompat) {
                 h = (int)(mRequestedHeight * mGlobalScale + .5f);
             } else {
+                //CHAOZHUO START
+                if (CZSwitchManager.BUILD_MAIN_SWITCH_ON) {
+                h = mRequestedHeight < ph ? mRequestedHeight : ph;
+                } else {
                 h = mRequestedHeight;
+                }
+                //CHAOZHUO END
             }
         }
 
@@ -650,6 +729,9 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             mOutsets.set(0, 0, 0, 0);
         }
 
+        //CHAOZHUO START
+        if (CZSwitchManager.BUILD_MAIN_SWITCH_ON ? ((stack == null) || (stack.isFullscreen()) || !mAppToken.appWindowMode) : true) {
+        //CHAOZHUO END
         // Make sure the content and visible frames are inside of the
         // final window frame.
         mContentFrame.set(Math.max(mContentFrame.left, mFrame.left),
@@ -686,7 +768,28 @@ final class WindowState implements WindowManagerPolicy.WindowState {
                 Math.max(mStableFrame.top - mFrame.top, 0),
                 Math.max(mFrame.right - mStableFrame.right, 0),
                 Math.max(mFrame.bottom - mStableFrame.bottom, 0));
-
+        //CHAOZHUO START
+        } else if ((mAttrs.type >= FIRST_SUB_WINDOW && 
+                mAttrs.type <= LAST_SUB_WINDOW) ||
+                mAttrs.type == WindowManager.LayoutParams.TYPE_APPLICATION) {
+            // subwindow like menu popupwindow should display inside screen
+            Gravity.applyDisplay(mAttrs.gravity, vf, mFrame);
+        } else {
+            /***
+             * CHAOZHUO add by chenduo 多窗口下, sf.bottom > vf.bottom时将可见区片衬设置为差值
+             */
+            mContentInsets.set(0,0,0,0);
+            if (sf.bottom > vf.bottom && mService.mInputMethodTarget == this) {
+                mVisibleInsets.set(mVisibleInsets.left,
+                        mVisibleInsets.top,
+                        mVisibleInsets.right,
+                        mFrame.bottom - vf.bottom);
+            } else {
+                mVisibleInsets.set(0, 0, 0, 0);
+            }
+            /*** CHAOZHUO ***/
+        }
+        //CHAOZHUO END
         mCompatFrame.set(mFrame);
         if (mEnforceSizeCompat) {
             // If there is a size compatibility scale being applied to the
diff --git a/services/core/jni/com_android_server_input_InputManagerService.cpp b/services/core/jni/com_android_server_input_InputManagerService.cpp
index 9ae5980..c59ce21 100644
--- a/services/core/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/core/jni/com_android_server_input_InputManagerService.cpp
@@ -200,6 +200,9 @@ public:
     void setShowTouches(bool enabled);
     void setInteractive(bool interactive);
     void reloadCalibration();
+    //CHAOZHUO START
+    void updatePointerIcon(JNIEnv* env,jobject pointerIconObj);
+    //CHAOZHUO END
 
     /* --- InputReaderPolicyInterface implementation --- */
 
@@ -356,7 +359,6 @@ void NativeInputManager::setDisplayViewport(bool external, const DisplayViewport
         if (v != viewport) {
             changed = true;
             v = viewport;
-
             if (!external) {
                 sp<PointerController> controller = mLocked.pointerController.promote();
                 if (controller != NULL) {
@@ -1316,7 +1318,26 @@ static void nativeReloadCalibration(JNIEnv* env, jclass clazz, jlong ptr) {
     NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
     im->reloadCalibration();
 }
+//CHAOZHUO START
+void NativeInputManager::updatePointerIcon(JNIEnv* env,jobject pointerIconObj) {
+
+    PointerIcon pointerIcon;
+    sp<PointerController> controller = mLocked.pointerController.promote();
+    status_t status = android_view_PointerIcon_load(env, pointerIconObj,
+            mContextObj, &pointerIcon);
+    if (!status && !pointerIcon.isNullIcon() && controller != NULL) {
+        controller->setPointerIcon(
+                SpriteIcon(pointerIcon.bitmap, pointerIcon.hotSpotX,
+                        pointerIcon.hotSpotY));
+    }
+}
 
+static void nativeUpdatePointerIcon(JNIEnv* env,
+        jclass clazz, jlong ptr, jobject pointIcon) {
+    NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
+    im->updatePointerIcon(env,pointIcon);
+}
+//CHAOZHUO END
 static void nativeVibrate(JNIEnv* env,
         jclass /* clazz */, jlong ptr, jint deviceId, jlongArray patternObj,
         jint repeat, jint token) {
@@ -1433,6 +1454,10 @@ static JNINativeMethod gInputManagerMethods[] = {
             (void*) nativeSetInteractive },
     { "nativeReloadCalibration", "(J)V",
             (void*) nativeReloadCalibration },
+    //CHAOZHUO START
+    { "nativeUpdatePointerIcon", "(JLandroid/view/PointerIcon;)V",
+            (void*) nativeUpdatePointerIcon },
+    //CHAOZHUO END
     { "nativeVibrate", "(JI[JII)V",
             (void*) nativeVibrate },
     { "nativeCancelVibrate", "(JII)V",
